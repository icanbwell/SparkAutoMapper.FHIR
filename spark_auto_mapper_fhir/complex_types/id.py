from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList


from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    # extension (Extension)
    from spark_auto_mapper_fhir.complex_types.extension import Extension


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class FhirId(FhirComplexTypeBase):
    """
    id
        Any combination of letters, numerals, "-" and ".", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
        RFC 4122
        If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        extension: Optional[FhirList[Extension]] = None,
    ) -> None:
        """
            Any combination of letters, numerals, "-" and ".", with a length limit of 64
        characters.  (This might be an integer, an unprefixed OID, UUID or any other
        identifier pattern that meets these constraints.)  Ids are case-insensitive.
            RFC 4122
            If the element is present, it must have either a @value, an @id referenced
        from the Narrative, or extensions

            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
        """
        super().__init__(
            extension=extension,
        )
