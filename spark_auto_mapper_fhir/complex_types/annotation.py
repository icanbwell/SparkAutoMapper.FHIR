from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.markdown import markdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Annotation(FhirComplexTypeBase):
    """
    Annotation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        time: Optional[FhirDateTime] = None,
        text: markdown,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param time: Indicates when this particular annotation was made.
        :param text: The text of the annotation in markdown format.
        """
        super().__init__(
            id_=id_,
            meta=meta,
            extension=extension,
            time=time,
            text=text,
        )
