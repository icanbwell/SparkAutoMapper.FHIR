from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.data_requirement_code_filter import DataRequirementCodeFilter
    from spark_auto_mapper_fhir.complex_types.data_requirement_date_filter import DataRequirementDateFilter
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.data_requirement_sort import DataRequirementSort


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DataRequirement(FhirComplexTypeBase):
    """
    DataRequirement
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: code ,
        profile: Optional[FhirList[canonical ]] = None,
        mustSupport: Optional[FhirList[FhirString ]] = None,
        codeFilter: Optional[FhirList[DataRequirementCodeFilter ]] = None,
        dateFilter: Optional[FhirList[DataRequirementDateFilter ]] = None,
        limit: Optional[positiveInt ] = None,
        sort: Optional[FhirList[DataRequirementSort ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type_: The type of the required data, specified as the type name of a resource. For
    profiles, this value is set to the type of the base resource of the profile.
        :param profile: The profile of the required data, specified as the uri of the profile
    definition.
        :param mustSupport: Indicates that specific elements of the type are referenced by the knowledge
    module and must be supported by the consumer in order to obtain an effective
    evaluation. This does not mean that a value is required for this element, only
    that the consuming system must understand the element and be able to provide
    values for it if they are available.
    
    The value of mustSupport SHALL be a FHIRPath resolveable on the type of the
    DataRequirement. The path SHALL consist only of identifiers, constant
    indexers, and .resolve() (see the [Simple FHIRPath
    Profile](fhirpath.html#simple) for full details).
        :param codeFilter: Code filters specify additional constraints on the data, specifying the value
    set of interest for a particular element of the data. Each code filter defines
    an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
        :param dateFilter: Date filters specify additional constraints on the data in terms of the
    applicable date range for specific elements. Each date filter specifies an
    additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
        :param limit: Specifies a maximum number of results that are required (uses the _count
    search parameter).
        :param sort: Specifies the order of the results to be returned.
        """
        super().__init__(
            id_=id_,
            meta=meta,
            extension=extension,
            type_=type_,
            profile=profile,
            mustSupport=mustSupport,
            codeFilter=codeFilter,
            dateFilter=dateFilter,
            limit=limit,
            sort=sort,
        )
