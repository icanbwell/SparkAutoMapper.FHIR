from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # type_ (ContributorType)
    from spark_auto_mapper_fhir.value_sets.contributor_type import ContributorTypeCode

    # name (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Contributor(FhirComplexTypeBase):
    """
    Contributor
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: ContributorTypeCode,
        name: FhirString,
        contact: Optional[FhirList[ContactDetail]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: The type of contributor.
            :param name: The name of the individual or organization responsible for the contribution.
            :param contact: Contact details to assist a user in finding and communicating with the
        contributor.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            name=name,
            contact=contact,
        )
