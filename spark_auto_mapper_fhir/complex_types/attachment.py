from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # contentType (Mime Types)
    from spark_auto_mapper_fhir.value_sets.mime_types import MimeTypesCode

    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # data (base64Binary)
    from spark_auto_mapper_fhir.complex_types.base64_binary import base64Binary

    # url (url)
    from spark_auto_mapper_fhir.complex_types.url import url

    # size (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt

    # hash (base64Binary)
    # title (string)
    # creation (dateTime)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Attachment(FhirComplexTypeBase):
    """
    Attachment
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        contentType: Optional[MimeTypesCode] = None,
        language: Optional[CommonLanguagesCode] = None,
        data: Optional[base64Binary] = None,
        url: Optional[url] = None,
        size: Optional[unsignedInt] = None,
        hash: Optional[base64Binary] = None,
        title: Optional[FhirString] = None,
        creation: Optional[FhirDateTime] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param contentType: Identifies the type of the data in the attachment and allows a method to be
        chosen to interpret or render the data. Includes mime type parameters such as
        charset where appropriate.
            :param language: The human language of the content. The value can be any valid value according
        to BCP 47.
            :param data: The actual data of the attachment - a sequence of bytes, base64 encoded.
            :param url: A location where the data can be accessed.
            :param size: The number of bytes of data that make up this attachment (before base64
        encoding, if that is done).
            :param hash: The calculated hash of the data using SHA-1. Represented using base64.
            :param title: A label or set of text to display in place of the data.
            :param creation: The date that the attachment was first created.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            contentType=contentType,
            language=language,
            data=data,
            url=url,
            size=size,
            hash=hash,
            title=title,
            creation=creation,
        )
