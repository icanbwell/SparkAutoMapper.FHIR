from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # type_ (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.signature_type_codes import (
        SignatureTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # when (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # who (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for who
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.organization import Organization

    # onBehalfOf (Reference)
    # Imports for References for onBehalfOf
    # targetFormat (Mime Types)
    from spark_auto_mapper_fhir.value_sets.mime_types import MimeTypesCode

    # sigFormat (Mime Types)
    # data (base64Binary)
    from spark_auto_mapper_fhir.complex_types.base64_binary import base64Binary


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Signature(FhirComplexTypeBase):
    """
    Signature
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: FhirList[Coding[SignatureTypeCodesCode]],
        when: FhirInstant,
        who: Reference[
            Union[
                Practitioner,
                PractitionerRole,
                RelatedPerson,
                Patient,
                Device,
                Organization,
            ]
        ],
        onBehalfOf: Optional[
            Reference[
                Union[
                    Practitioner,
                    PractitionerRole,
                    RelatedPerson,
                    Patient,
                    Device,
                    Organization,
                ]
            ]
        ] = None,
        targetFormat: Optional[MimeTypesCode] = None,
        sigFormat: Optional[MimeTypesCode] = None,
        data: Optional[base64Binary] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: An indication of the reason that the entity signed this document. This may be
        explicitly included as part of the signature information and can be used when
        determining accountability for various actions concerning the document.
            :param when: When the digital signature was signed.
            :param who: A reference to an application-usable description of the identity that signed
        (e.g. the signature used their private key).
            :param onBehalfOf: A reference to an application-usable description of the identity that is
        represented by the signature.
            :param targetFormat: A mime type that indicates the technical format of the target resources signed
        by the signature.
            :param sigFormat: A mime type that indicates the technical format of the signature. Important
        mime types are application/signature+xml for X ML DigSig, application/jose for
        JWS, and image/* for a graphical image of a signature, etc.
            :param data: The base64 encoding of the Signature content. When signature is not recorded
        electronically this element would be empty.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            when=when,
            who=who,
            onBehalfOf=onBehalfOf,
            targetFormat=targetFormat,
            sigFormat=sigFormat,
            data=data,
        )
