from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList


from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # extension (Extension)
    from spark_auto_mapper_fhir.complex_types.extension import Extension


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class FhirInstant(FhirComplexTypeBase):
    """
    instant
        An instant in time - known at least to the second
        Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. Time zone is always required
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        extension: Optional[FhirList[Extension]] = None,
    ) -> None:
        """
            An instant in time - known at least to the second
            Note: This is intended for where precisely observed times are required,
        typically system logs etc., and not human-reported times - for them, see date
        and dateTime (which can be as precise as instant, but is not required to be)
        below. Time zone is always required
            If the element is present, it must have either a @value, an @id, or extensions

            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
        """
        super().__init__(
            extension=extension,
        )
