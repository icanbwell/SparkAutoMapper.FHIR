from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # name (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # use (OperationParameterUse)
    from spark_auto_mapper_fhir.value_sets.operation_parameter_use import (
        OperationParameterUseCode,
    )

    # min (integer)
    # max (string)
    # documentation (string)
    # type_ (FHIRAllTypes)
    from spark_auto_mapper_fhir.value_sets.fhir_all_types import FHIRAllTypesCode

    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ParameterDefinition(FhirComplexTypeBase):
    """
    ParameterDefinition
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: Optional[code] = None,
        use: OperationParameterUseCode,
        min: Optional[FhirInteger] = None,
        max: Optional[FhirString] = None,
        documentation: Optional[FhirString] = None,
        type_: FHIRAllTypesCode,
        profile: Optional[FhirCanonical] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param name: The name of the parameter used to allow access to the value of the parameter
        in evaluation contexts.
            :param use: Whether the parameter is input or output for the module.
            :param min: The minimum number of times this parameter SHALL appear in the request or
        response.
            :param max: The maximum number of times this element is permitted to appear in the request
        or response.
            :param documentation: A brief discussion of what the parameter is for and how it is used by the
        module.
            :param type_: The type of the parameter.
            :param profile: If specified, this indicates a profile that the input data must conform to, or
        that the output data will conform to.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            use=use,
            min=min,
            max=max,
            documentation=documentation,
            type_=type_,
            profile=profile,
        )
