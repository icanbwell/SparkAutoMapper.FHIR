from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.canonical import canonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ParameterDefinition(FhirComplexTypeBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: Optional[code] = None,
        use: code,
        min: Optional[FhirInteger] = None,
        max: Optional[FhirString] = None,
        documentation: Optional[FhirString] = None,
        type: code,
        profile: Optional[canonical] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param name: The name of the parameter used to allow access to the value of the parameter
        in evaluation contexts.
            :param use: Whether the parameter is input or output for the module.
            :param min: The minimum number of times this parameter SHALL appear in the request or
        response.
            :param max: The maximum number of times this element is permitted to appear in the request
        or response.
            :param documentation: A brief discussion of what the parameter is for and how it is used by the
        module.
            :param type: The type of the parameter.
            :param profile: If specified, this indicates a profile that the input data must conform to, or
        that the output data will conform to.
        """
        super().__init__(
            resourceType="ParameterDefinition",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            use=use,
            min=min,
            max=max,
            documentation=documentation,
            type=type,
            profile=profile,
        )
