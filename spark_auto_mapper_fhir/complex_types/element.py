from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.fhir_types.fhir_reference import FhirReference
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # extension (Extension)
    from spark_auto_mapper_fhir.complex_types.extension import Extension


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Element(FhirComplexTypeBase):
    """
    Element
        Base definition for all elements in a resource.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        extension: Optional[FhirList[Extension ]] = None,
    ) -> None:
        """
        Base definition for all elements in a resource.
        If the element is present, it must have a value for at least one of the
    defined elements, an @id referenced from the Narrative, or extensions

        :param extension: May be used to represent additional information that is not part of the basic
    definition of the element. To make the use of extensions safe and manageable,
    there is a strict set of governance  applied to the definition and use of
    extensions. Though any implementer can define an extension, there is a set of
    requirements that SHALL be met as part of the definition of the extension.
        """
        super().__init__(
            extension=extension,
        )
