from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.relatedartifact import RelatedArtifactSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # type_ (RelatedArtifactType)
    from spark_auto_mapper_fhir.value_sets.related_artifact_type import (
        RelatedArtifactTypeCode,
    )

    # label (string)
    # display (string)
    # citation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # url (url)
    from spark_auto_mapper_fhir.fhir_types.url import FhirUrl

    # document (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # resource (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RelatedArtifact(FhirComplexTypeBase):
    """
    RelatedArtifact
    fhir-base.xsd
        Related artifacts such as additional documentation, justification, or bibliographic references.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        type_: RelatedArtifactTypeCode,
        label: Optional[FhirString] = None,
        display: Optional[FhirString] = None,
        citation: Optional[FhirMarkdown] = None,
        url: Optional[FhirUrl] = None,
        document: Optional[Attachment] = None,
        resource: Optional[FhirCanonical] = None,
    ) -> None:
        """
            Related artifacts such as additional documentation, justification, or
        bibliographic references.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param type_: The type of relationship to the related artifact.
            :param label: A short label that can be used to reference the citation from elsewhere in the
        containing artifact, such as a footnote index.
            :param display: A brief description of the document or knowledge resource being referenced,
        suitable for display to a consumer.
            :param citation: A bibliographic citation for the related artifact. This text SHOULD be
        formatted according to an accepted citation format.
            :param url: A url for the artifact that can be followed to access the actual content.
            :param document: The document being referenced, represented as an attachment. This is exclusive
        with the resource element.
            :param resource: The related resource, such as a library, value set, profile, or other
        knowledge resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            label=label,
            display=display,
            citation=citation,
            url=url,
            document=document,
            resource=resource,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return RelatedArtifactSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
