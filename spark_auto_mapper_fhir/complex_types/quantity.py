from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # value (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # comparator (QuantityComparator)
    from spark_auto_mapper_fhir.value_sets.quantity_comparator import (
        QuantityComparatorCode,
    )

    # unit (string)
    # system (uri)
    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Quantity(FhirComplexTypeBase):
    """
    Quantity
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        value: Optional[FhirDecimal] = None,
        comparator: Optional[QuantityComparatorCode] = None,
        unit: Optional[FhirString] = None,
        system: Optional[FhirUri] = None,
        code: Optional[code] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param value: The value of the measured amount. The value includes an implicit precision in
        the presentation of the value.
            :param comparator: How the value should be understood and represented - whether the actual value
        is greater or less than the stated value due to measurement issues; e.g. if
        the comparator is "<" , then the real value is < stated value.
            :param unit: A human-readable form of the unit.
            :param system: The identification of the system that provides the coded form of the unit.
            :param code: A computer processable form of the unit in some unit representation system.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            value=value,
            comparator=comparator,
            unit=unit,
            system=system,
            code=code,
        )
