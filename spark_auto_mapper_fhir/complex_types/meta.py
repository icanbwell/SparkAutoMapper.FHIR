from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # versionId (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # lastUpdated (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # source (uri)
    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # security (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for security
    from spark_auto_mapper_fhir.value_sets.all_security_labels import (
        AllSecurityLabelsCode,
    )

    # End Import for CodeableConcept for security
    # tag (Coding)
    # Import for CodeableConcept for tag
    from spark_auto_mapper_fhir.value_sets.common_tags import CommonTagsCode

    # End Import for CodeableConcept for tag


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Meta(FhirComplexTypeBase):
    """
    Meta
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        versionId: Optional[id] = None,
        lastUpdated: Optional[FhirInstant] = None,
        source: Optional[FhirUri] = None,
        profile: Optional[FhirList[FhirCanonical]] = None,
        security: Optional[FhirList[Coding[AllSecurityLabelsCode]]] = None,
        tag: Optional[FhirList[Coding[CommonTagsCode]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param versionId: The version specific identifier, as it appears in the version portion of the
        URL. This value changes when the resource is created, updated, or deleted.
            :param lastUpdated: When the resource last changed - e.g. when the version changed.
            :param source: A uri that identifies the source system of the resource. This provides a
        minimal amount of [[[Provenance]]] information that can be used to track or
        differentiate the source of information in the resource. The source may
        identify another FHIR server, document, message, database, etc.
            :param profile: A list of profiles (references to [[[StructureDefinition]]] resources) that
        this resource claims to conform to. The URL is a reference to
        [[[StructureDefinition.url]]].
            :param security: Security labels applied to this resource. These tags connect specific
        resources to the overall security policy and infrastructure.
            :param tag: Tags applied to this resource. Tags are intended to be used to identify and
        relate resources to process and workflow, and applications are not required to
        consider the tags when interpreting the meaning of a resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            versionId=versionId,
            lastUpdated=lastUpdated,
            source=source,
            profile=profile,
            security=security,
            tag=tag,
        )
