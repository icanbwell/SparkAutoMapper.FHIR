from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # path (string)
    # direction (SortDirection)
    from spark_auto_mapper_fhir.value_sets.sort_direction import SortDirectionCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DataRequirementSort(FhirComplexTypeBase):
    """
    DataRequirement.Sort
        Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        path: FhirString,
        direction: SortDirectionCode,
    ) -> None:
        """
            Describes a required data item for evaluation in terms of the type of data,
        and optional code or date-based filters of the data.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: id of resource
            :param extension: extensions
            :param path: The attribute of the sort. The specified path must be resolvable from the type
        of the required data. The path is allowed to contain qualifiers (.) to
        traverse sub-elements, as well as indexers ([x]) to traverse multiple-
        cardinality sub-elements. Note that the index must be an integer constant.
            :param direction: The direction of the sort, ascending or descending.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            path=path,
            direction=direction,
        )
