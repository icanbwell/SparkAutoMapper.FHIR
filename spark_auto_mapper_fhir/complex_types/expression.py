from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.expression import ExpressionSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # description (string)
    # name (id)
    # language (ExpressionLanguage)
    from spark_auto_mapper_fhir.value_sets.expression_language import (
        ExpressionLanguageCode,
    )

    # expression (string)
    # reference (uri)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Expression(FhirComplexTypeBase):
    """
    Expression
    fhir-base.xsd
        A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        description: Optional[FhirString] = None,
        name: Optional[FhirId] = None,
        language: ExpressionLanguageCode,
        expression: Optional[FhirString] = None,
        reference: Optional[FhirUri] = None,
    ) -> None:
        """
            A expression that is evaluated in a specified context and returns a value. The
        context of use of the expression must specify the context in which the
        expression is evaluated, and how the result of the expression is used.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param description: A brief, natural language description of the condition that effectively
        communicates the intended semantics.
            :param name: A short name assigned to the expression to allow for multiple reuse of the
        expression in the context where it is defined.
            :param language: The media type of the language for the expression.
            :param expression: An expression in the specified language that returns a value.
            :param reference: A URI that defines where the expression is found.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            name=name,
            language=language,
            expression=expression,
            reference=reference,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return ExpressionSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
