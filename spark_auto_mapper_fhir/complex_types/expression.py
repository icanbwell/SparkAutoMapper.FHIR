from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.expression_language import ExpressionLanguage
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.uri import uri


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Expression(FhirComplexTypeBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[string] = None,
        name: Optional[id] = None,
        language: ExpressionLanguage,
        expression: Optional[string] = None,
        reference: Optional[uri] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param description: A brief, natural language description of the condition that effectively
    communicates the intended semantics.
        :param name: A short name assigned to the expression to allow for multiple reuse of the
    expression in the context where it is defined.
        :param language: The media type of the language for the expression.
        :param expression: An expression in the specified language that returns a value.
        :param reference: A URI that defines where the expression is found.
        """
        super().__init__(
            resourceType="Expression",
            id_=id_,
            meta=meta,
            extension=extension,
            description=description,
            name=name,
            language=language,
            expression=expression,
            reference=reference,
        )
