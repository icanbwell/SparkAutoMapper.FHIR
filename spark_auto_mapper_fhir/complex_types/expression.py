from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # description (string)
    # name (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # language (ExpressionLanguage)
    from spark_auto_mapper_fhir.value_sets.expression_language import (
        ExpressionLanguageCode,
    )

    # expression (string)
    # reference (uri)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Expression(FhirComplexTypeBase):
    """
    Expression
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[FhirString] = None,
        name: Optional[id] = None,
        language: ExpressionLanguageCode,
        expression: Optional[FhirString] = None,
        reference: Optional[FhirUri] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param description: A brief, natural language description of the condition that effectively
        communicates the intended semantics.
            :param name: A short name assigned to the expression to allow for multiple reuse of the
        expression in the context where it is defined.
            :param language: The media type of the language for the expression.
            :param expression: An expression in the specified language that returns a value.
            :param reference: A URI that defines where the expression is found.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            name=name,
            language=language,
            expression=expression,
            reference=reference,
        )
