from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.humanname import HumanNameSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # use (NameUse)
    from spark_auto_mapper_fhir.value_sets.name_use import NameUseCode

    # text (string)
    # family (string)
    # given (string)
    # prefix (string)
    # suffix (string)
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class HumanName(FhirComplexTypeBase):
    """
    HumanName
    fhir-base.xsd
        A human's name with the ability to identify parts and usage.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        use: Optional[NameUseCode] = None,
        text: Optional[FhirString] = None,
        family: Optional[FhirString] = None,
        given: Optional[FhirList[FhirString]] = None,
        prefix: Optional[FhirList[FhirString]] = None,
        suffix: Optional[FhirList[FhirString]] = None,
        period: Optional[Period] = None,
    ) -> None:
        """
            A human's name with the ability to identify parts and usage.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param use: Identifies the purpose for this name.
            :param text: Specifies the entire name as it should be displayed e.g. on an application UI.
        This may be provided instead of or as well as the specific parts.
            :param family: The part of a name that links to the genealogy. In some cultures (e.g.
        Eritrea) the family name of a son is the first name of his father.
            :param given: Given name.
            :param prefix: Part of the name that is acquired as a title due to academic, legal,
        employment or nobility status, etc. and that appears at the start of the name.
            :param suffix: Part of the name that is acquired as a title due to academic, legal,
        employment or nobility status, etc. and that appears at the end of the name.
            :param period: Indicates the period of time when this name was valid for the named person.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            use=use,
            text=text,
            family=family,
            given=given,
            prefix=prefix,
            suffix=suffix,
            period=period,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return HumanNameSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
