from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # type_ (TriggerType)
    from spark_auto_mapper_fhir.value_sets.trigger_type import TriggerTypeCode

    # name (string)
    # data (DataRequirement)
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement

    # condition (Expression)
    from spark_auto_mapper_fhir.complex_types.expression import Expression

    # timingTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # timingReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for timingReference
    from spark_auto_mapper_fhir.resources.schedule import Schedule

    # timingDate (date)
    # timingDateTime (dateTime)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TriggerDefinition(FhirComplexTypeBase):
    """
    TriggerDefinition
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: TriggerTypeCode,
        name: Optional[FhirString] = None,
        data: Optional[FhirList[DataRequirement]] = None,
        condition: Optional[Expression] = None,
        timingTiming: Optional[Timing] = None,
        timingReference: Optional[Reference[Union[Schedule]]] = None,
        timingDate: Optional[FhirDate] = None,
        timingDateTime: Optional[FhirDateTime] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: The type of triggering event.
            :param name: A formal name for the event. This may be an absolute URI that identifies the
        event formally (e.g. from a trigger registry), or a simple relative URI that
        identifies the event in a local context.
            :param data: The triggering data of the event (if this is a data trigger). If more than one
        data is requirement is specified, then all the data requirements must be true.
            :param condition: A boolean-valued expression that is evaluated in the context of the container
        of the trigger definition and returns whether or not the trigger fires.
            :param timingTiming: None
            :param timingReference: None
            :param timingDate: None
            :param timingDateTime: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            name=name,
            data=data,
            condition=condition,
            timingTiming=timingTiming,
            timingReference=timingReference,
            timingDate=timingDate,
            timingDateTime=timingDateTime,
        )
