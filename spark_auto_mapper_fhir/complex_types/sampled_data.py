from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.sampleddata import SampledDataSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # origin (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # period (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # factor (decimal)
    # lowerLimit (decimal)
    # upperLimit (decimal)
    # dimensions (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # data (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SampledData(FhirComplexTypeBase):
    """
    SampledData
    fhir-base.xsd
        A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        origin: Quantity,
        period: FhirDecimal,
        factor: Optional[FhirDecimal] = None,
        lowerLimit: Optional[FhirDecimal] = None,
        upperLimit: Optional[FhirDecimal] = None,
        dimensions: FhirPositiveInt,
        data: Optional[FhirString] = None,
    ) -> None:
        """
            A series of measurements taken by a device, with upper and lower limits. There
        may be more than one dimension in the data.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param origin: The base quantity that a measured value of zero represents. In addition, this
        provides the units of the entire measurement series.
            :param period: The length of time between sampling times, measured in milliseconds.
            :param factor: A correction factor that is applied to the sampled data points before they are
        added to the origin.
            :param lowerLimit: The lower limit of detection of the measured points. This is needed if any of
        the data points have the value "L" (lower than detection limit).
            :param upperLimit: The upper limit of detection of the measured points. This is needed if any of
        the data points have the value "U" (higher than detection limit).
            :param dimensions: The number of sample points at each time point. If this value is greater than
        one, then the dimensions will be interlaced - all the sample points for a
        point in time will be recorded at once.
            :param data: A series of data points which are decimal values separated by a single space
        (character u20). The special values "E" (error), "L" (below detection limit)
        and "U" (above detection limit) can also be used in place of a decimal value.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            origin=origin,
            period=period,
            factor=factor,
            lowerLimit=lowerLimit,
            upperLimit=upperLimit,
            dimensions=dimensions,
            data=data,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return SampledDataSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
