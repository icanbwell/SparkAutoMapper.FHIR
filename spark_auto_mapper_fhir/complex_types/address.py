from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.address import AddressSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # use (AddressUse)
    from spark_auto_mapper_fhir.value_sets.address_use import AddressUseCode

    # type_ (AddressType)
    from spark_auto_mapper_fhir.value_sets.address_type import AddressTypeCode

    # text (string)
    # line (string)
    # city (string)
    # district (string)
    # state (string)
    # postalCode (string)
    # country (string)
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Address(FhirComplexTypeBase):
    """
    Address
    fhir-base.xsd
        An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        use: Optional[AddressUseCode] = None,
        type_: Optional[AddressTypeCode] = None,
        text: Optional[FhirString] = None,
        line: Optional[FhirList[FhirString]] = None,
        city: Optional[FhirString] = None,
        district: Optional[FhirString] = None,
        state: Optional[FhirString] = None,
        postalCode: Optional[FhirString] = None,
        country: Optional[FhirString] = None,
        period: Optional[Period] = None,
    ) -> None:
        """
            An address expressed using postal conventions (as opposed to GPS or other
        location definition formats).  This data type may be used to convey addresses
        for use in delivering mail as well as for visiting locations which might not
        be valid for mail delivery.  There are a variety of postal address formats
        defined around the world.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param use: The purpose of this address.
            :param type_: Distinguishes between physical addresses (those you can visit) and mailing
        addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
            :param text: Specifies the entire address as it should be displayed e.g. on a postal label.
        This may be provided instead of or as well as the specific parts.
            :param line: This component contains the house number, apartment number, street name,
        street direction,  P.O. Box number, delivery hints, and similar address
        information.
            :param city: The name of the city, town, suburb, village or other community or delivery
        center.
            :param district: The name of the administrative area (county).
            :param state: Sub-unit of a country with limited sovereignty in a federally organized
        country. A code may be used if codes are in common use (e.g. US 2 letter state
        codes).
            :param postalCode: A postal code designating a region defined by the postal service.
            :param country: Country - a nation as commonly understood or generally accepted.
            :param period: Time period when address was/is in use.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            use=use,
            type_=type_,
            text=text,
            line=line,
            city=city,
            district=district,
            state=state,
            postalCode=postalCode,
            country=country,
            period=period,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return AddressSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
