from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.address_use import AddressUse
    from spark_auto_mapper_fhir.complex_types.address_type import AddressType
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Address(FhirComplexTypeBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        use: Optional[AddressUse] = None,
        type_: Optional[AddressType] = None,
        text: Optional[string] = None,
        line: Optional[FhirList[string]] = None,
        city: Optional[string] = None,
        district: Optional[string] = None,
        state: Optional[string] = None,
        postalCode: Optional[string] = None,
        country: Optional[string] = None,
        period: Optional[Period] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param use: The purpose of this address.
        :param type_: Distinguishes between physical addresses (those you can visit) and mailing
    addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
        :param text: Specifies the entire address as it should be displayed e.g. on a postal label.
    This may be provided instead of or as well as the specific parts.
        :param line: This component contains the house number, apartment number, street name,
    street direction,  P.O. Box number, delivery hints, and similar address
    information.
        :param city: The name of the city, town, suburb, village or other community or delivery
    center.
        :param district: The name of the administrative area (county).
        :param state: Sub-unit of a country with limited sovereignty in a federally organized
    country. A code may be used if codes are in common use (e.g. US 2 letter state
    codes).
        :param postalCode: A postal code designating a region defined by the postal service.
        :param country: Country - a nation as commonly understood or generally accepted.
        :param period: Time period when address was/is in use.
        """
        super().__init__(
            resourceType="Address",
            id_=id_,
            meta=meta,
            extension=extension,
            use=use,
            type_=type_,
            text=text,
            line=line,
            city=city,
            district=district,
            state=state,
            postalCode=postalCode,
            country=country,
            period=period,
        )
