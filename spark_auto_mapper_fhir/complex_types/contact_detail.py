from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.contactdetail import ContactDetailSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # name (string)
    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContactDetail(FhirComplexTypeBase):
    """
    ContactDetail
    fhir-base.xsd
        Specifies contact information for a person or organization.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        name: Optional[FhirString] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
    ) -> None:
        """
            Specifies contact information for a person or organization.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param name: The name of an individual to contact.
            :param telecom: The contact details for the individual (if a name was provided) or the
        organization.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            telecom=telecom,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return ContactDetailSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
