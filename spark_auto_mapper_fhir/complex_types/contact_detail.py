from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # name (string)
    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContactDetail(FhirComplexTypeBase):
    """
    ContactDetail
        Specifies contact information for a person or organization.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: Optional[FhirString] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
    ) -> None:
        """
            Specifies contact information for a person or organization.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: id of resource
            :param extension: extensions
            :param name: The name of an individual to contact.
            :param telecom: The contact details for the individual (if a name was provided) or the
        organization.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            telecom=telecom,
        )
