from __future__ import annotations
from typing import Optional

from spark_auto_mapper_fhir.fhir_types.list import FhirList

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class FhirDateTime(FhirComplexTypeBase):
    """
    dateTime
        A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
    ) -> None:
        """
            A date, date-time or partial date (e.g. just year or year + month).  If hours
        and minutes are specified, a time zone SHALL be populated. The format is a
        union of the schema types gYear, gYearMonth, date and dateTime. Seconds must
        be provided due to schema type constraints but may be zero-filled and may be
        ignored.                 Dates SHALL be valid dates.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param extension: extensions
        """
        super().__init__(
            id_=id_,
            extension=extension,
        )
