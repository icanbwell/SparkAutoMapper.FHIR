from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList

from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    pass
    # start (dateTime)
    # end (dateTime)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Period(FhirComplexTypeBase):
    """
    Period
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        start: Optional[FhirDateTime] = None,
        end: Optional[FhirDateTime] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param start: The start of the period. The boundary is inclusive.
            :param end: The end of the period. If the end of the period is missing, it means no end
        was known or planned at the time the instance was created. The start may be in
        the past, and the end date in the future, which means that period is
        expected/planned to end at that time.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            start=start,
            end=end,
        )
