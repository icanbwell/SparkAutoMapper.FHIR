from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
from typing import TypeVar, Generic
from spark_auto_mapper_fhir.base_types.FhirValueSetBase import FhirValueSetBase
_T = TypeVar("_T", bound=Union[FhirValueSetBase])


class CodeableConcept(FhirComplexTypeBase, Generic[_T]):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        coding: Optional[FhirList[Coding[_T]]] = None,
        text: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param coding: A reference to a code defined by a terminology system.
        :param text: A human language representation of the concept as seen/selected/uttered by the
    user who entered the data and/or which represents the intended meaning of the
    user.
        """
        super().__init__(
            resourceType="CodeableConcept",
            id_=id_,
            meta=meta,
            extension=extension,
            coding=coding,
            text=text,
        )
