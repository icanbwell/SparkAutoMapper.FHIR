from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString

from spark_auto_mapper_fhir.extensions.custom.nested_extension_item import (
    NestedExtensionItem,
)

from spark_auto_mapper_fhir.base_types.fhir_complex_type_base import FhirComplexTypeBase
from spark_fhir_schemas.r4.complex_types.codeableconcept import CodeableConceptSchema


if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # coding (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for coding
    # End Import for CodeableConcept for coding
    # text (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
from typing import TypeVar, Generic
from spark_auto_mapper_fhir.base_types.FhirValueSetBase import FhirValueSetBase

_T = TypeVar("_T", bound=Union[FhirValueSetBase])


class CodeableConcept(FhirComplexTypeBase, Generic[_T]):
    """
    CodeableConcept
    fhir-base.xsd
        A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[NestedExtensionItem]] = None,
        coding: Optional[FhirList[Coding[_T]]] = None,
        text: Optional[FhirString] = None,
    ) -> None:
        """
            A concept that may be defined by a formal reference to a terminology or
        ontology or may be provided by text.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param coding: A reference to a code defined by a terminology system.
            :param text: A human language representation of the concept as seen/selected/uttered by the
        user who entered the data and/or which represents the intended meaning of the
        user.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            coding=coding,
            text=text,
        )
        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return CodeableConceptSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
