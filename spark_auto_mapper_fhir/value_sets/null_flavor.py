from __future__ import annotations

from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class NullFlavor(GenericTypeCode):
    """
    v3.NullFlavor
    From: http://terminology.hl7.org/ValueSet/v3-NullFlavor in v3-codesystems.xml
         A collection of codes specifying why a valid value is not present.
    """

    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://terminology.hl7.org/CodeSystem/v3-NullFlavor
    """
    codeset: FhirUri = "http://terminology.hl7.org/CodeSystem/v3-NullFlavor"


class NullFlavorValues:
    """
    Description:The value is exceptional (missing, omitted, incomplete, improper).
    No information as to the reason for being an exceptional value is provided.
    This is the most general exceptional value. It is also the default exceptional
    value.
    From: http://terminology.hl7.org/CodeSystem/v3-NullFlavor in v3-codesystems.xml
    """

    NoInformation = NullFlavor("NI")
    """
    Value is not present in a message.  This is only defined in messages, never in
    application data!  All values not present in the message must be replaced by
    the applicable default, or no-information (NI) as the default of all defaults.
    From: http://terminology.hl7.org/CodeSystem/v3-NullFlavor in v3-codesystems.xml
    """
    NotPresent = NullFlavor("NP")
