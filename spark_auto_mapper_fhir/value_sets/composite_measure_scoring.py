from __future__ import annotations

from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.FhirValueSetBase import FhirValueSetBase
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompositeMeasureScoringCode(FhirValueSetBase):
    """
    CompositeMeasureScoring
    """

    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://hl7.org/fhir/ValueSet/composite-measure-scoring
    """
    codeset: FhirUri = "http://hl7.org/fhir/ValueSet/composite-measure-scoring"


class CompositeMeasureScoringCodeValues:
    """
    Opportunity scoring combines the scores from component measures by combining the numerators and denominators for each component.
    """

    Opportunity = CompositeMeasureScoringCode("opportunity")
    """
    All-or-nothing scoring includes an individual in the numerator of the composite measure if they are in the numerators of all of the component measures in which they are in the denominator.
    """
    All_or_nothing = CompositeMeasureScoringCode("all-or-nothing")
    """
    Linear scoring gives an individual a score based on the number of numerators in which they appear.
    """
    Linear = CompositeMeasureScoringCode("linear")
    """
    Weighted scoring gives an individual a score based on a weighted factor for each component numerator in which they appear.
    """
    Weighted = CompositeMeasureScoringCode("weighted")
