from __future__ import annotations

from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AcknowledgementCondition(GenericTypeCode):
    """
    v3.AcknowledgementCondition
    From: http://terminology.hl7.org/ValueSet/v3-AcknowledgementCondition in v3-codesystems.xml
         The codes identify the conditions under which accept acknowledgements are
    required to be returned in response to this message. Note that accept
    acknowledgement address two different issues at the same time: reliable
    transport as well as syntactical correctness
    """

    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition
    """
    codeset: FhirUri = (
        "http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition"
    )


class AcknowledgementConditionValues:
    """
    Always send an acknowledgement.
    From: http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition in v3-codesystems.xml
    """

    Always = AcknowledgementCondition("AL")
    """
    Send an acknowledgement for error/reject conditions only.
    From: http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition in v3-codesystems.xml
    """
    Error_rejectOnly = AcknowledgementCondition("ER")
    """
    Never send an acknowledgement.
    From: http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition in v3-codesystems.xml
    """
    Never = AcknowledgementCondition("NE")
    """
    Send an acknowledgement for successful completions only.
    From: http://terminology.hl7.org/CodeSystem/v3-AcknowledgementCondition in v3-codesystems.xml
    """
    SuccessfulOnly = AcknowledgementCondition("SU")
