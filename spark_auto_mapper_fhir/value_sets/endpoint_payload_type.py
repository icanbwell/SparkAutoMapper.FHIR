from __future__ import annotations

from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EndpointPayloadTypeCode(GenericTypeCode):
    """
    EndpointPayloadType
    From: http://terminology.hl7.org/CodeSystem/endpoint-payload-type in valuesets.xml
        This is an example value set defined by the FHIR project, that could be used
    to represent possible payload document types.
    """

    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://terminology.hl7.org/CodeSystem/endpoint-payload-type
    """
    codeset: FhirUri = "http://terminology.hl7.org/CodeSystem/endpoint-payload-type"


class EndpointPayloadTypeCodeValues:
    """
    Any payload type can be used with this endpoint, it is either a payload
    agnostic infrastructure (such as a storage repository), or some other type of
    endpoint where payload considerations are internally handled, and not
    available
    From: http://terminology.hl7.org/CodeSystem/endpoint-payload-type in valuesets.xml
    """

    Any = EndpointPayloadTypeCode("any")
    """
    This endpoint does not require any content to be sent; simply connecting to
    the endpoint is enough notification. This can be used as a 'ping' to wakeup a
    service to retrieve content, which could be to ensure security considerations
    are correctly handled
    From: http://terminology.hl7.org/CodeSystem/endpoint-payload-type in valuesets.xml
    """
    None_ = EndpointPayloadTypeCode("none")
