from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SecurityControlObservationValue(GenericTypeCode):
    """
    v3.SecurityControlObservationValue
    From: http://terminology.hl7.org/ValueSet/v3-SecurityControlObservationValue in v3-codesystems.xml
         Security observation values used to indicate security control metadata.
    V:SecurityControl is the union of V:SecurityPolicy,V:ObligationPolicy,
    V:RefrainPolicy, V:PurposeOfUse, and V:GeneralPurpose of Use used to populate
    the SecurityControlObservationValue attribute in order to convey one or more
    nonhierarchical security control metadata dictating handling caveats, purpose
    of use, dissemination controls and other refrain policies, and obligations to
    which a custodian or receiver is required to comply.
    """
    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://terminology.hl7.org/ValueSet/v3-SecurityControlObservationValue
    """
    codeset: FhirUri = "http://terminology.hl7.org/ValueSet/v3-SecurityControlObservationValue"


