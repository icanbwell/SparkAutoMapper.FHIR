from __future__ import annotations

from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode
from spark_auto_mapper.type_definitions.defined_types import AutoMapperTextInputType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstitutionCondition(GenericTypeCode):
    """
    v3.SubstitutionCondition
    From: http://terminology.hl7.org/ValueSet/v3-SubstitutionCondition in v3-codesystems.xml
         Identifies what sort of change is permitted or has occurred between the item
    that was ordered/requested and the one that was/will be provided.
    """

    def __init__(self, value: AutoMapperTextInputType):
        super().__init__(value=value)

    """
    http://terminology.hl7.org/CodeSystem/v3-SubstitutionCondition
    """
    codeset: FhirUri = "http://terminology.hl7.org/CodeSystem/v3-SubstitutionCondition"


class SubstitutionConditionValues:
    """
    Some conditions may be attached to an allowable substitution.  An allowable
    substitution is based on a match to any other attributes that may be
    specified.
    From: http://terminology.hl7.org/CodeSystem/v3-SubstitutionCondition in v3-codesystems.xml
    """

    Conditional = SubstitutionCondition("_Conditional")
    """
    Substitution is not permitted.
    From: http://terminology.hl7.org/CodeSystem/v3-SubstitutionCondition in v3-codesystems.xml
    """
    NoSubstitution = SubstitutionCondition("NOSUB")
    """
    No conditions are required.
    From: http://terminology.hl7.org/CodeSystem/v3-SubstitutionCondition in v3-codesystems.xml
    """
    Unconditional = SubstitutionCondition("UNCOND")
