from typing import Union, List, Optional
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.resources.fhir_resource_base import FhirResourceBase


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class {{fhir_entity.name}}(FhirResourceBase):
    """
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item }}
    {%  endfor %}
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
    {% for property in fhir_entity.properties %}
        {{ property.name }}: {% if property.optional %}Optional[{% endif %}{% if property.is_list %}FhirList[{% endif %}{{ property.type_ }}{% if property.is_list %}]{% endif %}{% if property.optional %}] = None,{% else %},{% endif %}

    {% endfor %}
    ) -> None:
        """
    {% for documentation_item in fhir_entity.documentation %}
        {{ documentation_item }}
    {%  endfor %}
        """
        super().__init__(
            resourceType="Patient",
        {% for property in fhir_entity.properties %}
            {{ property.name }}={{ property.name }},
        {% endfor %}
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return {{ fhir_entity.name }}Schema.get_schema(include_extension=include_extension)

