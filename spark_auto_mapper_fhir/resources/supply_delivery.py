from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.supplydelivery import SupplyDeliverySchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # basedOn (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.supply_request import SupplyRequest

    # partOf (Reference)
    # Imports for References for partOf
    from spark_auto_mapper_fhir.resources.contract import Contract

    # status (SupplyDeliveryStatus)
    from spark_auto_mapper_fhir.value_sets.supply_delivery_status import (
        SupplyDeliveryStatusCode,
    )

    # patient (Reference)
    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.supply_item_type import SupplyItemTypeCode

    # End Import for CodeableConcept for type_
    # suppliedItem (SupplyDelivery.SuppliedItem)
    from spark_auto_mapper_fhir.backbone_elements.supply_delivery_supplied_item import (
        SupplyDeliverySuppliedItem,
    )

    # supplier (Reference)
    # Imports for References for supplier
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # destination (Reference)
    # Imports for References for destination
    from spark_auto_mapper_fhir.resources.location import Location

    # receiver (Reference)
    # Imports for References for receiver
    # occurrenceDateTime (dateTime)
    # occurrencePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # occurrenceTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SupplyDelivery(FhirResourceBase):
    """
    SupplyDelivery
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        basedOn: Optional[FhirList[Reference[Union[SupplyRequest]]]] = None,
        partOf: Optional[FhirList[Reference[Union[SupplyDelivery, Contract]]]] = None,
        status: Optional[SupplyDeliveryStatusCode] = None,
        patient: Optional[Reference[Union[Patient]]] = None,
        type_: Optional[CodeableConcept[SupplyItemTypeCode]] = None,
        suppliedItem: Optional[SupplyDeliverySuppliedItem] = None,
        supplier: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        destination: Optional[Reference[Union[Location]]] = None,
        receiver: Optional[
            FhirList[Reference[Union[Practitioner, PractitionerRole]]]
        ] = None,
        occurrenceDateTime: Optional[FhirDateTime] = None,
        occurrencePeriod: Optional[Period] = None,
        occurrenceTiming: Optional[Timing] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Identifier for the supply delivery event that is used to identify it across
        multiple disparate systems.
            :param basedOn: A plan, proposal or order that is fulfilled in whole or in part by this event.
            :param partOf: A larger event of which this particular event is a component or step.
            :param status: A code specifying the state of the dispense event.
            :param patient: A link to a resource representing the person whom the delivered item is for.
            :param type_: Indicates the type of dispensing event that is performed. Examples include:
        Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
            :param suppliedItem: The item that is being delivered or has been supplied.
            :param supplier: The individual responsible for dispensing the medication, supplier or device.
            :param destination: Identification of the facility/location where the Supply was shipped to, as
        part of the dispense event.
            :param receiver: Identifies the person who picked up the Supply.
            :param occurrenceDateTime: None
            :param occurrencePeriod: None
            :param occurrenceTiming: None
        """
        super().__init__(
            resourceType="SupplyDelivery",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            basedOn=basedOn,
            partOf=partOf,
            status=status,
            patient=patient,
            type_=type_,
            suppliedItem=suppliedItem,
            supplier=supplier,
            destination=destination,
            receiver=receiver,
            occurrenceDateTime=occurrenceDateTime,
            occurrencePeriod=occurrencePeriod,
            occurrenceTiming=occurrenceTiming,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SupplyDeliverySchema.get_schema(include_extension=include_extension)
