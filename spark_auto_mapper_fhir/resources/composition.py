from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.composition import CompositionSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (CompositionStatus)
    from spark_auto_mapper_fhir.value_sets.composition_status import (
        CompositionStatusCode,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.fhir_document_type_codes import (
        FHIRDocumentTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # category (CodeableConcept)
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.document_class_value_set import (
        DocumentClassValueSetCode,
    )

    # End Import for CodeableConcept for category
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.resource import Resource

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # date (dateTime)
    # author (Reference)
    # Imports for References for author
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.organization import Organization

    # title (string)
    # confidentiality (ConfidentialityClassification)
    from spark_auto_mapper_fhir.value_sets.confidentiality_classification import (
        ConfidentialityClassification,
    )

    # attester (Composition.Attester)
    from spark_auto_mapper_fhir.backbone_elements.composition_attester import (
        CompositionAttester,
    )

    # custodian (Reference)
    # Imports for References for custodian
    # relatesTo (Composition.RelatesTo)
    from spark_auto_mapper_fhir.backbone_elements.composition_relates_to import (
        CompositionRelatesTo,
    )

    # event (Composition.Event)
    from spark_auto_mapper_fhir.backbone_elements.composition_event import (
        CompositionEvent,
    )

    # section (Composition.Section)
    from spark_auto_mapper_fhir.backbone_elements.composition_section import (
        CompositionSection,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Composition(FhirResourceBase):
    """
    Composition
    composition.xsd
        A set of healthcare-related information that is assembled together into a
    single logical package that provides a single coherent statement of meaning,
    establishes its own context and that has clinical attestation with regard to
    who is making the statement. A Composition defines the structure and narrative
    content necessary for a document. However, a Composition alone does not
    constitute a document. Rather, the Composition must be the first entry in a
    Bundle where Bundle.type=document, and any other resources referenced from
    Composition must be included as subsequent entries in the Bundle (for example
    Patient, Practitioner, Encounter, etc.).
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        status: CompositionStatusCode,
        type_: CodeableConcept[FHIRDocumentTypeCodesCode],
        category: Optional[FhirList[CodeableConcept[DocumentClassValueSetCode]]] = None,
        subject: Optional[Reference[Resource]] = None,
        encounter: Optional[Reference[Encounter]] = None,
        date: FhirDateTime,
        author: FhirList[
            Reference[
                Union[
                    Practitioner,
                    PractitionerRole,
                    Device,
                    Patient,
                    RelatedPerson,
                    Organization,
                ]
            ]
        ],
        title: FhirString,
        confidentiality: Optional[ConfidentialityClassification] = None,
        attester: Optional[FhirList[CompositionAttester]] = None,
        custodian: Optional[Reference[Organization]] = None,
        relatesTo: Optional[FhirList[CompositionRelatesTo]] = None,
        event: Optional[FhirList[CompositionEvent]] = None,
        section: Optional[FhirList[CompositionSection]] = None,
    ) -> None:
        """
            A set of healthcare-related information that is assembled together into a
        single logical package that provides a single coherent statement of meaning,
        establishes its own context and that has clinical attestation with regard to
        who is making the statement. A Composition defines the structure and narrative
        content necessary for a document. However, a Composition alone does not
        constitute a document. Rather, the Composition must be the first entry in a
        Bundle where Bundle.type=document, and any other resources referenced from
        Composition must be included as subsequent entries in the Bundle (for example
        Patient, Practitioner, Encounter, etc.).
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: A version-independent identifier for the Composition. This identifier stays
        constant as the composition is changed over time.
            :param status: The workflow/clinical status of this composition. The status is a marker for
        the clinical standing of the document.
            :param type_: Specifies the particular kind of composition (e.g. History and Physical,
        Discharge Summary, Progress Note). This usually equates to the purpose of
        making the composition.
            :param category: A categorization for the type of the composition - helps for indexing and
        searching. This may be implied by or derived from the code specified in the
        Composition Type.
            :param subject: Who or what the composition is about. The composition can be about a person,
        (patient or healthcare practitioner), a device (e.g. a machine) or even a
        group of subjects (such as a document about a herd of livestock, or a set of
        patients that share a common exposure).
            :param encounter: Describes the clinical encounter or type of care this documentation is
        associated with.
            :param date: The composition editing time, when the composition was last logically changed
        by the author.
            :param author: Identifies who is responsible for the information in the composition, not
        necessarily who typed it in.
            :param title: Official human-readable label for the composition.
            :param confidentiality: The code specifying the level of confidentiality of the Composition.
            :param attester: A participant who has attested to the accuracy of the composition/document.
            :param custodian: Identifies the organization or group who is responsible for ongoing
        maintenance of and access to the composition/document information.
            :param relatesTo: Relationships that this composition has with other compositions or documents
        that already exist.
            :param event: The clinical service, such as a colonoscopy or an appendectomy, being
        documented.
            :param section: The root of the sections that make up the composition.
        """
        super().__init__(
            resourceType="Composition",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            status=status,
            type_=type_,
            category=category,
            subject=subject,
            encounter=encounter,
            date=date,
            author=author,
            title=title,
            confidentiality=confidentiality,
            attester=attester,
            custodian=custodian,
            relatesTo=relatesTo,
            event=event,
            section=section,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return CompositionSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
