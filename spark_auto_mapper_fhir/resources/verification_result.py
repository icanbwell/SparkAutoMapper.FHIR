from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.verificationresult import VerificationResultSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # target (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for target
    from spark_auto_mapper_fhir.resources.resource import Resource

    # targetLocation (string)
    # need (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for need
    from spark_auto_mapper_fhir.value_sets.need import NeedCode

    # End Import for CodeableConcept for need
    # status (status)
    from spark_auto_mapper_fhir.value_sets.status import StatusCode

    # statusDate (dateTime)
    # validationType (CodeableConcept)
    # Import for CodeableConcept for validationType
    from spark_auto_mapper_fhir.value_sets.validation_type import Validation_typeCode

    # End Import for CodeableConcept for validationType
    # validationProcess (CodeableConcept)
    # Import for CodeableConcept for validationProcess
    from spark_auto_mapper_fhir.value_sets.validation_process import (
        Validation_processCode,
    )

    # End Import for CodeableConcept for validationProcess
    # frequency (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # lastPerformed (dateTime)
    # nextScheduled (date)
    # failureAction (CodeableConcept)
    # Import for CodeableConcept for failureAction
    from spark_auto_mapper_fhir.value_sets.failure_action import Failure_actionCode

    # End Import for CodeableConcept for failureAction
    # primarySource (VerificationResult.PrimarySource)
    from spark_auto_mapper_fhir.backbone_elements.verification_result_primary_source import (
        VerificationResultPrimarySource,
    )

    # attestation (VerificationResult.Attestation)
    from spark_auto_mapper_fhir.backbone_elements.verification_result_attestation import (
        VerificationResultAttestation,
    )

    # validator (VerificationResult.Validator)
    from spark_auto_mapper_fhir.backbone_elements.verification_result_validator import (
        VerificationResultValidator,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResult(FhirResourceBase):
    """
    VerificationResult
    verificationresult.xsd
        Describes validation requirements, source(s), status and dates for one or more
    elements.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        target: Optional[FhirList[Reference[Resource]]] = None,
        targetLocation: Optional[FhirList[FhirString]] = None,
        need: Optional[CodeableConcept[NeedCode]] = None,
        status: StatusCode,
        statusDate: Optional[FhirDateTime] = None,
        validationType: Optional[CodeableConcept[Validation_typeCode]] = None,
        validationProcess: Optional[
            FhirList[CodeableConcept[Validation_processCode]]
        ] = None,
        frequency: Optional[Timing] = None,
        lastPerformed: Optional[FhirDateTime] = None,
        nextScheduled: Optional[FhirDate] = None,
        failureAction: Optional[CodeableConcept[Failure_actionCode]] = None,
        primarySource: Optional[FhirList[VerificationResultPrimarySource]] = None,
        attestation: Optional[VerificationResultAttestation] = None,
        validator: Optional[FhirList[VerificationResultValidator]] = None,
    ) -> None:
        """
            Describes validation requirements, source(s), status and dates for one or more
        elements.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param target: A resource that was validated.
            :param targetLocation: The fhirpath location(s) within the resource that was validated.
            :param need: The frequency with which the target must be validated (none; initial;
        periodic).
            :param status: The validation status of the target (attested; validated; in process; requires
        revalidation; validation failed; revalidation failed).
            :param statusDate: When the validation status was updated.
            :param validationType: What the target is validated against (nothing; primary source; multiple
        sources).
            :param validationProcess: The primary process by which the target is validated (edit check; value set;
        primary source; multiple sources; standalone; in context).
            :param frequency: Frequency of revalidation.
            :param lastPerformed: The date/time validation was last completed (including failed validations).
            :param nextScheduled: The date when target is next validated, if appropriate.
            :param failureAction: The result if validation fails (fatal; warning; record only; none).
            :param primarySource: Information about the primary source(s) involved in validation.
            :param attestation: Information about the entity attesting to information.
            :param validator: Information about the entity validating information.
        """
        super().__init__(
            resourceType="VerificationResult",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            target=target,
            targetLocation=targetLocation,
            need=need,
            status=status,
            statusDate=statusDate,
            validationType=validationType,
            validationProcess=validationProcess,
            frequency=frequency,
            lastPerformed=lastPerformed,
            nextScheduled=nextScheduled,
            failureAction=failureAction,
            primarySource=primarySource,
            attestation=attestation,
            validator=validator,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return VerificationResultSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
