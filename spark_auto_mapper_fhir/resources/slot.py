from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.slot import SlotSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # serviceCategory (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for serviceCategory
    from spark_auto_mapper_fhir.value_sets.service_category import ServiceCategoryCode

    # End Import for CodeableConcept for serviceCategory
    # serviceType (CodeableConcept)
    # Import for CodeableConcept for serviceType
    from spark_auto_mapper_fhir.value_sets.service_type import ServiceTypeCode

    # End Import for CodeableConcept for serviceType
    # specialty (CodeableConcept)
    # Import for CodeableConcept for specialty
    from spark_auto_mapper_fhir.value_sets.practice_setting_code_value_set import (
        PracticeSettingCodeValueSetCode,
    )

    # End Import for CodeableConcept for specialty
    # appointmentType (CodeableConcept)
    # Import for CodeableConcept for appointmentType
    from spark_auto_mapper_fhir.value_sets.v2_0276 import V2_0276

    # End Import for CodeableConcept for appointmentType
    # schedule (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for schedule
    from spark_auto_mapper_fhir.resources.schedule import Schedule

    # status (SlotStatus)
    from spark_auto_mapper_fhir.value_sets.slot_status import SlotStatusCode

    # start (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # end (instant)
    # overbooked (boolean)
    # comment (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Slot(FhirResourceBase):
    """
    Slot
        A slot of time on a schedule that may be available for booking appointments.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        serviceCategory: Optional[
            FhirList[CodeableConcept[ServiceCategoryCode]]
        ] = None,
        serviceType: Optional[FhirList[CodeableConcept[ServiceTypeCode]]] = None,
        specialty: Optional[
            FhirList[CodeableConcept[PracticeSettingCodeValueSetCode]]
        ] = None,
        appointmentType: Optional[CodeableConcept[V2_0276]] = None,
        schedule: Reference[Union[Schedule]],
        status: SlotStatusCode,
        start: FhirInstant,
        end: FhirInstant,
        overbooked: Optional[FhirBoolean] = None,
        comment: Optional[FhirString] = None,
    ) -> None:
        """
            A slot of time on a schedule that may be available for booking appointments.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: External Ids for this item.
            :param serviceCategory: A broad categorization of the service that is to be performed during this
        appointment.
            :param serviceType: The type of appointments that can be booked into this slot (ideally this would
        be an identifiable service - which is at a location, rather than the location
        itself). If provided then this overrides the value provided on the
        availability resource.
            :param specialty: The specialty of a practitioner that would be required to perform the service
        requested in this appointment.
            :param appointmentType: The style of appointment or patient that may be booked in the slot (not
        service type).
            :param schedule: The schedule resource that this slot defines an interval of status
        information.
            :param status: busy | free | busy-unavailable | busy-tentative | entered-in-error.
            :param start: Date/Time that the slot is to begin.
            :param end: Date/Time that the slot is to conclude.
            :param overbooked: This slot has already been overbooked, appointments are unlikely to be
        accepted for this time.
            :param comment: Comments on the slot to describe any extended information. Such as custom
        constraints on the slot.
        """
        super().__init__(
            resourceType="Slot",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            serviceCategory=serviceCategory,
            serviceType=serviceType,
            specialty=specialty,
            appointmentType=appointmentType,
            schedule=schedule,
            status=status,
            start=start,
            end=end,
            overbooked=overbooked,
            comment=comment,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SlotSchema.get_schema(include_extension=include_extension)
