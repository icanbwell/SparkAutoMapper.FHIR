from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substancespecification import (
    SubstanceSpecificationSchema,
)

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # status (CodeableConcept)
    # Import for CodeableConcept for status
    # End Import for CodeableConcept for status
    # domain (CodeableConcept)
    # Import for CodeableConcept for domain
    # End Import for CodeableConcept for domain
    # description (string)
    # source (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for source
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # comment (string)
    # moiety (SubstanceSpecification.Moiety)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_moiety import (
        SubstanceSpecificationMoiety,
    )

    # property (SubstanceSpecification.Property)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_property import (
        SubstanceSpecificationProperty,
    )

    # referenceInformation (Reference)
    # Imports for References for referenceInformation
    from spark_auto_mapper_fhir.resources.substance_reference_information import (
        SubstanceReferenceInformation,
    )

    # structure (SubstanceSpecification.Structure)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_structure import (
        SubstanceSpecificationStructure,
    )

    # code (SubstanceSpecification.Code)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_code import (
        SubstanceSpecificationCode,
    )

    # name (SubstanceSpecification.Name)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_name import (
        SubstanceSpecificationName,
    )

    # molecularWeight (SubstanceSpecification.MolecularWeight)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_molecular_weight import (
        SubstanceSpecificationMolecularWeight,
    )

    # relationship (SubstanceSpecification.Relationship)
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_relationship import (
        SubstanceSpecificationRelationship,
    )

    # nucleicAcid (Reference)
    # Imports for References for nucleicAcid
    from spark_auto_mapper_fhir.resources.substance_nucleic_acid import (
        SubstanceNucleicAcid,
    )

    # polymer (Reference)
    # Imports for References for polymer
    from spark_auto_mapper_fhir.resources.substance_polymer import SubstancePolymer

    # protein (Reference)
    # Imports for References for protein
    from spark_auto_mapper_fhir.resources.substance_protein import SubstanceProtein

    # sourceMaterial (Reference)
    # Imports for References for sourceMaterial
    from spark_auto_mapper_fhir.resources.substance_source_material import (
        SubstanceSourceMaterial,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecification(FhirResourceBase):
    """
    SubstanceSpecification
    substancespecification.xsd
        The detailed description of a substance, typically at a level beyond what is
    used for prescribing.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        status: Optional[CodeableConcept[GenericTypeCode]] = None,
        domain: Optional[CodeableConcept[GenericTypeCode]] = None,
        description: Optional[FhirString] = None,
        source: Optional[FhirList[Reference[DocumentReference]]] = None,
        comment: Optional[FhirString] = None,
        moiety: Optional[FhirList[SubstanceSpecificationMoiety]] = None,
        property: Optional[FhirList[SubstanceSpecificationProperty]] = None,
        referenceInformation: Optional[Reference[SubstanceReferenceInformation]] = None,
        structure: Optional[SubstanceSpecificationStructure] = None,
        code: Optional[FhirList[SubstanceSpecificationCode]] = None,
        name: Optional[FhirList[SubstanceSpecificationName]] = None,
        molecularWeight: Optional[
            FhirList[SubstanceSpecificationMolecularWeight]
        ] = None,
        relationship: Optional[FhirList[SubstanceSpecificationRelationship]] = None,
        nucleicAcid: Optional[Reference[SubstanceNucleicAcid]] = None,
        polymer: Optional[Reference[SubstancePolymer]] = None,
        protein: Optional[Reference[SubstanceProtein]] = None,
        sourceMaterial: Optional[Reference[SubstanceSourceMaterial]] = None,
    ) -> None:
        """
            The detailed description of a substance, typically at a level beyond what is
        used for prescribing.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Identifier by which this substance is known.
            :param type_: High level categorization, e.g. polymer or nucleic acid.
            :param status: Status of substance within the catalogue e.g. approved.
            :param domain: If the substance applies to only human or veterinary use.
            :param description: Textual description of the substance.
            :param source: Supporting literature.
            :param comment: Textual comment about this record of a substance.
            :param moiety: Moiety, for structural modifications.
            :param property: General specifications for this substance, including how it is related to
        other substances.
            :param referenceInformation: General information detailing this substance.
            :param structure: Structural information.
            :param code: Codes associated with the substance.
            :param name: Names applicable to this substance.
            :param molecularWeight: The molecular weight or weight range (for proteins, polymers or nucleic
        acids).
            :param relationship: A link between this substance and another, with details of the relationship.
            :param nucleicAcid: Data items specific to nucleic acids.
            :param polymer: Data items specific to polymers.
            :param protein: Data items specific to proteins.
            :param sourceMaterial: Material or taxonomic/anatomical source for the substance.
        """
        super().__init__(
            resourceType="SubstanceSpecification",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            type_=type_,
            status=status,
            domain=domain,
            description=description,
            source=source,
            comment=comment,
            moiety=moiety,
            property=property,
            referenceInformation=referenceInformation,
            structure=structure,
            code=code,
            name=name,
            molecularWeight=molecularWeight,
            relationship=relationship,
            nucleicAcid=nucleicAcid,
            polymer=polymer,
            protein=protein,
            sourceMaterial=sourceMaterial,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return SubstanceSpecificationSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
