from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.healthcareservice import HealthcareServiceSchema

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.boolean import FhirBoolean
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for providedBy
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.servicecategory import Servicecategory

    # End Import for CodeableConcept for category
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.servicetype import Servicetype

    # End Import for CodeableConcept for type
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.markdown import markdown
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for coverageArea
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for serviceProvisionCode
    from spark_auto_mapper_fhir.value_sets.serviceprovisionconditions import (
        Serviceprovisionconditions,
    )

    # End Import for CodeableConcept for serviceProvisionCode
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_eligibility import (
        HealthcareServiceEligibility,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for program
    from spark_auto_mapper_fhir.value_sets.program import Program

    # End Import for CodeableConcept for program
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for characteristic
    from spark_auto_mapper_fhir.value_sets.acmecholcodesblood import Acmecholcodesblood

    # End Import for CodeableConcept for characteristic
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for referralMethod
    from spark_auto_mapper_fhir.value_sets.referralmethod import Referralmethod

    # End Import for CodeableConcept for referralMethod
    from spark_auto_mapper_fhir.complex_types.boolean import FhirBoolean
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_available_time import (
        HealthcareServiceAvailableTime,
    )
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_not_available import (
        HealthcareServiceNotAvailable,
    )
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for endpoint
    from spark_auto_mapper_fhir.resources.endpoint import Endpoint


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class HealthcareService(FhirResourceBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        active: Optional[FhirBoolean] = None,
        providedBy: Optional[Reference[Union[Organization]]] = None,
        category: Optional[FhirList[CodeableConcept[Servicecategory]]] = None,
        type: Optional[FhirList[CodeableConcept[Servicetype]]] = None,
        specialty: Optional[FhirList[CodeableConcept]] = None,
        location: Optional[FhirList[Reference[Union[Location]]]] = None,
        name: Optional[FhirString] = None,
        comment: Optional[FhirString] = None,
        extraDetails: Optional[markdown] = None,
        photo: Optional[Attachment] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
        coverageArea: Optional[FhirList[Reference[Union[Location]]]] = None,
        serviceProvisionCode: Optional[
            FhirList[CodeableConcept[Serviceprovisionconditions]]
        ] = None,
        eligibility: Optional[FhirList[HealthcareServiceEligibility]] = None,
        program: Optional[FhirList[CodeableConcept[Program]]] = None,
        characteristic: Optional[FhirList[CodeableConcept[Acmecholcodesblood]]] = None,
        communication: Optional[FhirList[CodeableConcept]] = None,
        referralMethod: Optional[FhirList[CodeableConcept[Referralmethod]]] = None,
        appointmentRequired: Optional[FhirBoolean] = None,
        availableTime: Optional[FhirList[HealthcareServiceAvailableTime]] = None,
        notAvailable: Optional[FhirList[HealthcareServiceNotAvailable]] = None,
        availabilityExceptions: Optional[FhirString] = None,
        endpoint: Optional[FhirList[Reference[Union[Endpoint]]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: External identifiers for this item.
            :param active: This flag is used to mark the record to not be used. This is not used when a
        center is closed for maintenance, or for holidays, the notAvailable period is
        to be used for this.
            :param providedBy: The organization that provides this healthcare service.
            :param category: Identifies the broad category of service being performed or delivered.
            :param type: The specific type of service that may be delivered or performed.
            :param specialty: Collection of specialties handled by the service site. This is more of a
        medical term.
            :param location: The location(s) where this healthcare service may be provided.
            :param name: Further description of the service as it would be presented to a consumer
        while searching.
            :param comment: Any additional description of the service and/or any specific issues not
        covered by the other attributes, which can be displayed as further detail
        under the serviceName.
            :param extraDetails: Extra details about the service that can't be placed in the other fields.
            :param photo: If there is a photo/symbol associated with this HealthcareService, it may be
        included here to facilitate quick identification of the service in a list.
            :param telecom: List of contacts related to this specific healthcare service.
            :param coverageArea: The location(s) that this service is available to (not where the service is
        provided).
            :param serviceProvisionCode: The code(s) that detail the conditions under which the healthcare service is
        available/offered.
            :param eligibility: Does this service have specific eligibility requirements that need to be met
        in order to use the service?
            :param program: Programs that this service is applicable to.
            :param characteristic: Collection of characteristics (attributes).
            :param communication: Some services are specifically made available in multiple languages, this
        property permits a directory to declare the languages this is offered in.
        Typically this is only provided where a service operates in communities with
        mixed languages used.
            :param referralMethod: Ways that the service accepts referrals, if this is not provided then it is
        implied that no referral is required.
            :param appointmentRequired: Indicates whether or not a prospective consumer will require an appointment
        for a particular service at a site to be provided by the Organization.
        Indicates if an appointment is required for access to this service.
            :param availableTime: A collection of times that the Service Site is available.
            :param notAvailable: The HealthcareService is not available during this period of time due to the
        provided reason.
            :param availabilityExceptions: A description of site availability exceptions, e.g. public holiday
        availability. Succinctly describing all possible exceptions to normal site
        availability as details in the available Times and not available Times.
            :param endpoint: Technical endpoints providing access to services operated for the specific
        healthcare services defined at this resource.
        """
        super().__init__(
            resourceType="HealthcareService",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            active=active,
            providedBy=providedBy,
            category=category,
            type=type,
            specialty=specialty,
            location=location,
            name=name,
            comment=comment,
            extraDetails=extraDetails,
            photo=photo,
            telecom=telecom,
            coverageArea=coverageArea,
            serviceProvisionCode=serviceProvisionCode,
            eligibility=eligibility,
            program=program,
            characteristic=characteristic,
            communication=communication,
            referralMethod=referralMethod,
            appointmentRequired=appointmentRequired,
            availableTime=availableTime,
            notAvailable=notAvailable,
            availabilityExceptions=availabilityExceptions,
            endpoint=endpoint,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return HealthcareServiceSchema.get_schema(include_extension=include_extension)
