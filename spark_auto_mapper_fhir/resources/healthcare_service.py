from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.healthcareservice import HealthcareServiceSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # active (boolean)
    # providedBy (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for providedBy
    from spark_auto_mapper_fhir.resources.organization import Organization

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.service_category import ServiceCategoryCode

    # End Import for CodeableConcept for category
    # type_ (CodeableConcept)
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.service_type import ServiceTypeCode

    # End Import for CodeableConcept for type_
    # specialty (CodeableConcept)
    # Import for CodeableConcept for specialty
    from spark_auto_mapper_fhir.value_sets.practice_setting_code_value_set import (
        PracticeSettingCodeValueSetCode,
    )

    # End Import for CodeableConcept for specialty
    # location (Reference)
    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location

    # name (string)
    # comment (string)
    # extraDetails (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # photo (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # coverageArea (Reference)
    # Imports for References for coverageArea
    # serviceProvisionCode (CodeableConcept)
    # Import for CodeableConcept for serviceProvisionCode
    from spark_auto_mapper_fhir.value_sets.service_provision_conditions import (
        ServiceProvisionConditionsCode,
    )

    # End Import for CodeableConcept for serviceProvisionCode
    # eligibility (HealthcareService.Eligibility)
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_eligibility import (
        HealthcareServiceEligibility,
    )

    # program (CodeableConcept)
    # Import for CodeableConcept for program
    from spark_auto_mapper_fhir.value_sets.program import ProgramCode

    # End Import for CodeableConcept for program
    # characteristic (CodeableConcept)
    # Import for CodeableConcept for characteristic
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for characteristic
    # communication (CodeableConcept)
    # Import for CodeableConcept for communication
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # End Import for CodeableConcept for communication
    # referralMethod (CodeableConcept)
    # Import for CodeableConcept for referralMethod
    from spark_auto_mapper_fhir.value_sets.referral_method import ReferralMethodCode

    # End Import for CodeableConcept for referralMethod
    # appointmentRequired (boolean)
    # availableTime (HealthcareService.AvailableTime)
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_available_time import (
        HealthcareServiceAvailableTime,
    )

    # notAvailable (HealthcareService.NotAvailable)
    from spark_auto_mapper_fhir.backbone_elements.healthcare_service_not_available import (
        HealthcareServiceNotAvailable,
    )

    # availabilityExceptions (string)
    # endpoint (Reference)
    # Imports for References for endpoint
    from spark_auto_mapper_fhir.resources.endpoint import Endpoint


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class HealthcareService(FhirResourceBase):
    """
    HealthcareService
        The details of a healthcare service available at a location.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        active: Optional[FhirBoolean] = None,
        providedBy: Optional[Reference[Union[Organization]]] = None,
        category: Optional[FhirList[CodeableConcept[ServiceCategoryCode]]] = None,
        type_: Optional[FhirList[CodeableConcept[ServiceTypeCode]]] = None,
        specialty: Optional[
            FhirList[CodeableConcept[PracticeSettingCodeValueSetCode]]
        ] = None,
        location: Optional[FhirList[Reference[Union[Location]]]] = None,
        name: Optional[FhirString] = None,
        comment: Optional[FhirString] = None,
        extraDetails: Optional[FhirMarkdown] = None,
        photo: Optional[Attachment] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
        coverageArea: Optional[FhirList[Reference[Union[Location]]]] = None,
        serviceProvisionCode: Optional[
            FhirList[CodeableConcept[ServiceProvisionConditionsCode]]
        ] = None,
        eligibility: Optional[FhirList[HealthcareServiceEligibility]] = None,
        program: Optional[FhirList[CodeableConcept[ProgramCode]]] = None,
        characteristic: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        communication: Optional[FhirList[CodeableConcept[CommonLanguagesCode]]] = None,
        referralMethod: Optional[FhirList[CodeableConcept[ReferralMethodCode]]] = None,
        appointmentRequired: Optional[FhirBoolean] = None,
        availableTime: Optional[FhirList[HealthcareServiceAvailableTime]] = None,
        notAvailable: Optional[FhirList[HealthcareServiceNotAvailable]] = None,
        availabilityExceptions: Optional[FhirString] = None,
        endpoint: Optional[FhirList[Reference[Union[Endpoint]]]] = None,
    ) -> None:
        """
            The details of a healthcare service available at a location.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: External identifiers for this item.
            :param active: This flag is used to mark the record to not be used. This is not used when a
        center is closed for maintenance, or for holidays, the notAvailable period is
        to be used for this.
            :param providedBy: The organization that provides this healthcare service.
            :param category: Identifies the broad category of service being performed or delivered.
            :param type_: The specific type of service that may be delivered or performed.
            :param specialty: Collection of specialties handled by the service site. This is more of a
        medical term.
            :param location: The location(s) where this healthcare service may be provided.
            :param name: Further description of the service as it would be presented to a consumer
        while searching.
            :param comment: Any additional description of the service and/or any specific issues not
        covered by the other attributes, which can be displayed as further detail
        under the serviceName.
            :param extraDetails: Extra details about the service that can't be placed in the other fields.
            :param photo: If there is a photo/symbol associated with this HealthcareService, it may be
        included here to facilitate quick identification of the service in a list.
            :param telecom: List of contacts related to this specific healthcare service.
            :param coverageArea: The location(s) that this service is available to (not where the service is
        provided).
            :param serviceProvisionCode: The code(s) that detail the conditions under which the healthcare service is
        available/offered.
            :param eligibility: Does this service have specific eligibility requirements that need to be met
        in order to use the service?
            :param program: Programs that this service is applicable to.
            :param characteristic: Collection of characteristics (attributes).
            :param communication: Some services are specifically made available in multiple languages, this
        property permits a directory to declare the languages this is offered in.
        Typically this is only provided where a service operates in communities with
        mixed languages used.
            :param referralMethod: Ways that the service accepts referrals, if this is not provided then it is
        implied that no referral is required.
            :param appointmentRequired: Indicates whether or not a prospective consumer will require an appointment
        for a particular service at a site to be provided by the Organization.
        Indicates if an appointment is required for access to this service.
            :param availableTime: A collection of times that the Service Site is available.
            :param notAvailable: The HealthcareService is not available during this period of time due to the
        provided reason.
            :param availabilityExceptions: A description of site availability exceptions, e.g. public holiday
        availability. Succinctly describing all possible exceptions to normal site
        availability as details in the available Times and not available Times.
            :param endpoint: Technical endpoints providing access to services operated for the specific
        healthcare services defined at this resource.
        """
        super().__init__(
            resourceType="HealthcareService",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            active=active,
            providedBy=providedBy,
            category=category,
            type_=type_,
            specialty=specialty,
            location=location,
            name=name,
            comment=comment,
            extraDetails=extraDetails,
            photo=photo,
            telecom=telecom,
            coverageArea=coverageArea,
            serviceProvisionCode=serviceProvisionCode,
            eligibility=eligibility,
            program=program,
            characteristic=characteristic,
            communication=communication,
            referralMethod=referralMethod,
            appointmentRequired=appointmentRequired,
            availableTime=availableTime,
            notAvailable=notAvailable,
            availabilityExceptions=availabilityExceptions,
            endpoint=endpoint,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return HealthcareServiceSchema.get_schema(include_extension=include_extension)
