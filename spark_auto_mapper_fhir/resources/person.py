from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.person import PersonSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # name (HumanName)
    from spark_auto_mapper_fhir.complex_types.human_name import HumanName

    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # gender (AdministrativeGender)
    from spark_auto_mapper_fhir.value_sets.administrative_gender import (
        AdministrativeGenderCode,
    )

    # birthDate (date)
    # address (Address)
    from spark_auto_mapper_fhir.complex_types.address import Address

    # photo (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # managingOrganization (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for managingOrganization
    from spark_auto_mapper_fhir.resources.organization import Organization

    # active (boolean)
    # link (Person.Link)
    from spark_auto_mapper_fhir.backbone_elements.person_link import PersonLink


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Person(FhirResourceBase):
    """
    Person
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        name: Optional[FhirList[HumanName]] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
        gender: Optional[AdministrativeGenderCode] = None,
        birthDate: Optional[FhirDate] = None,
        address: Optional[FhirList[Address]] = None,
        photo: Optional[Attachment] = None,
        managingOrganization: Optional[Reference[Union[Organization]]] = None,
        active: Optional[FhirBoolean] = None,
        link: Optional[FhirList[PersonLink]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Identifier for a person within a particular scope.
            :param name: A name associated with the person.
            :param telecom: A contact detail for the person, e.g. a telephone number or an email address.
            :param gender: Administrative Gender.
            :param birthDate: The birth date for the person.
            :param address: One or more addresses for the person.
            :param photo: An image that can be displayed as a thumbnail of the person to enhance the
        identification of the individual.
            :param managingOrganization: The organization that is the custodian of the person record.
            :param active: Whether this person's record is in active use.
            :param link: Link to a resource that concerns the same actual person.
        """
        super().__init__(
            resourceType="Person",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            name=name,
            telecom=telecom,
            gender=gender,
            birthDate=birthDate,
            address=address,
            photo=photo,
            managingOrganization=managingOrganization,
            active=active,
            link=link,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return PersonSchema.get_schema(include_extension=include_extension)
