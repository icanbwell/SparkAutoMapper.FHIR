from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.operationdefinition import (
    OperationDefinitionSchema,
)

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # url (uri)
    # version (string)
    # name (string)
    # title (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # kind (OperationKind)
    from spark_auto_mapper_fhir.value_sets.operation_kind import OperationKindCode

    # experimental (boolean)
    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # jurisdiction (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.jurisdiction_value_set import (
        JurisdictionValueSetCode,
    )

    # End Import for CodeableConcept for jurisdiction
    # purpose (markdown)
    # affectsState (boolean)
    # code (generic_type)
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # comment (markdown)
    # base (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # resource (ResourceType)
    from spark_auto_mapper_fhir.value_sets.resource_type import ResourceTypeCode

    # system (boolean)
    # type_ (boolean)
    # instance (boolean)
    # inputProfile (canonical)
    # outputProfile (canonical)
    # parameter (OperationDefinition.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.operation_definition_parameter import (
        OperationDefinitionParameter,
    )

    # overload (OperationDefinition.Overload)
    from spark_auto_mapper_fhir.backbone_elements.operation_definition_overload import (
        OperationDefinitionOverload,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationDefinition(FhirResourceBase):
    """
    OperationDefinition
    operationdefinition.xsd
        A formal computable definition of an operation (on the RESTful interface) or a
    named query (using the search interaction).
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        url: Optional[FhirUri] = None,
        version: Optional[FhirString] = None,
        name: FhirString,
        title: Optional[FhirString] = None,
        status: PublicationStatusCode,
        kind: OperationKindCode,
        experimental: Optional[FhirBoolean] = None,
        date: Optional[FhirDateTime] = None,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        jurisdiction: Optional[
            FhirList[CodeableConcept[JurisdictionValueSetCode]]
        ] = None,
        purpose: Optional[FhirMarkdown] = None,
        affectsState: Optional[FhirBoolean] = None,
        code: GenericTypeCode,
        comment: Optional[FhirMarkdown] = None,
        base: Optional[FhirCanonical] = None,
        resource: Optional[FhirList[ResourceTypeCode]] = None,
        system: FhirBoolean,
        type_: FhirBoolean,
        instance: FhirBoolean,
        inputProfile: Optional[FhirCanonical] = None,
        outputProfile: Optional[FhirCanonical] = None,
        parameter: Optional[FhirList[OperationDefinitionParameter]] = None,
        overload: Optional[FhirList[OperationDefinitionOverload]] = None,
    ) -> None:
        """
            A formal computable definition of an operation (on the RESTful interface) or a
        named query (using the search interaction).
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param url: An absolute URI that is used to identify this operation definition when it is
        referenced in a specification, model, design or an instance; also called its
        canonical identifier. This SHOULD be globally unique and SHOULD be a literal
        address at which at which an authoritative instance of this operation
        definition is (or will be) published. This URL can be the target of a
        canonical reference. It SHALL remain the same when the operation definition is
        stored on different servers.
            :param version: The identifier that is used to identify this version of the operation
        definition when it is referenced in a specification, model, design or
        instance. This is an arbitrary value managed by the operation definition
        author and is not expected to be globally unique. For example, it might be a
        timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
        no expectation that versions can be placed in a lexicographical sequence.
            :param name: A natural language name identifying the operation definition. This name should
        be usable as an identifier for the module by machine processing applications
        such as code generation.
            :param title: A short, descriptive, user-friendly title for the operation definition.
            :param status: The status of this operation definition. Enables tracking the life-cycle of
        the content.
            :param kind: Whether this is an operation or a named query.
            :param experimental: A Boolean value to indicate that this operation definition is authored for
        testing purposes (or education/evaluation/marketing) and is not intended to be
        used for genuine usage.
            :param date: The date  (and optionally time) when the operation definition was published.
        The date must change when the business version changes and it must change if
        the status code changes. In addition, it should change when the substantive
        content of the operation definition changes.
            :param publisher: The name of the organization or individual that published the operation
        definition.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param description: A free text natural language description of the operation definition from a
        consumer's perspective.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate operation
        definition instances.
            :param jurisdiction: A legal or geographic region in which the operation definition is intended to
        be used.
            :param purpose: Explanation of why this operation definition is needed and why it has been
        designed as it has.
            :param affectsState: Whether the operation affects state. Side effects such as producing audit
        trail entries do not count as 'affecting  state'.
            :param code: The name used to invoke the operation.
            :param comment: Additional information about how to use this operation or named query.
            :param base: Indicates that this operation definition is a constraining profile on the
        base.
            :param resource: The types on which this operation can be executed.
            :param system: Indicates whether this operation or named query can be invoked at the system
        level (e.g. without needing to choose a resource type for the context).
            :param type_: Indicates whether this operation or named query can be invoked at the resource
        type level for any given resource type level (e.g. without needing to choose a
        specific resource id for the context).
            :param instance: Indicates whether this operation can be invoked on a particular instance of
        one of the given types.
            :param inputProfile: Additional validation information for the in parameters - a single profile
        that covers all the parameters. The profile is a constraint on the parameters
        resource as a whole.
            :param outputProfile: Additional validation information for the out parameters - a single profile
        that covers all the parameters. The profile is a constraint on the parameters
        resource.
            :param parameter: The parameters for the operation/query.
            :param overload: Defines an appropriate combination of parameters to use when invoking this
        operation, to help code generators when generating overloaded parameter sets
        for this operation.
        """
        super().__init__(
            resourceType="OperationDefinition",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            url=url,
            version=version,
            name=name,
            title=title,
            status=status,
            kind=kind,
            experimental=experimental,
            date=date,
            publisher=publisher,
            contact=contact,
            description=description,
            useContext=useContext,
            jurisdiction=jurisdiction,
            purpose=purpose,
            affectsState=affectsState,
            code=code,
            comment=comment,
            base=base,
            resource=resource,
            system=system,
            type_=type_,
            instance=instance,
            inputProfile=inputProfile,
            outputProfile=outputProfile,
            parameter=parameter,
            overload=overload,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return OperationDefinitionSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
