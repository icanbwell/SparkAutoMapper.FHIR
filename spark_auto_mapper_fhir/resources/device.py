from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.device import DeviceSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # definition (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for definition
    from spark_auto_mapper_fhir.resources.device_definition import DeviceDefinition

    # udiCarrier (Device.UdiCarrier)
    from spark_auto_mapper_fhir.backbone_elements.device_udi_carrier import (
        DeviceUdiCarrier,
    )

    # status (FHIRDeviceStatus)
    from spark_auto_mapper_fhir.value_sets.fhir_device_status import (
        FHIRDeviceStatusCode,
    )

    # statusReason (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for statusReason
    from spark_auto_mapper_fhir.value_sets.fhir_device_status_reason import (
        FHIRDeviceStatusReasonCode,
    )

    # End Import for CodeableConcept for statusReason
    # distinctIdentifier (string)
    # manufacturer (string)
    # manufactureDate (dateTime)
    # expirationDate (dateTime)
    # lotNumber (string)
    # serialNumber (string)
    # deviceName (Device.DeviceName)
    from spark_auto_mapper_fhir.backbone_elements.device_device_name import (
        DeviceDeviceName,
    )

    # modelNumber (string)
    # partNumber (string)
    # type_ (CodeableConcept)
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.device_type import DeviceTypeCode

    # End Import for CodeableConcept for type_
    # specialization (Device.Specialization)
    from spark_auto_mapper_fhir.backbone_elements.device_specialization import (
        DeviceSpecialization,
    )

    # version (Device.Version)
    from spark_auto_mapper_fhir.backbone_elements.device_version import DeviceVersion

    # property (Device.Property)
    from spark_auto_mapper_fhir.backbone_elements.device_property import DeviceProperty

    # patient (Reference)
    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # owner (Reference)
    # Imports for References for owner
    from spark_auto_mapper_fhir.resources.organization import Organization

    # contact (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # location (Reference)
    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location

    # url (uri)
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation

    # safety (CodeableConcept)
    # Import for CodeableConcept for safety
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for safety
    # parent (Reference)
    # Imports for References for parent


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Device(FhirResourceBase):
    """
    Device
        A type of a manufactured item that is used in the provision of healthcare
    without being substantially changed through that activity. The device may be a
    medical or non-medical device.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        definition: Optional[Reference[Union[DeviceDefinition]]] = None,
        udiCarrier: Optional[FhirList[DeviceUdiCarrier]] = None,
        status: Optional[FHIRDeviceStatusCode] = None,
        statusReason: Optional[
            FhirList[CodeableConcept[FHIRDeviceStatusReasonCode]]
        ] = None,
        distinctIdentifier: Optional[FhirString] = None,
        manufacturer: Optional[FhirString] = None,
        manufactureDate: Optional[FhirDateTime] = None,
        expirationDate: Optional[FhirDateTime] = None,
        lotNumber: Optional[FhirString] = None,
        serialNumber: Optional[FhirString] = None,
        deviceName: Optional[FhirList[DeviceDeviceName]] = None,
        modelNumber: Optional[FhirString] = None,
        partNumber: Optional[FhirString] = None,
        type_: Optional[CodeableConcept[DeviceTypeCode]] = None,
        specialization: Optional[FhirList[DeviceSpecialization]] = None,
        version: Optional[FhirList[DeviceVersion]] = None,
        property: Optional[FhirList[DeviceProperty]] = None,
        patient: Optional[Reference[Union[Patient]]] = None,
        owner: Optional[Reference[Union[Organization]]] = None,
        contact: Optional[FhirList[ContactPoint]] = None,
        location: Optional[Reference[Union[Location]]] = None,
        url: Optional[FhirUri] = None,
        note: Optional[FhirList[Annotation]] = None,
        safety: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        parent: Optional[Reference[Union[Device]]] = None,
    ) -> None:
        """
            A type of a manufactured item that is used in the provision of healthcare
        without being substantially changed through that activity. The device may be a
        medical or non-medical device.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique instance identifiers assigned to a device by manufacturers other
        organizations or owners.
            :param definition: The reference to the definition for the device.
            :param udiCarrier: Unique device identifier (UDI) assigned to device label or package.  Note that
        the Device may include multiple udiCarriers as it either may include just the
        udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it
        could have been sold.
            :param status: Status of the Device availability.
            :param statusReason: Reason for the dtatus of the Device availability.
            :param distinctIdentifier: The distinct identification string as required by regulation for a human cell,
        tissue, or cellular and tissue-based product.
            :param manufacturer: A name of the manufacturer.
            :param manufactureDate: The date and time when the device was manufactured.
            :param expirationDate: The date and time beyond which this device is no longer valid or should not be
        used (if applicable).
            :param lotNumber: Lot number assigned by the manufacturer.
            :param serialNumber: The serial number assigned by the organization when the device was
        manufactured.
            :param deviceName: This represents the manufacturer's name of the device as provided by the
        device, from a UDI label, or by a person describing the Device.  This
        typically would be used when a person provides the name(s) or when the device
        represents one of the names available from DeviceDefinition.
            :param modelNumber: The model number for the device.
            :param partNumber: The part number of the device.
            :param type_: The kind or type of device.
            :param specialization: The capabilities supported on a  device, the standards to which the device
        conforms for a particular purpose, and used for the communication.
            :param version: The actual design of the device or software version running on the device.
            :param property: The actual configuration settings of a device as it actually operates, e.g.,
        regulation status, time properties.
            :param patient: Patient information, If the device is affixed to a person.
            :param owner: An organization that is responsible for the provision and ongoing maintenance
        of the device.
            :param contact: Contact details for an organization or a particular human that is responsible
        for the device.
            :param location: The place where the device can be found.
            :param url: A network address on which the device may be contacted directly.
            :param note: Descriptive information, usage information or implantation information that is
        not captured in an existing element.
            :param safety: Provides additional safety characteristics about a medical device.  For
        example devices containing latex.
            :param parent: The parent device.
        """
        super().__init__(
            resourceType="Device",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            definition=definition,
            udiCarrier=udiCarrier,
            status=status,
            statusReason=statusReason,
            distinctIdentifier=distinctIdentifier,
            manufacturer=manufacturer,
            manufactureDate=manufactureDate,
            expirationDate=expirationDate,
            lotNumber=lotNumber,
            serialNumber=serialNumber,
            deviceName=deviceName,
            modelNumber=modelNumber,
            partNumber=partNumber,
            type_=type_,
            specialization=specialization,
            version=version,
            property=property,
            patient=patient,
            owner=owner,
            contact=contact,
            location=location,
            url=url,
            note=note,
            safety=safety,
            parent=parent,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return DeviceSchema.get_schema(include_extension=include_extension)
