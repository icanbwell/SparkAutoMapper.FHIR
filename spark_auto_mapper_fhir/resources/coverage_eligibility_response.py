from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.coverageeligibilityresponse import (
    CoverageEligibilityResponseSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FinancialResourceStatusCodes)
    from spark_auto_mapper_fhir.value_sets.financial_resource_status_codes import (
        FinancialResourceStatusCodesCode,
    )

    # purpose (EligibilityResponsePurpose)
    from spark_auto_mapper_fhir.value_sets.eligibility_response_purpose import (
        EligibilityResponsePurposeCode,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # created (dateTime)
    # requestor (Reference)
    # Imports for References for requestor
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # request (Reference)
    # Imports for References for request
    from spark_auto_mapper_fhir.resources.coverage_eligibility_request import (
        CoverageEligibilityRequest,
    )

    # outcome (ClaimProcessingCodes)
    from spark_auto_mapper_fhir.value_sets.claim_processing_codes import (
        ClaimProcessingCodesCode,
    )

    # disposition (string)
    # insurer (Reference)
    # Imports for References for insurer
    # insurance (CoverageEligibilityResponse.Insurance)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_response_insurance import (
        CoverageEligibilityResponseInsurance,
    )

    # preAuthRef (string)
    # form (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for form
    from spark_auto_mapper_fhir.value_sets.form_codes import FormCodesCode

    # End Import for CodeableConcept for form
    # error (CoverageEligibilityResponse.Error)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_response_error import (
        CoverageEligibilityResponseError,
    )

    # servicedDate (date)
    # servicedPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityResponse(FhirResourceBase):
    """
    CoverageEligibilityResponse
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: FinancialResourceStatusCodesCode,
        purpose: FhirList[EligibilityResponsePurposeCode],
        patient: Reference[Union[Patient]],
        created: FhirDateTime,
        requestor: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        request: Reference[Union[CoverageEligibilityRequest]],
        outcome: ClaimProcessingCodesCode,
        disposition: Optional[FhirString] = None,
        insurer: Reference[Union[Organization]],
        insurance: Optional[FhirList[CoverageEligibilityResponseInsurance]] = None,
        preAuthRef: Optional[FhirString] = None,
        form: Optional[CodeableConcept[FormCodesCode]] = None,
        error: Optional[FhirList[CoverageEligibilityResponseError]] = None,
        servicedDate: Optional[FhirDate] = None,
        servicedPeriod: Optional[Period] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this coverage eligiblity request.
            :param status: The status of the resource instance.
            :param purpose: Code to specify whether requesting: prior authorization requirements for some
        service categories or billing codes; benefits for coverages specified or
        discovered; discovery and return of coverages for the patient; and/or
        validation that the specified coverage is in-force at the date/period
        specified or 'now' if not specified.
            :param patient: The party who is the beneficiary of the supplied coverage and for whom
        eligibility is sought.
            :param created: The date this resource was created.
            :param requestor: The provider which is responsible for the request.
            :param request: Reference to the original request resource.
            :param outcome: The outcome of the request processing.
            :param disposition: A human readable description of the status of the adjudication.
            :param insurer: The Insurer who issued the coverage in question and is the author of the
        response.
            :param insurance: Financial instruments for reimbursement for the health care products and
        services.
            :param preAuthRef: A reference from the Insurer to which these services pertain to be used on
        further communication and as proof that the request occurred.
            :param form: A code for the form to be used for printing the content.
            :param error: Errors encountered during the processing of the request.
            :param servicedDate: None
            :param servicedPeriod: None
        """
        super().__init__(
            resourceType="CoverageEligibilityResponse",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            purpose=purpose,
            patient=patient,
            created=created,
            requestor=requestor,
            request=request,
            outcome=outcome,
            disposition=disposition,
            insurer=insurer,
            insurance=insurance,
            preAuthRef=preAuthRef,
            form=form,
            error=error,
            servicedDate=servicedDate,
            servicedPeriod=servicedPeriod,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CoverageEligibilityResponseSchema.get_schema(
            include_extension=include_extension
        )
