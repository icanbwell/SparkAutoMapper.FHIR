from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.relatedperson import RelatedPersonSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # active (boolean)
    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # relationship (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for relationship
    from spark_auto_mapper_fhir.value_sets.patient_relationship_type import (
        PatientRelationshipTypeCode,
    )

    # End Import for CodeableConcept for relationship
    # name (HumanName)
    from spark_auto_mapper_fhir.complex_types.human_name import HumanName

    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # gender (AdministrativeGender)
    from spark_auto_mapper_fhir.value_sets.administrative_gender import (
        AdministrativeGenderCode,
    )

    # birthDate (date)
    # address (Address)
    from spark_auto_mapper_fhir.complex_types.address import Address

    # photo (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # communication (RelatedPerson.Communication)
    from spark_auto_mapper_fhir.backbone_elements.related_person_communication import (
        RelatedPersonCommunication,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RelatedPerson(FhirResourceBase):
    """
    RelatedPerson
    relatedperson.xsd
        Information about a person that is involved in the care for a patient, but who
    is not the target of healthcare, nor has a formal responsibility in the care
    process.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        active: Optional[FhirBoolean] = None,
        patient: Reference[Patient],
        relationship: Optional[
            FhirList[CodeableConcept[PatientRelationshipTypeCode]]
        ] = None,
        name: Optional[FhirList[HumanName]] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
        gender: Optional[AdministrativeGenderCode] = None,
        birthDate: Optional[FhirDate] = None,
        address: Optional[FhirList[Address]] = None,
        photo: Optional[FhirList[Attachment]] = None,
        period: Optional[Period] = None,
        communication: Optional[FhirList[RelatedPersonCommunication]] = None,
    ) -> None:
        """
            Information about a person that is involved in the care for a patient, but who
        is not the target of healthcare, nor has a formal responsibility in the care
        process.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Identifier for a person within a particular scope.
            :param active: Whether this related person record is in active use.
            :param patient: The patient this person is related to.
            :param relationship: The nature of the relationship between a patient and the related person.
            :param name: A name associated with the person.
            :param telecom: A contact detail for the person, e.g. a telephone number or an email address.
            :param gender: Administrative Gender - the gender that the person is considered to have for
        administration and record keeping purposes.
            :param birthDate: The date on which the related person was born.
            :param address: Address where the related person can be contacted or visited.
            :param photo: Image of the person.
            :param period: The period of time during which this relationship is or was active. If there
        are no dates defined, then the interval is unknown.
            :param communication: A language which may be used to communicate with about the patient's health.
        """
        super().__init__(
            resourceType="RelatedPerson",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            active=active,
            patient=patient,
            relationship=relationship,
            name=name,
            telecom=telecom,
            gender=gender,
            birthDate=birthDate,
            address=address,
            photo=photo,
            period=period,
            communication=communication,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return RelatedPersonSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
