from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substancereferenceinformation import (
    SubstanceReferenceInformationSchema,
)

if TYPE_CHECKING:
    pass
    # comment (string)
    # gene (SubstanceReferenceInformation.Gene)
    from spark_auto_mapper_fhir.backbone_elements.substance_reference_information_gene import (
        SubstanceReferenceInformationGene,
    )

    # geneElement (SubstanceReferenceInformation.GeneElement)
    from spark_auto_mapper_fhir.backbone_elements.substance_reference_information_gene_element import (
        SubstanceReferenceInformationGeneElement,
    )

    # classification (SubstanceReferenceInformation.Classification)
    from spark_auto_mapper_fhir.backbone_elements.substance_reference_information_classification import (
        SubstanceReferenceInformationClassification,
    )

    # target (SubstanceReferenceInformation.Target)
    from spark_auto_mapper_fhir.backbone_elements.substance_reference_information_target import (
        SubstanceReferenceInformationTarget,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceReferenceInformation(FhirResourceBase):
    """
    SubstanceReferenceInformation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        comment: Optional[FhirString] = None,
        gene: Optional[FhirList[SubstanceReferenceInformationGene]] = None,
        geneElement: Optional[
            FhirList[SubstanceReferenceInformationGeneElement]
        ] = None,
        classification: Optional[
            FhirList[SubstanceReferenceInformationClassification]
        ] = None,
        target: Optional[FhirList[SubstanceReferenceInformationTarget]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param comment: Todo.
        :param gene: Todo.
        :param geneElement: Todo.
        :param classification: Todo.
        :param target: Todo.
        """
        super().__init__(
            resourceType="SubstanceReferenceInformation",
            id_=id_,
            meta=meta,
            extension=extension,
            comment=comment,
            gene=gene,
            geneElement=geneElement,
            classification=classification,
            target=target,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubstanceReferenceInformationSchema.get_schema(
            include_extension=include_extension
        )
