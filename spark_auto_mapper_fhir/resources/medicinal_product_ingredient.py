from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductingredient import (
    MedicinalProductIngredientSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # role (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for role
    # allergenicIndicator (boolean)
    # manufacturer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for manufacturer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # specifiedSubstance (MedicinalProductIngredient.SpecifiedSubstance)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_ingredient_specified_substance import (
        MedicinalProductIngredientSpecifiedSubstance,
    )

    # substance (MedicinalProductIngredient.Substance)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_ingredient_substance import (
        MedicinalProductIngredientSubstance,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductIngredient(FhirResourceBase):
    """
    MedicinalProductIngredient
        An ingredient of a manufactured item or pharmaceutical product.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        role: CodeableConcept[GenericTypeCode],
        allergenicIndicator: Optional[FhirBoolean] = None,
        manufacturer: Optional[FhirList[Reference[Union[Organization]]]] = None,
        specifiedSubstance: Optional[
            FhirList[MedicinalProductIngredientSpecifiedSubstance]
        ] = None,
        substance: Optional[MedicinalProductIngredientSubstance] = None,
    ) -> None:
        """
            An ingredient of a manufactured item or pharmaceutical product.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: The identifier(s) of this Ingredient that are assigned by business processes
        and/or used to refer to it when a direct URL reference to the resource itself
        is not appropriate.
            :param role: Ingredient role e.g. Active ingredient, excipient.
            :param allergenicIndicator: If the ingredient is a known or suspected allergen.
            :param manufacturer: Manufacturer of this Ingredient.
            :param specifiedSubstance: A specified substance that comprises this ingredient.
            :param substance: The ingredient substance.
        """
        super().__init__(
            resourceType="MedicinalProductIngredient",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            role=role,
            allergenicIndicator=allergenicIndicator,
            manufacturer=manufacturer,
            specifiedSubstance=specifiedSubstance,
            substance=substance,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductIngredientSchema.get_schema(
            include_extension=include_extension
        )
