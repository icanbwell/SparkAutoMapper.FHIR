from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.catalogentry import CatalogEntrySchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # orderable (boolean)
    # referencedItem (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for referencedItem
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService
    from spark_auto_mapper_fhir.resources.activity_definition import ActivityDefinition
    from spark_auto_mapper_fhir.resources.plan_definition import PlanDefinition
    from spark_auto_mapper_fhir.resources.specimen_definition import SpecimenDefinition
    from spark_auto_mapper_fhir.resources.observation_definition import (
        ObservationDefinition,
    )
    from spark_auto_mapper_fhir.resources.binary import Binary

    # additionalIdentifier (Identifier)
    # classification (CodeableConcept)
    # Import for CodeableConcept for classification
    # End Import for CodeableConcept for classification
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # validityPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # validTo (dateTime)
    # lastUpdated (dateTime)
    # additionalCharacteristic (CodeableConcept)
    # Import for CodeableConcept for additionalCharacteristic
    # End Import for CodeableConcept for additionalCharacteristic
    # additionalClassification (CodeableConcept)
    # Import for CodeableConcept for additionalClassification
    # End Import for CodeableConcept for additionalClassification
    # relatedEntry (CatalogEntry.RelatedEntry)
    from spark_auto_mapper_fhir.backbone_elements.catalog_entry_related_entry import (
        CatalogEntryRelatedEntry,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CatalogEntry(FhirResourceBase):
    """
    CatalogEntry
    catalogentry.xsd
        Catalog entries are wrappers that contextualize items included in a catalog.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        orderable: FhirBoolean,
        referencedItem: Reference[
            Union[
                Medication,
                Device,
                Organization,
                Practitioner,
                PractitionerRole,
                HealthcareService,
                ActivityDefinition,
                PlanDefinition,
                SpecimenDefinition,
                ObservationDefinition,
                Binary,
            ]
        ],
        additionalIdentifier: Optional[FhirList[Identifier]] = None,
        classification: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        status: Optional[PublicationStatusCode] = None,
        validityPeriod: Optional[Period] = None,
        validTo: Optional[FhirDateTime] = None,
        lastUpdated: Optional[FhirDateTime] = None,
        additionalCharacteristic: Optional[
            FhirList[CodeableConcept[GenericTypeCode]]
        ] = None,
        additionalClassification: Optional[
            FhirList[CodeableConcept[GenericTypeCode]]
        ] = None,
        relatedEntry: Optional[FhirList[CatalogEntryRelatedEntry]] = None,
    ) -> None:
        """
            Catalog entries are wrappers that contextualize items included in a catalog.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Used in supporting different identifiers for the same product, e.g.
        manufacturer code and retailer code.
            :param type_: The type of item - medication, device, service, protocol or other.
            :param orderable: Whether the entry represents an orderable item.
            :param referencedItem: The item in a catalog or definition.
            :param additionalIdentifier: Used in supporting related concepts, e.g. NDC to RxNorm.
            :param classification: Classes of devices, or ATC for medication.
            :param status: Used to support catalog exchange even for unsupported products, e.g. getting
        list of medications even if not prescribable.
            :param validityPeriod: The time period in which this catalog entry is expected to be active.
            :param validTo: The date until which this catalog entry is expected to be active.
            :param lastUpdated: Typically date of issue is different from the beginning of the validity. This
        can be used to see when an item was last updated.
            :param additionalCharacteristic: Used for examplefor Out of Formulary, or any specifics.
            :param additionalClassification: User for example for ATC classification, or.
            :param relatedEntry: Used for example, to point to a substance, or to a device used to administer a
        medication.
        """
        super().__init__(
            resourceType="CatalogEntry",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            type_=type_,
            orderable=orderable,
            referencedItem=referencedItem,
            additionalIdentifier=additionalIdentifier,
            classification=classification,
            status=status,
            validityPeriod=validityPeriod,
            validTo=validTo,
            lastUpdated=lastUpdated,
            additionalCharacteristic=additionalCharacteristic,
            additionalClassification=additionalClassification,
            relatedEntry=relatedEntry,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return CatalogEntrySchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
