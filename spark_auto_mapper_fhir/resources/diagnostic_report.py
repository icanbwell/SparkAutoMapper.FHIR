from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.diagnosticreport import DiagnosticReportSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # basedOn (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.care_plan import CarePlan
    from spark_auto_mapper_fhir.resources.immunization_recommendation import (
        ImmunizationRecommendation,
    )
    from spark_auto_mapper_fhir.resources.medication_request import MedicationRequest
    from spark_auto_mapper_fhir.resources.nutrition_order import NutritionOrder
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # status (DiagnosticReportStatus)
    from spark_auto_mapper_fhir.value_sets.diagnostic_report_status import (
        DiagnosticReportStatusCode,
    )

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.diagnostic_service_section_codes import (
        DiagnosticServiceSectionCodesCode,
    )

    # End Import for CodeableConcept for category
    # code (CodeableConcept)
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.loinc_diagnostic_report_codes import (
        LOINCDiagnosticReportCodesCode,
    )

    # End Import for CodeableConcept for code
    # subject (Reference)
    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.location import Location

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # effectiveDateTime (dateTime)
    # effectivePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # issued (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # performer (Reference)
    # Imports for References for performer
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.care_team import CareTeam

    # resultsInterpreter (Reference)
    # Imports for References for resultsInterpreter
    # specimen (Reference)
    # Imports for References for specimen
    from spark_auto_mapper_fhir.resources.specimen import Specimen

    # result (Reference)
    # Imports for References for result
    from spark_auto_mapper_fhir.resources.observation import Observation

    # imagingStudy (Reference)
    # Imports for References for imagingStudy
    from spark_auto_mapper_fhir.resources.imaging_study import ImagingStudy

    # media (DiagnosticReport.Media)
    from spark_auto_mapper_fhir.backbone_elements.diagnostic_report_media import (
        DiagnosticReportMedia,
    )

    # conclusion (string)
    # conclusionCode (CodeableConcept)
    # Import for CodeableConcept for conclusionCode
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindingsCode,
    )

    # End Import for CodeableConcept for conclusionCode
    # presentedForm (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DiagnosticReport(FhirResourceBase):
    """
    DiagnosticReport
    diagnosticreport.xsd
        The findings and interpretation of diagnostic  tests performed on patients,
    groups of patients, devices, and locations, and/or specimens derived from
    these. The report includes clinical context such as requesting and provider
    information, and some mix of atomic results, images, textual and coded
    interpretations, and formatted representation of diagnostic reports.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        basedOn: Optional[
            FhirList[
                Reference[
                    Union[
                        CarePlan,
                        ImmunizationRecommendation,
                        MedicationRequest,
                        NutritionOrder,
                        ServiceRequest,
                    ]
                ]
            ]
        ] = None,
        status: DiagnosticReportStatusCode,
        category: Optional[
            FhirList[CodeableConcept[DiagnosticServiceSectionCodesCode]]
        ] = None,
        code: CodeableConcept[LOINCDiagnosticReportCodesCode],
        subject: Optional[Reference[Union[Patient, Group, Device, Location]]] = None,
        encounter: Optional[Reference[Encounter]] = None,
        effectiveDateTime: Optional[FhirDateTime] = None,
        effectivePeriod: Optional[Period] = None,
        issued: Optional[FhirInstant] = None,
        performer: Optional[
            FhirList[
                Reference[Union[Practitioner, PractitionerRole, Organization, CareTeam]]
            ]
        ] = None,
        resultsInterpreter: Optional[
            FhirList[
                Reference[Union[Practitioner, PractitionerRole, Organization, CareTeam]]
            ]
        ] = None,
        specimen: Optional[FhirList[Reference[Specimen]]] = None,
        result: Optional[FhirList[Reference[Observation]]] = None,
        imagingStudy: Optional[FhirList[Reference[ImagingStudy]]] = None,
        media: Optional[FhirList[DiagnosticReportMedia]] = None,
        conclusion: Optional[FhirString] = None,
        conclusionCode: Optional[
            FhirList[CodeableConcept[SNOMEDCTClinicalFindingsCode]]
        ] = None,
        presentedForm: Optional[FhirList[Attachment]] = None,
    ) -> None:
        """
            The findings and interpretation of diagnostic  tests performed on patients,
        groups of patients, devices, and locations, and/or specimens derived from
        these. The report includes clinical context such as requesting and provider
        information, and some mix of atomic results, images, textual and coded
        interpretations, and formatted representation of diagnostic reports.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Identifiers assigned to this report by the performer or other systems.
            :param basedOn: Details concerning a service requested.
            :param status: The status of the diagnostic report.
            :param category: A code that classifies the clinical discipline, department or diagnostic
        service that created the report (e.g. cardiology, biochemistry, hematology,
        MRI). This is used for searching, sorting and display purposes.
            :param code: A code or name that describes this diagnostic report.
            :param subject: The subject of the report. Usually, but not always, this is a patient.
        However, diagnostic services also perform analyses on specimens collected from
        a variety of other sources.
            :param encounter: The healthcare event  (e.g. a patient and healthcare provider interaction)
        which this DiagnosticReport is about.
            :param effectiveDateTime: None
            :param effectivePeriod: None
            :param issued: The date and time that this version of the report was made available to
        providers, typically after the report was reviewed and verified.
            :param performer: The diagnostic service that is responsible for issuing the report.
            :param resultsInterpreter: The practitioner or organization that is responsible for the report's
        conclusions and interpretations.
            :param specimen: Details about the specimens on which this diagnostic report is based.
            :param result: [Observations](observation.html)  that are part of this diagnostic report.
            :param imagingStudy: One or more links to full details of any imaging performed during the
        diagnostic investigation. Typically, this is imaging performed by DICOM
        enabled modalities, but this is not required. A fully enabled PACS viewer can
        use this information to provide views of the source images.
            :param media: A list of key images associated with this report. The images are generally
        created during the diagnostic process, and may be directly of the patient, or
        of treated specimens (i.e. slides of interest).
            :param conclusion: Concise and clinically contextualized summary conclusion
        (interpretation/impression) of the diagnostic report.
            :param conclusionCode: One or more codes that represent the summary conclusion
        (interpretation/impression) of the diagnostic report.
            :param presentedForm: Rich text representation of the entire result as issued by the diagnostic
        service. Multiple formats are allowed but they SHALL be semantically
        equivalent.
        """
        super().__init__(
            resourceType="DiagnosticReport",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            basedOn=basedOn,
            status=status,
            category=category,
            code=code,
            subject=subject,
            encounter=encounter,
            effectiveDateTime=effectiveDateTime,
            effectivePeriod=effectivePeriod,
            issued=issued,
            performer=performer,
            resultsInterpreter=resultsInterpreter,
            specimen=specimen,
            result=result,
            imagingStudy=imagingStudy,
            media=media,
            conclusion=conclusion,
            conclusionCode=conclusionCode,
            presentedForm=presentedForm,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return DiagnosticReportSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
