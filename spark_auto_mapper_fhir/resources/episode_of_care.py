from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.episodeofcare import EpisodeOfCareSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (EpisodeOfCareStatus)
    from spark_auto_mapper_fhir.value_sets.episode_of_care_status import (
        EpisodeOfCareStatusCode,
    )

    # statusHistory (EpisodeOfCare.StatusHistory)
    from spark_auto_mapper_fhir.backbone_elements.episode_of_care_status_history import (
        EpisodeOfCareStatusHistory,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.episode_of_care_type import (
        EpisodeOfCareTypeCode,
    )

    # End Import for CodeableConcept for type_
    # diagnosis (EpisodeOfCare.Diagnosis)
    from spark_auto_mapper_fhir.backbone_elements.episode_of_care_diagnosis import (
        EpisodeOfCareDiagnosis,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # managingOrganization (Reference)
    # Imports for References for managingOrganization
    from spark_auto_mapper_fhir.resources.organization import Organization

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # referralRequest (Reference)
    # Imports for References for referralRequest
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # careManager (Reference)
    # Imports for References for careManager
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # team (Reference)
    # Imports for References for team
    from spark_auto_mapper_fhir.resources.care_team import CareTeam

    # account (Reference)
    # Imports for References for account
    from spark_auto_mapper_fhir.resources.account import Account


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EpisodeOfCare(FhirResourceBase):
    """
    EpisodeOfCare
    episodeofcare.xsd
        An association between a patient and an organization / healthcare provider(s)
    during which time encounters may occur. The managing organization assumes a
    level of responsibility for the patient during this time.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: EpisodeOfCareStatusCode,
        statusHistory: Optional[FhirList[EpisodeOfCareStatusHistory]] = None,
        type_: Optional[FhirList[CodeableConcept[EpisodeOfCareTypeCode]]] = None,
        diagnosis: Optional[FhirList[EpisodeOfCareDiagnosis]] = None,
        patient: Reference[Patient],
        managingOrganization: Optional[Reference[Organization]] = None,
        period: Optional[Period] = None,
        referralRequest: Optional[FhirList[Reference[ServiceRequest]]] = None,
        careManager: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        team: Optional[FhirList[Reference[CareTeam]]] = None,
        account: Optional[FhirList[Reference[Account]]] = None,
    ) -> None:
        """
            An association between a patient and an organization / healthcare provider(s)
        during which time encounters may occur. The managing organization assumes a
        level of responsibility for the patient during this time.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: The EpisodeOfCare may be known by different identifiers for different contexts
        of use, such as when an external agency is tracking the Episode for funding
        purposes.
            :param status: planned | waitlist | active | onhold | finished | cancelled.
            :param statusHistory: The history of statuses that the EpisodeOfCare has been through (without
        requiring processing the history of the resource).
            :param type_: A classification of the type of episode of care; e.g. specialist referral,
        disease management, type of funded care.
            :param diagnosis: The list of diagnosis relevant to this episode of care.
            :param patient: The patient who is the focus of this episode of care.
            :param managingOrganization: The organization that has assumed the specific responsibilities for the
        specified duration.
            :param period: The interval during which the managing organization assumes the defined
        responsibility.
            :param referralRequest: Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
        referrals.
            :param careManager: The practitioner that is the care manager/care coordinator for this patient.
            :param team: The list of practitioners that may be facilitating this episode of care for
        specific purposes.
            :param account: The set of accounts that may be used for billing for this EpisodeOfCare.
        """
        super().__init__(
            resourceType="EpisodeOfCare",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            status=status,
            statusHistory=statusHistory,
            type_=type_,
            diagnosis=diagnosis,
            patient=patient,
            managingOrganization=managingOrganization,
            period=period,
            referralRequest=referralRequest,
            careManager=careManager,
            team=team,
            account=account,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return EpisodeOfCareSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
