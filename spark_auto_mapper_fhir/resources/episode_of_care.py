from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.episodeofcare import EpisodeOfCareSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (EpisodeOfCareStatus)
    from spark_auto_mapper_fhir.value_sets.episode_of_care_status import (
        EpisodeOfCareStatusCode,
    )

    # statusHistory (EpisodeOfCare.StatusHistory)
    from spark_auto_mapper_fhir.backbone_elements.episode_of_care_status_history import (
        EpisodeOfCareStatusHistory,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.episode_of_care_type import (
        EpisodeOfCareTypeCode,
    )

    # End Import for CodeableConcept for type_
    # diagnosis (EpisodeOfCare.Diagnosis)
    from spark_auto_mapper_fhir.backbone_elements.episode_of_care_diagnosis import (
        EpisodeOfCareDiagnosis,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # managingOrganization (Reference)
    # Imports for References for managingOrganization
    from spark_auto_mapper_fhir.resources.organization import Organization

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # referralRequest (Reference)
    # Imports for References for referralRequest
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # careManager (Reference)
    # Imports for References for careManager
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # team (Reference)
    # Imports for References for team
    from spark_auto_mapper_fhir.resources.care_team import CareTeam

    # account (Reference)
    # Imports for References for account
    from spark_auto_mapper_fhir.resources.account import Account


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EpisodeOfCare(FhirResourceBase):
    """
    EpisodeOfCare
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: EpisodeOfCareStatusCode,
        statusHistory: Optional[FhirList[EpisodeOfCareStatusHistory]] = None,
        type_: Optional[FhirList[CodeableConcept[EpisodeOfCareTypeCode]]] = None,
        diagnosis: Optional[FhirList[EpisodeOfCareDiagnosis]] = None,
        patient: Reference[Union[Patient]],
        managingOrganization: Optional[Reference[Union[Organization]]] = None,
        period: Optional[Period] = None,
        referralRequest: Optional[FhirList[Reference[Union[ServiceRequest]]]] = None,
        careManager: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        team: Optional[FhirList[Reference[Union[CareTeam]]]] = None,
        account: Optional[FhirList[Reference[Union[Account]]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: The EpisodeOfCare may be known by different identifiers for different contexts
        of use, such as when an external agency is tracking the Episode for funding
        purposes.
            :param status: planned | waitlist | active | onhold | finished | cancelled.
            :param statusHistory: The history of statuses that the EpisodeOfCare has been through (without
        requiring processing the history of the resource).
            :param type_: A classification of the type of episode of care; e.g. specialist referral,
        disease management, type of funded care.
            :param diagnosis: The list of diagnosis relevant to this episode of care.
            :param patient: The patient who is the focus of this episode of care.
            :param managingOrganization: The organization that has assumed the specific responsibilities for the
        specified duration.
            :param period: The interval during which the managing organization assumes the defined
        responsibility.
            :param referralRequest: Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
        referrals.
            :param careManager: The practitioner that is the care manager/care coordinator for this patient.
            :param team: The list of practitioners that may be facilitating this episode of care for
        specific purposes.
            :param account: The set of accounts that may be used for billing for this EpisodeOfCare.
        """
        super().__init__(
            resourceType="EpisodeOfCare",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            statusHistory=statusHistory,
            type_=type_,
            diagnosis=diagnosis,
            patient=patient,
            managingOrganization=managingOrganization,
            period=period,
            referralRequest=referralRequest,
            careManager=careManager,
            team=team,
            account=account,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return EpisodeOfCareSchema.get_schema(include_extension=include_extension)
