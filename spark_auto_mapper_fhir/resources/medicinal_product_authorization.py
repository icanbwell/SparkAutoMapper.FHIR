from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductauthorization import (
    MedicinalProductAuthorizationSchema,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medicinal_product_packaged import (
        MedicinalProductPackaged,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_jurisdictional_authorization import (
        MedicinalProductAuthorizationJurisdictionalAuthorization,
    )
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for holder
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for regulator
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_procedure import (
        MedicinalProductAuthorizationProcedure,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductAuthorization(FhirResourceBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        subject: Optional[
            Reference[Union[MedicinalProduct, MedicinalProductPackaged]]
        ] = None,
        country: Optional[FhirList[CodeableConcept]] = None,
        jurisdiction: Optional[FhirList[CodeableConcept]] = None,
        status: Optional[CodeableConcept] = None,
        statusDate: Optional[FhirDateTime] = None,
        restoreDate: Optional[FhirDateTime] = None,
        validityPeriod: Optional[Period] = None,
        dataExclusivityPeriod: Optional[Period] = None,
        dateOfFirstAuthorization: Optional[FhirDateTime] = None,
        internationalBirthDate: Optional[FhirDateTime] = None,
        legalBasis: Optional[CodeableConcept] = None,
        jurisdictionalAuthorization: Optional[
            FhirList[MedicinalProductAuthorizationJurisdictionalAuthorization]
        ] = None,
        holder: Optional[Reference[Union[Organization]]] = None,
        regulator: Optional[Reference[Union[Organization]]] = None,
        procedure: Optional[MedicinalProductAuthorizationProcedure] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifier for the marketing authorization, as assigned by a
        regulator.
            :param subject: The medicinal product that is being authorized.
            :param country: The country in which the marketing authorization has been granted.
            :param jurisdiction: Jurisdiction within a country.
            :param status: The status of the marketing authorization.
            :param statusDate: The date at which the given status has become applicable.
            :param restoreDate: The date when a suspended the marketing or the marketing authorization of the
        product is anticipated to be restored.
            :param validityPeriod: The beginning of the time period in which the marketing authorization is in
        the specific status shall be specified A complete date consisting of day,
        month and year shall be specified using the ISO 8601 date format.
            :param dataExclusivityPeriod: A period of time after authorization before generic product applicatiosn can
        be submitted.
            :param dateOfFirstAuthorization: The date when the first authorization was granted by a Medicines Regulatory
        Agency.
            :param internationalBirthDate: Date of first marketing authorization for a company's new medicinal product in
        any country in the World.
            :param legalBasis: The legal framework against which this authorization is granted.
            :param jurisdictionalAuthorization: Authorization in areas within a country.
            :param holder: Marketing Authorization Holder.
            :param regulator: Medicines Regulatory Agency.
            :param procedure: The regulatory procedure for granting or amending a marketing authorization.
        """
        super().__init__(
            resourceType="MedicinalProductAuthorization",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            subject=subject,
            country=country,
            jurisdiction=jurisdiction,
            status=status,
            statusDate=statusDate,
            restoreDate=restoreDate,
            validityPeriod=validityPeriod,
            dataExclusivityPeriod=dataExclusivityPeriod,
            dateOfFirstAuthorization=dateOfFirstAuthorization,
            internationalBirthDate=internationalBirthDate,
            legalBasis=legalBasis,
            jurisdictionalAuthorization=jurisdictionalAuthorization,
            holder=holder,
            regulator=regulator,
            procedure=procedure,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductAuthorizationSchema.get_schema(
            include_extension=include_extension
        )
