from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductauthorization import (
    MedicinalProductAuthorizationSchema,
)

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medicinal_product_packaged import (
        MedicinalProductPackaged,
    )

    # country (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for country
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for country
    # jurisdiction (CodeableConcept)
    # Import for CodeableConcept for jurisdiction
    # End Import for CodeableConcept for jurisdiction
    # status (CodeableConcept)
    # Import for CodeableConcept for status
    # End Import for CodeableConcept for status
    # statusDate (dateTime)
    # restoreDate (dateTime)
    # validityPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # dataExclusivityPeriod (Period)
    # dateOfFirstAuthorization (dateTime)
    # internationalBirthDate (dateTime)
    # legalBasis (CodeableConcept)
    # Import for CodeableConcept for legalBasis
    # End Import for CodeableConcept for legalBasis
    # jurisdictionalAuthorization (MedicinalProductAuthorization.JurisdictionalAuthorization)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_jurisdictional_authorization import (
        MedicinalProductAuthorizationJurisdictionalAuthorization,
    )

    # holder (Reference)
    # Imports for References for holder
    from spark_auto_mapper_fhir.resources.organization import Organization

    # regulator (Reference)
    # Imports for References for regulator
    # procedure (MedicinalProductAuthorization.Procedure)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_procedure import (
        MedicinalProductAuthorizationProcedure,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductAuthorization(FhirResourceBase):
    """
    MedicinalProductAuthorization
    medicinalproductauthorization.xsd
        The regulatory authorization of a medicinal product.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        subject: Optional[
            Reference[Union[MedicinalProduct, MedicinalProductPackaged]]
        ] = None,
        country: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        jurisdiction: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        status: Optional[CodeableConcept[GenericTypeCode]] = None,
        statusDate: Optional[FhirDateTime] = None,
        restoreDate: Optional[FhirDateTime] = None,
        validityPeriod: Optional[Period] = None,
        dataExclusivityPeriod: Optional[Period] = None,
        dateOfFirstAuthorization: Optional[FhirDateTime] = None,
        internationalBirthDate: Optional[FhirDateTime] = None,
        legalBasis: Optional[CodeableConcept[GenericTypeCode]] = None,
        jurisdictionalAuthorization: Optional[
            FhirList[MedicinalProductAuthorizationJurisdictionalAuthorization]
        ] = None,
        holder: Optional[Reference[Organization]] = None,
        regulator: Optional[Reference[Organization]] = None,
        procedure: Optional[MedicinalProductAuthorizationProcedure] = None,
    ) -> None:
        """
            The regulatory authorization of a medicinal product.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Business identifier for the marketing authorization, as assigned by a
        regulator.
            :param subject: The medicinal product that is being authorized.
            :param country: The country in which the marketing authorization has been granted.
            :param jurisdiction: Jurisdiction within a country.
            :param status: The status of the marketing authorization.
            :param statusDate: The date at which the given status has become applicable.
            :param restoreDate: The date when a suspended the marketing or the marketing authorization of the
        product is anticipated to be restored.
            :param validityPeriod: The beginning of the time period in which the marketing authorization is in
        the specific status shall be specified A complete date consisting of day,
        month and year shall be specified using the ISO 8601 date format.
            :param dataExclusivityPeriod: A period of time after authorization before generic product applicatiosn can
        be submitted.
            :param dateOfFirstAuthorization: The date when the first authorization was granted by a Medicines Regulatory
        Agency.
            :param internationalBirthDate: Date of first marketing authorization for a company's new medicinal product in
        any country in the World.
            :param legalBasis: The legal framework against which this authorization is granted.
            :param jurisdictionalAuthorization: Authorization in areas within a country.
            :param holder: Marketing Authorization Holder.
            :param regulator: Medicines Regulatory Agency.
            :param procedure: The regulatory procedure for granting or amending a marketing authorization.
        """
        super().__init__(
            resourceType="MedicinalProductAuthorization",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            subject=subject,
            country=country,
            jurisdiction=jurisdiction,
            status=status,
            statusDate=statusDate,
            restoreDate=restoreDate,
            validityPeriod=validityPeriod,
            dataExclusivityPeriod=dataExclusivityPeriod,
            dateOfFirstAuthorization=dateOfFirstAuthorization,
            internationalBirthDate=internationalBirthDate,
            legalBasis=legalBasis,
            jurisdictionalAuthorization=jurisdictionalAuthorization,
            holder=holder,
            regulator=regulator,
            procedure=procedure,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductAuthorizationSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
