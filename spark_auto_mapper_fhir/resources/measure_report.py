from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.measurereport import MeasureReportSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (MeasureReportStatus)
    from spark_auto_mapper_fhir.value_sets.measure_report_status import (
        MeasureReportStatusCode,
    )

    # type_ (MeasureReportType)
    from spark_auto_mapper_fhir.value_sets.measure_report_type import (
        MeasureReportTypeCode,
    )

    # measure (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.group import Group

    # date (dateTime)
    # reporter (Reference)
    # Imports for References for reporter
    from spark_auto_mapper_fhir.resources.organization import Organization

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # improvementNotation (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for improvementNotation
    from spark_auto_mapper_fhir.value_sets.measure_improvement_notation import (
        MeasureImprovementNotationCode,
    )

    # End Import for CodeableConcept for improvementNotation
    # group (MeasureReport.Group)
    from spark_auto_mapper_fhir.backbone_elements.measure_report_group import (
        MeasureReportGroup,
    )

    # evaluatedResource (Reference)
    # Imports for References for evaluatedResource
    from spark_auto_mapper_fhir.resources.resource import Resource


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureReport(FhirResourceBase):
    """
    MeasureReport
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: MeasureReportStatusCode,
        type_: MeasureReportTypeCode,
        measure: FhirCanonical,
        subject: Optional[
            Reference[
                Union[
                    Patient,
                    Practitioner,
                    PractitionerRole,
                    Location,
                    Device,
                    RelatedPerson,
                    Group,
                ]
            ]
        ] = None,
        date: Optional[FhirDateTime] = None,
        reporter: Optional[
            Reference[Union[Practitioner, PractitionerRole, Location, Organization]]
        ] = None,
        period: Period,
        improvementNotation: Optional[
            CodeableConcept[MeasureImprovementNotationCode]
        ] = None,
        group: Optional[FhirList[MeasureReportGroup]] = None,
        evaluatedResource: Optional[FhirList[Reference[Union[Resource]]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A formal identifier that is used to identify this MeasureReport when it is
        represented in other formats or referenced in a specification, model, design
        or an instance.
            :param status: The MeasureReport status. No data will be available until the MeasureReport
        status is complete.
            :param type_: The type of measure report. This may be an individual report, which provides
        the score for the measure for an individual member of the population; a
        subject-listing, which returns the list of members that meet the various
        criteria in the measure; a summary report, which returns a population count
        for each of the criteria in the measure; or a data-collection, which enables
        the MeasureReport to be used to exchange the data-of-interest for a quality
        measure.
            :param measure: A reference to the Measure that was calculated to produce this report.
            :param subject: Optional subject identifying the individual or individuals the report is for.
            :param date: The date this measure report was generated.
            :param reporter: The individual, location, or organization that is reporting the data.
            :param period: The reporting period for which the report was calculated.
            :param improvementNotation: Whether improvement in the measure is noted by an increase or decrease in the
        measure score.
            :param group: The results of the calculation, one for each population group in the measure.
            :param evaluatedResource: A reference to a Bundle containing the Resources that were used in the
        calculation of this measure.
        """
        super().__init__(
            resourceType="MeasureReport",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            type_=type_,
            measure=measure,
            subject=subject,
            date=date,
            reporter=reporter,
            period=period,
            improvementNotation=improvementNotation,
            group=group,
            evaluatedResource=evaluatedResource,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MeasureReportSchema.get_schema(include_extension=include_extension)
