from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.account import AccountSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (AccountStatus)
    from spark_auto_mapper_fhir.value_sets.account_status import AccountStatusCode

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.account_types import AccountTypesCode

    # End Import for CodeableConcept for type_
    # name (string)
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService
    from spark_auto_mapper_fhir.resources.organization import Organization

    # servicePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # coverage (Account.Coverage)
    from spark_auto_mapper_fhir.backbone_elements.account_coverage import (
        AccountCoverage,
    )

    # owner (Reference)
    # Imports for References for owner
    # description (string)
    # guarantor (Account.Guarantor)
    from spark_auto_mapper_fhir.backbone_elements.account_guarantor import (
        AccountGuarantor,
    )

    # partOf (Reference)
    # Imports for References for partOf


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Account(FhirResourceBase):
    """
    Account
        A financial tool for tracking value accrued for a particular purpose.  In the
    healthcare field, used to track charges for a patient, cost centers, etc.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: AccountStatusCode,
        type_: Optional[CodeableConcept[AccountTypesCode]] = None,
        name: Optional[FhirString] = None,
        subject: Optional[
            FhirList[
                Reference[
                    Union[
                        Patient,
                        Device,
                        Practitioner,
                        PractitionerRole,
                        Location,
                        HealthcareService,
                        Organization,
                    ]
                ]
            ]
        ] = None,
        servicePeriod: Optional[Period] = None,
        coverage: Optional[FhirList[AccountCoverage]] = None,
        owner: Optional[Reference[Union[Organization]]] = None,
        description: Optional[FhirString] = None,
        guarantor: Optional[FhirList[AccountGuarantor]] = None,
        partOf: Optional[Reference[Union[Account]]] = None,
    ) -> None:
        """
            A financial tool for tracking value accrued for a particular purpose.  In the
        healthcare field, used to track charges for a patient, cost centers, etc.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique identifier used to reference the account.  Might or might not be
        intended for human use (e.g. credit card number).
            :param status: Indicates whether the account is presently used/usable or not.
            :param type_: Categorizes the account for reporting and searching purposes.
            :param name: Name used for the account when displaying it to humans in reports, etc.
            :param subject: Identifies the entity which incurs the expenses. While the immediate
        recipients of services or goods might be entities related to the subject, the
        expenses were ultimately incurred by the subject of the Account.
            :param servicePeriod: The date range of services associated with this account.
            :param coverage: The party(s) that are responsible for covering the payment of this account,
        and what order should they be applied to the account.
            :param owner: Indicates the service area, hospital, department, etc. with responsibility for
        managing the Account.
            :param description: Provides additional information about what the account tracks and how it is
        used.
            :param guarantor: The parties responsible for balancing the account if other payment options
        fall short.
            :param partOf: Reference to a parent Account.
        """
        super().__init__(
            resourceType="Account",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            type_=type_,
            name=name,
            subject=subject,
            servicePeriod=servicePeriod,
            coverage=coverage,
            owner=owner,
            description=description,
            guarantor=guarantor,
            partOf=partOf,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return AccountSchema.get_schema(include_extension=include_extension)
