from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.requestgroup import RequestGroupSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # instantiatesCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # instantiatesUri (uri)
    # basedOn (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.resource import Resource

    # replaces (Reference)
    # Imports for References for replaces
    # groupIdentifier (Identifier)
    # status (RequestStatus)
    from spark_auto_mapper_fhir.value_sets.request_status import RequestStatusCode

    # intent (RequestIntent)
    from spark_auto_mapper_fhir.value_sets.request_intent import RequestIntentCode

    # priority (RequestPriority)
    from spark_auto_mapper_fhir.value_sets.request_priority import RequestPriorityCode

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code
    # subject (Reference)
    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # authoredOn (dateTime)
    # author (Reference)
    # Imports for References for author
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation

    # action (RequestGroup.Action)
    from spark_auto_mapper_fhir.backbone_elements.request_group_action import (
        RequestGroupAction,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RequestGroup(FhirResourceBase):
    """
    RequestGroup
    requestgroup.xsd
        A group of related requests that can be used to capture intended activities
    that have inter-dependencies such as "give this medication after that one".
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        instantiatesCanonical: Optional[FhirList[FhirCanonical]] = None,
        instantiatesUri: Optional[FhirList[FhirUri]] = None,
        basedOn: Optional[FhirList[Reference[Resource]]] = None,
        replaces: Optional[FhirList[Reference[Resource]]] = None,
        groupIdentifier: Optional[Identifier] = None,
        status: RequestStatusCode,
        intent: RequestIntentCode,
        priority: Optional[RequestPriorityCode] = None,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
        subject: Optional[Reference[Union[Patient, Group]]] = None,
        encounter: Optional[Reference[Encounter]] = None,
        authoredOn: Optional[FhirDateTime] = None,
        author: Optional[
            Reference[Union[Device, Practitioner, PractitionerRole]]
        ] = None,
        reasonCode: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        note: Optional[FhirList[Annotation]] = None,
        action: Optional[FhirList[RequestGroupAction]] = None,
    ) -> None:
        """
            A group of related requests that can be used to capture intended activities
        that have inter-dependencies such as "give this medication after that one".
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Allows a service to provide a unique, business identifier for the request.
            :param instantiatesCanonical: A canonical URL referencing a FHIR-defined protocol, guideline, orderset or
        other definition that is adhered to in whole or in part by this request.
            :param instantiatesUri: A URL referencing an externally defined protocol, guideline, orderset or other
        definition that is adhered to in whole or in part by this request.
            :param basedOn: A plan, proposal or order that is fulfilled in whole or in part by this
        request.
            :param replaces: Completed or terminated request(s) whose function is taken by this new
        request.
            :param groupIdentifier: A shared identifier common to all requests that were authorized more or less
        simultaneously by a single author, representing the identifier of the
        requisition, prescription or similar form.
            :param status: The current state of the request. For request groups, the status reflects the
        status of all the requests in the group.
            :param intent: Indicates the level of authority/intentionality associated with the request
        and where the request fits into the workflow chain.
            :param priority: Indicates how quickly the request should be addressed with respect to other
        requests.
            :param code: A code that identifies what the overall request group is.
            :param subject: The subject for which the request group was created.
            :param encounter: Describes the context of the request group, if any.
            :param authoredOn: Indicates when the request group was created.
            :param author: Provides a reference to the author of the request group.
            :param reasonCode: Describes the reason for the request group in coded or textual form.
            :param reasonReference: Indicates another resource whose existence justifies this request group.
            :param note: Provides a mechanism to communicate additional information about the response.
            :param action: The actions, if any, produced by the evaluation of the artifact.
        """
        super().__init__(
            resourceType="RequestGroup",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            instantiatesCanonical=instantiatesCanonical,
            instantiatesUri=instantiatesUri,
            basedOn=basedOn,
            replaces=replaces,
            groupIdentifier=groupIdentifier,
            status=status,
            intent=intent,
            priority=priority,
            code=code,
            subject=subject,
            encounter=encounter,
            authoredOn=authoredOn,
            author=author,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            note=note,
            action=action,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return RequestGroupSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
