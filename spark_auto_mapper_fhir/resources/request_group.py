from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.requestgroup import RequestGroupSchema

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.complex_types.uri import uri
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for replaces
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.request_status import RequestStatus
    from spark_auto_mapper_fhir.complex_types.request_intent import RequestIntent
    from spark_auto_mapper_fhir.complex_types.request_priority import RequestPriority
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for author
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation
    from spark_auto_mapper_fhir.backbone_elements.request_group_action import (
        RequestGroupAction,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RequestGroup(FhirResourceBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        instantiatesCanonical: Optional[FhirList[canonical]] = None,
        instantiatesUri: Optional[FhirList[uri]] = None,
        basedOn: Optional[FhirList[Reference[Union[Resource]]]] = None,
        replaces: Optional[FhirList[Reference[Union[Resource]]]] = None,
        groupIdentifier: Optional[Identifier] = None,
        status: RequestStatus,
        intent: RequestIntent,
        priority: Optional[RequestPriority] = None,
        code: Optional[CodeableConcept] = None,
        subject: Optional[Reference[Union[Patient, Group]]] = None,
        encounter: Optional[Reference[Union[Encounter]]] = None,
        authoredOn: Optional[FhirDateTime] = None,
        author: Optional[
            Reference[Union[Device, Practitioner, PractitionerRole]]
        ] = None,
        reasonCode: Optional[FhirList[CodeableConcept]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        note: Optional[FhirList[Annotation]] = None,
        action: Optional[FhirList[RequestGroupAction]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Allows a service to provide a unique, business identifier for the request.
            :param instantiatesCanonical: A canonical URL referencing a FHIR-defined protocol, guideline, orderset or
        other definition that is adhered to in whole or in part by this request.
            :param instantiatesUri: A URL referencing an externally defined protocol, guideline, orderset or other
        definition that is adhered to in whole or in part by this request.
            :param basedOn: A plan, proposal or order that is fulfilled in whole or in part by this
        request.
            :param replaces: Completed or terminated request(s) whose function is taken by this new
        request.
            :param groupIdentifier: A shared identifier common to all requests that were authorized more or less
        simultaneously by a single author, representing the identifier of the
        requisition, prescription or similar form.
            :param status: The current state of the request. For request groups, the status reflects the
        status of all the requests in the group.
            :param intent: Indicates the level of authority/intentionality associated with the request
        and where the request fits into the workflow chain.
            :param priority: Indicates how quickly the request should be addressed with respect to other
        requests.
            :param code: A code that identifies what the overall request group is.
            :param subject: The subject for which the request group was created.
            :param encounter: Describes the context of the request group, if any.
            :param authoredOn: Indicates when the request group was created.
            :param author: Provides a reference to the author of the request group.
            :param reasonCode: Describes the reason for the request group in coded or textual form.
            :param reasonReference: Indicates another resource whose existence justifies this request group.
            :param note: Provides a mechanism to communicate additional information about the response.
            :param action: The actions, if any, produced by the evaluation of the artifact.
        """
        super().__init__(
            resourceType="RequestGroup",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            instantiatesCanonical=instantiatesCanonical,
            instantiatesUri=instantiatesUri,
            basedOn=basedOn,
            replaces=replaces,
            groupIdentifier=groupIdentifier,
            status=status,
            intent=intent,
            priority=priority,
            code=code,
            subject=subject,
            encounter=encounter,
            authoredOn=authoredOn,
            author=author,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            note=note,
            action=action,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return RequestGroupSchema.get_schema(include_extension=include_extension)
