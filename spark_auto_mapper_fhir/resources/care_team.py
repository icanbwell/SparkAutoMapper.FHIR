from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.careteam import CareTeamSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (CareTeamStatus)
    from spark_auto_mapper_fhir.value_sets.care_team_status import CareTeamStatusCode

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.care_team_category import (
        CareTeamCategoryCode,
    )

    # End Import for CodeableConcept for category
    # name (string)
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # participant (CareTeam.Participant)
    from spark_auto_mapper_fhir.backbone_elements.care_team_participant import (
        CareTeamParticipant,
    )

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindingsCode,
    )

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition

    # managingOrganization (Reference)
    # Imports for References for managingOrganization
    from spark_auto_mapper_fhir.resources.organization import Organization

    # telecom (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CareTeam(FhirResourceBase):
    """
    CareTeam
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: Optional[CareTeamStatusCode] = None,
        category: Optional[FhirList[CodeableConcept[CareTeamCategoryCode]]] = None,
        name: Optional[FhirString] = None,
        subject: Optional[Reference[Union[Patient, Group]]] = None,
        encounter: Optional[Reference[Union[Encounter]]] = None,
        period: Optional[Period] = None,
        participant: Optional[FhirList[CareTeamParticipant]] = None,
        reasonCode: Optional[
            FhirList[CodeableConcept[SNOMEDCTClinicalFindingsCode]]
        ] = None,
        reasonReference: Optional[FhirList[Reference[Union[Condition]]]] = None,
        managingOrganization: Optional[FhirList[Reference[Union[Organization]]]] = None,
        telecom: Optional[FhirList[ContactPoint]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifiers assigned to this care team by the performer or other
        systems which remain constant as the resource is updated and propagates from
        server to server.
            :param status: Indicates the current state of the care team.
            :param category: Identifies what kind of team.  This is to support differentiation between
        multiple co-existing teams, such as care plan team, episode of care team,
        longitudinal care team.
            :param name: A label for human use intended to distinguish like teams.  E.g. the "red" vs.
        "green" trauma teams.
            :param subject: Identifies the patient or group whose intended care is handled by the team.
            :param encounter: The Encounter during which this CareTeam was created or to which the creation
        of this record is tightly associated.
            :param period: Indicates when the team did (or is intended to) come into effect and end.
            :param participant: Identifies all people and organizations who are expected to be involved in the
        care team.
            :param reasonCode: Describes why the care team exists.
            :param reasonReference: Condition(s) that this care team addresses.
            :param managingOrganization: The organization responsible for the care team.
            :param telecom: A central contact detail for the care team (that applies to all members).
            :param note: Comments made about the CareTeam.
        """
        super().__init__(
            resourceType="CareTeam",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            category=category,
            name=name,
            subject=subject,
            encounter=encounter,
            period=period,
            participant=participant,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            managingOrganization=managingOrganization,
            telecom=telecom,
            note=note,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CareTeamSchema.get_schema(include_extension=include_extension)
