from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.valueset import ValueSetSchema

if TYPE_CHECKING:
    pass
    # url (uri)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # version (string)
    # name (string)
    # title (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # experimental (boolean)
    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # jurisdiction (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.jurisdiction_value_set import (
        JurisdictionValueSetCode,
    )

    # End Import for CodeableConcept for jurisdiction
    # immutable (boolean)
    # purpose (markdown)
    # copyright (markdown)
    # compose (ValueSet.Compose)
    from spark_auto_mapper_fhir.backbone_elements.value_set_compose import (
        ValueSetCompose,
    )

    # expansion (ValueSet.Expansion)
    from spark_auto_mapper_fhir.backbone_elements.value_set_expansion import (
        ValueSetExpansion,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ValueSet(FhirResourceBase):
    """
    ValueSet
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        url: Optional[FhirUri] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        version: Optional[FhirString] = None,
        name: Optional[FhirString] = None,
        title: Optional[FhirString] = None,
        status: PublicationStatusCode,
        experimental: Optional[FhirBoolean] = None,
        date: Optional[FhirDateTime] = None,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        jurisdiction: Optional[
            FhirList[CodeableConcept[JurisdictionValueSetCode]]
        ] = None,
        immutable: Optional[FhirBoolean] = None,
        purpose: Optional[FhirMarkdown] = None,
        copyright: Optional[FhirMarkdown] = None,
        compose: Optional[ValueSetCompose] = None,
        expansion: Optional[ValueSetExpansion] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param url: An absolute URI that is used to identify this value set when it is referenced
        in a specification, model, design or an instance; also called its canonical
        identifier. This SHOULD be globally unique and SHOULD be a literal address at
        which at which an authoritative instance of this value set is (or will be)
        published. This URL can be the target of a canonical reference. It SHALL
        remain the same when the value set is stored on different servers.
            :param identifier: A formal identifier that is used to identify this value set when it is
        represented in other formats, or referenced in a specification, model, design
        or an instance.
            :param version: The identifier that is used to identify this version of the value set when it
        is referenced in a specification, model, design or instance. This is an
        arbitrary value managed by the value set author and is not expected to be
        globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
        managed version is not available. There is also no expectation that versions
        can be placed in a lexicographical sequence.
            :param name: A natural language name identifying the value set. This name should be usable
        as an identifier for the module by machine processing applications such as
        code generation.
            :param title: A short, descriptive, user-friendly title for the value set.
            :param status: The status of this value set. Enables tracking the life-cycle of the content.
        The status of the value set applies to the value set definition
        (ValueSet.compose) and the associated ValueSet metadata. Expansions do not
        have a state.
            :param experimental: A Boolean value to indicate that this value set is authored for testing
        purposes (or education/evaluation/marketing) and is not intended to be used
        for genuine usage.
            :param date: The date (and optionally time) when the value set was created or revised (e.g.
        the 'content logical definition').
            :param publisher: The name of the organization or individual that published the value set.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param description: A free text natural language description of the value set from a consumer's
        perspective. The textual description specifies the span of meanings for
        concepts to be included within the Value Set Expansion, and also may specify
        the intended use and limitations of the Value Set.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate value set
        instances.
            :param jurisdiction: A legal or geographic region in which the value set is intended to be used.
            :param immutable: If this is set to 'true', then no new versions of the content logical
        definition can be created.  Note: Other metadata might still change.
            :param purpose: Explanation of why this value set is needed and why it has been designed as it
        has.
            :param copyright: A copyright statement relating to the value set and/or its contents. Copyright
        statements are generally legal restrictions on the use and publishing of the
        value set.
            :param compose: A set of criteria that define the contents of the value set by including or
        excluding codes selected from the specified code system(s) that the value set
        draws from. This is also known as the Content Logical Definition (CLD).
            :param expansion: A value set can also be "expanded", where the value set is turned into a
        simple collection of enumerated codes. This element holds the expansion, if it
        has been performed.
        """
        super().__init__(
            resourceType="ValueSet",
            id_=id_,
            meta=meta,
            extension=extension,
            url=url,
            identifier=identifier,
            version=version,
            name=name,
            title=title,
            status=status,
            experimental=experimental,
            date=date,
            publisher=publisher,
            contact=contact,
            description=description,
            useContext=useContext,
            jurisdiction=jurisdiction,
            immutable=immutable,
            purpose=purpose,
            copyright=copyright,
            compose=compose,
            expansion=expansion,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ValueSetSchema.get_schema(include_extension=include_extension)
