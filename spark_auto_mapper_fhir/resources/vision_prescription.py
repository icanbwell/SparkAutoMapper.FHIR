from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.visionprescription import VisionPrescriptionSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FinancialResourceStatusCodes)
    from spark_auto_mapper_fhir.value_sets.financial_resource_status_codes import (
        FinancialResourceStatusCodesCode,
    )

    # created (dateTime)
    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # dateWritten (dateTime)
    # prescriber (Reference)
    # Imports for References for prescriber
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # lensSpecification (VisionPrescription.LensSpecification)
    from spark_auto_mapper_fhir.backbone_elements.vision_prescription_lens_specification import (
        VisionPrescriptionLensSpecification,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VisionPrescription(FhirResourceBase):
    """
    VisionPrescription
        An authorization for the provision of glasses and/or contact lenses to a
    patient.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: FinancialResourceStatusCodesCode,
        created: FhirDateTime,
        patient: Reference[Union[Patient]],
        encounter: Optional[Reference[Union[Encounter]]] = None,
        dateWritten: FhirDateTime,
        prescriber: Reference[Union[Practitioner, PractitionerRole]],
        lensSpecification: FhirList[VisionPrescriptionLensSpecification],
    ) -> None:
        """
            An authorization for the provision of glasses and/or contact lenses to a
        patient.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this vision prescription.
            :param status: The status of the resource instance.
            :param created: The date this resource was created.
            :param patient: A resource reference to the person to whom the vision prescription applies.
            :param encounter: A reference to a resource that identifies the particular occurrence of contact
        between patient and health care provider during which the prescription was
        issued.
            :param dateWritten: The date (and perhaps time) when the prescription was written.
            :param prescriber: The healthcare professional responsible for authorizing the prescription.
            :param lensSpecification: Contain the details of  the individual lens specifications and serves as the
        authorization for the fullfillment by certified professionals.
        """
        super().__init__(
            resourceType="VisionPrescription",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            created=created,
            patient=patient,
            encounter=encounter,
            dateWritten=dateWritten,
            prescriber=prescriber,
            lensSpecification=lensSpecification,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return VisionPrescriptionSchema.get_schema(include_extension=include_extension)
