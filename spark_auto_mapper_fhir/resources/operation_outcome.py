from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.operationoutcome import OperationOutcomeSchema

if TYPE_CHECKING:
    pass
    # issue (OperationOutcome.Issue)
    from spark_auto_mapper_fhir.backbone_elements.operation_outcome_issue import (
        OperationOutcomeIssue,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationOutcome(FhirResourceBase):
    """
    OperationOutcome
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        issue: FhirList[OperationOutcomeIssue],
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param issue: An error, warning, or information message that results from a system action.
        """
        super().__init__(
            resourceType="OperationOutcome",
            id_=id_,
            meta=meta,
            extension=extension,
            issue=issue,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return OperationOutcomeSchema.get_schema(include_extension=include_extension)
