from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.coverage import CoverageSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FinancialResourceStatusCodes)
    from spark_auto_mapper_fhir.value_sets.financial_resource_status_codes import (
        FinancialResourceStatusCodesCode,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.coverage_class_codes import (
        CoverageClassCodesCode,
    )

    # End Import for CodeableConcept for type_
    # policyHolder (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for policyHolder
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.organization import Organization

    # subscriber (Reference)
    # Imports for References for subscriber
    # subscriberId (string)
    # beneficiary (Reference)
    # Imports for References for beneficiary
    # dependent (string)
    # relationship (CodeableConcept)
    # Import for CodeableConcept for relationship
    from spark_auto_mapper_fhir.value_sets.subscriber_relationship_codes import (
        SubscriberRelationshipCodesCode,
    )

    # End Import for CodeableConcept for relationship
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # payor (Reference)
    # Imports for References for payor
    # class_ (Coverage.Class)
    from spark_auto_mapper_fhir.backbone_elements.coverage_class import CoverageClass

    # order (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # network (string)
    # costToBeneficiary (Coverage.CostToBeneficiary)
    from spark_auto_mapper_fhir.backbone_elements.coverage_cost_to_beneficiary import (
        CoverageCostToBeneficiary,
    )

    # subrogation (boolean)
    # contract (Reference)
    # Imports for References for contract
    from spark_auto_mapper_fhir.resources.contract import Contract


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Coverage(FhirResourceBase):
    """
    Coverage
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: FinancialResourceStatusCodesCode,
        type_: Optional[CodeableConcept[CoverageClassCodesCode]] = None,
        policyHolder: Optional[
            Reference[Union[Patient, RelatedPerson, Organization]]
        ] = None,
        subscriber: Optional[Reference[Union[Patient, RelatedPerson]]] = None,
        subscriberId: Optional[FhirString] = None,
        beneficiary: Reference[Union[Patient]],
        dependent: Optional[FhirString] = None,
        relationship: Optional[CodeableConcept[SubscriberRelationshipCodesCode]] = None,
        period: Optional[Period] = None,
        payor: FhirList[Reference[Union[Organization, Patient, RelatedPerson]]],
        class_: Optional[FhirList[CoverageClass]] = None,
        order: Optional[FhirPositiveInt] = None,
        network: Optional[FhirString] = None,
        costToBeneficiary: Optional[FhirList[CoverageCostToBeneficiary]] = None,
        subrogation: Optional[FhirBoolean] = None,
        contract: Optional[FhirList[Reference[Union[Contract]]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this coverage.
            :param status: The status of the resource instance.
            :param type_: The type of coverage: social program, medical plan, accident coverage (workers
        compensation, auto), group health or payment by an individual or organization.
            :param policyHolder: The party who 'owns' the insurance policy.
            :param subscriber: The party who has signed-up for or 'owns' the contractual relationship to the
        policy or to whom the benefit of the policy for services rendered to them or
        their family is due.
            :param subscriberId: The insurer assigned ID for the Subscriber.
            :param beneficiary: The party who benefits from the insurance coverage; the patient when products
        and/or services are provided.
            :param dependent: A unique identifier for a dependent under the coverage.
            :param relationship: The relationship of beneficiary (patient) to the subscriber.
            :param period: Time period during which the coverage is in force. A missing start date
        indicates the start date isn't known, a missing end date means the coverage is
        continuing to be in force.
            :param payor: The program or plan underwriter or payor including both insurance and non-
        insurance agreements, such as patient-pay agreements.
            :param class_: A suite of underwriter specific classifiers.
            :param order: The order of applicability of this coverage relative to other coverages which
        are currently in force. Note, there may be gaps in the numbering and this does
        not imply primary, secondary etc. as the specific positioning of coverages
        depends upon the episode of care.
            :param network: The insurer-specific identifier for the insurer-defined network of providers
        to which the beneficiary may seek treatment which will be covered at the 'in-
        network' rate, otherwise 'out of network' terms and conditions apply.
            :param costToBeneficiary: A suite of codes indicating the cost category and associated amount which have
        been detailed in the policy and may have been  included on the health card.
            :param subrogation: When 'subrogation=true' this insurance instance has been included not for
        adjudication but to provide insurers with the details to recover costs.
            :param contract: The policy(s) which constitute this insurance coverage.
        """
        super().__init__(
            resourceType="Coverage",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            type_=type_,
            policyHolder=policyHolder,
            subscriber=subscriber,
            subscriberId=subscriberId,
            beneficiary=beneficiary,
            dependent=dependent,
            relationship=relationship,
            period=period,
            payor=payor,
            class_=class_,
            order=order,
            network=network,
            costToBeneficiary=costToBeneficiary,
            subrogation=subrogation,
            contract=contract,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CoverageSchema.get_schema(include_extension=include_extension)
