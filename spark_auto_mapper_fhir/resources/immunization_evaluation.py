from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.immunizationevaluation import (
    ImmunizationEvaluationSchema,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.immunization_evaluation_status_codes import (
        ImmunizationEvaluationStatusCodes,
    )
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.complex_types.date_time import FhirDateTime
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for authority
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for targetDisease
    from spark_auto_mapper_fhir.complex_types.evaluation_target_disease import (
        EvaluationTargetDisease,
    )
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for immunizationEvent
    from spark_auto_mapper_fhir.resources.immunization import Immunization
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for doseStatus
    from spark_auto_mapper_fhir.complex_types.evaluation_dose_status import (
        EvaluationDoseStatus,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for doseStatusReason
    from spark_auto_mapper_fhir.complex_types.evaluation_dose_status_reason import (
        EvaluationDoseStatusReason,
    )
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.string import FhirString


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationEvaluation(FhirResourceBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ImmunizationEvaluationStatusCodes,
        patient: Reference[Union[Patient]],
        date: Optional[FhirDateTime] = None,
        authority: Optional[Reference[Union[Organization]]] = None,
        targetDisease: CodeableConcept[EvaluationTargetDisease],
        immunizationEvent: Reference[Union[Immunization]],
        doseStatus: CodeableConcept[EvaluationDoseStatus],
        doseStatusReason: Optional[
            FhirList[CodeableConcept[EvaluationDoseStatusReason]]
        ] = None,
        description: Optional[FhirString] = None,
        series: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this immunization evaluation record.
            :param status: Indicates the current status of the evaluation of the vaccination
        administration event.
            :param patient: The individual for whom the evaluation is being done.
            :param date: The date the evaluation of the vaccine administration event was performed.
            :param authority: Indicates the authority who published the protocol (e.g. ACIP).
            :param targetDisease: The vaccine preventable disease the dose is being evaluated against.
            :param immunizationEvent: The vaccine administration event being evaluated.
            :param doseStatus: Indicates if the dose is valid or not valid with respect to the published
        recommendations.
            :param doseStatusReason: Provides an explanation as to why the vaccine administration event is valid or
        not relative to the published recommendations.
            :param description: Additional information about the evaluation.
            :param series: One possible path to achieve presumed immunity against a disease - within the
        context of an authority.
        """
        super().__init__(
            resourceType="ImmunizationEvaluation",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            patient=patient,
            date=date,
            authority=authority,
            targetDisease=targetDisease,
            immunizationEvent=immunizationEvent,
            doseStatus=doseStatus,
            doseStatusReason=doseStatusReason,
            description=description,
            series=series,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ImmunizationEvaluationSchema.get_schema(
            include_extension=include_extension
        )
