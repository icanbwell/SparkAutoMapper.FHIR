from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.immunizationevaluation import (
    ImmunizationEvaluationSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (ImmunizationEvaluationStatusCodes)
    from spark_auto_mapper_fhir.value_sets.immunization_evaluation_status_codes import (
        ImmunizationEvaluationStatusCodesCode,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # date (dateTime)
    # authority (Reference)
    # Imports for References for authority
    from spark_auto_mapper_fhir.resources.organization import Organization

    # targetDisease (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for targetDisease
    from spark_auto_mapper_fhir.value_sets.immunization_evaluation_target_disease_codes import (
        ImmunizationEvaluationTargetDiseaseCodesCode,
    )

    # End Import for CodeableConcept for targetDisease
    # immunizationEvent (Reference)
    # Imports for References for immunizationEvent
    from spark_auto_mapper_fhir.resources.immunization import Immunization

    # doseStatus (CodeableConcept)
    # Import for CodeableConcept for doseStatus
    from spark_auto_mapper_fhir.value_sets.immunization_evaluation_dose_status_codes import (
        ImmunizationEvaluationDoseStatusCodesCode,
    )

    # End Import for CodeableConcept for doseStatus
    # doseStatusReason (CodeableConcept)
    # Import for CodeableConcept for doseStatusReason
    from spark_auto_mapper_fhir.value_sets.immunization_evaluation_dose_status_reason_codes import (
        ImmunizationEvaluationDoseStatusReasonCodesCode,
    )

    # End Import for CodeableConcept for doseStatusReason
    # description (string)
    # series (string)
    # doseNumberPositiveInt (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # doseNumberString (string)
    # seriesDosesPositiveInt (positiveInt)
    # seriesDosesString (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationEvaluation(FhirResourceBase):
    """
    ImmunizationEvaluation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ImmunizationEvaluationStatusCodesCode,
        patient: Reference[Union[Patient]],
        date: Optional[FhirDateTime] = None,
        authority: Optional[Reference[Union[Organization]]] = None,
        targetDisease: CodeableConcept[ImmunizationEvaluationTargetDiseaseCodesCode],
        immunizationEvent: Reference[Union[Immunization]],
        doseStatus: CodeableConcept[ImmunizationEvaluationDoseStatusCodesCode],
        doseStatusReason: Optional[
            FhirList[CodeableConcept[ImmunizationEvaluationDoseStatusReasonCodesCode]]
        ] = None,
        description: Optional[FhirString] = None,
        series: Optional[FhirString] = None,
        doseNumberPositiveInt: Optional[FhirPositiveInt] = None,
        doseNumberString: Optional[FhirString] = None,
        seriesDosesPositiveInt: Optional[FhirPositiveInt] = None,
        seriesDosesString: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this immunization evaluation record.
            :param status: Indicates the current status of the evaluation of the vaccination
        administration event.
            :param patient: The individual for whom the evaluation is being done.
            :param date: The date the evaluation of the vaccine administration event was performed.
            :param authority: Indicates the authority who published the protocol (e.g. ACIP).
            :param targetDisease: The vaccine preventable disease the dose is being evaluated against.
            :param immunizationEvent: The vaccine administration event being evaluated.
            :param doseStatus: Indicates if the dose is valid or not valid with respect to the published
        recommendations.
            :param doseStatusReason: Provides an explanation as to why the vaccine administration event is valid or
        not relative to the published recommendations.
            :param description: Additional information about the evaluation.
            :param series: One possible path to achieve presumed immunity against a disease - within the
        context of an authority.
            :param doseNumberPositiveInt: None
            :param doseNumberString: None
            :param seriesDosesPositiveInt: None
            :param seriesDosesString: None
        """
        super().__init__(
            resourceType="ImmunizationEvaluation",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            patient=patient,
            date=date,
            authority=authority,
            targetDisease=targetDisease,
            immunizationEvent=immunizationEvent,
            doseStatus=doseStatus,
            doseStatusReason=doseStatusReason,
            description=description,
            series=series,
            doseNumberPositiveInt=doseNumberPositiveInt,
            doseNumberString=doseNumberString,
            seriesDosesPositiveInt=seriesDosesPositiveInt,
            seriesDosesString=seriesDosesString,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ImmunizationEvaluationSchema.get_schema(
            include_extension=include_extension
        )
