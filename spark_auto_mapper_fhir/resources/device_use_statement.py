from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.deviceusestatement import DeviceUseStatementSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # basedOn (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # status (DeviceUseStatementStatus)
    from spark_auto_mapper_fhir.value_sets.device_use_statement_status import (
        DeviceUseStatementStatusCode,
    )

    # subject (Reference)
    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # derivedFrom (Reference)
    # Imports for References for derivedFrom
    from spark_auto_mapper_fhir.resources.procedure import Procedure
    from spark_auto_mapper_fhir.resources.claim import Claim
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.questionnaire_response import (
        QuestionnaireResponse,
    )
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # timingTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # timingPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # timingDateTime (dateTime)
    # recordedOn (dateTime)
    # source (Reference)
    # Imports for References for source
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # device (Reference)
    # Imports for References for device
    from spark_auto_mapper_fhir.resources.device import Device

    # reasonCode (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.media import Media

    # bodySite (CodeableConcept)
    # Import for CodeableConcept for bodySite
    from spark_auto_mapper_fhir.value_sets.snomedct_body_structures import (
        SNOMEDCTBodyStructuresCode,
    )

    # End Import for CodeableConcept for bodySite
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceUseStatement(FhirResourceBase):
    """
    DeviceUseStatement
    deviceusestatement.xsd
        A record of a device being used by a patient where the record is the result of
    a report from the patient or another clinician.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        basedOn: Optional[FhirList[Reference[ServiceRequest]]] = None,
        status: DeviceUseStatementStatusCode,
        subject: Reference[Union[Patient, Group]],
        derivedFrom: Optional[
            FhirList[
                Reference[
                    Union[
                        ServiceRequest,
                        Procedure,
                        Claim,
                        Observation,
                        QuestionnaireResponse,
                        DocumentReference,
                    ]
                ]
            ]
        ] = None,
        timingTiming: Optional[Timing] = None,
        timingPeriod: Optional[Period] = None,
        timingDateTime: Optional[FhirDateTime] = None,
        recordedOn: Optional[FhirDateTime] = None,
        source: Optional[
            Reference[Union[Patient, Practitioner, PractitionerRole, RelatedPerson]]
        ] = None,
        device: Reference[Device],
        reasonCode: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[
                        Condition,
                        Observation,
                        DiagnosticReport,
                        DocumentReference,
                        Media,
                    ]
                ]
            ]
        ] = None,
        bodySite: Optional[CodeableConcept[SNOMEDCTBodyStructuresCode]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            A record of a device being used by a patient where the record is the result of
        a report from the patient or another clinician.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: An external identifier for this statement such as an IRI.
            :param basedOn: A plan, proposal or order that is fulfilled in whole or in part by this
        DeviceUseStatement.
            :param status: A code representing the patient or other source's judgment about the state of
        the device used that this statement is about.  Generally this will be active
        or completed.
            :param subject: The patient who used the device.
            :param derivedFrom: Allows linking the DeviceUseStatement to the underlying Request, or to other
        information that supports or is used to derive the DeviceUseStatement.
            :param timingTiming: None
            :param timingPeriod: None
            :param timingDateTime: None
            :param recordedOn: The time at which the statement was made/recorded.
            :param source: Who reported the device was being used by the patient.
            :param device: The details of the device used.
            :param reasonCode: Reason or justification for the use of the device.
            :param reasonReference: Indicates another resource whose existence justifies this DeviceUseStatement.
            :param bodySite: Indicates the anotomic location on the subject's body where the device was
        used ( i.e. the target).
            :param note: Details about the device statement that were not represented at all or
        sufficiently in one of the attributes provided in a class. These may include
        for example a comment, an instruction, or a note associated with the
        statement.
        """
        super().__init__(
            resourceType="DeviceUseStatement",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            basedOn=basedOn,
            status=status,
            subject=subject,
            derivedFrom=derivedFrom,
            timingTiming=timingTiming,
            timingPeriod=timingPeriod,
            timingDateTime=timingDateTime,
            recordedOn=recordedOn,
            source=source,
            device=device,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            bodySite=bodySite,
            note=note,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return DeviceUseStatementSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
