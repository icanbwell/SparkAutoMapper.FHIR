from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.capabilitystatement import (
    CapabilityStatementSchema,
)

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # url (uri)
    # version (string)
    # name (string)
    # title (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # experimental (boolean)
    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # jurisdiction (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.jurisdiction_value_set import (
        JurisdictionValueSetCode,
    )

    # End Import for CodeableConcept for jurisdiction
    # purpose (markdown)
    # copyright (markdown)
    # kind (CapabilityStatementKind)
    from spark_auto_mapper_fhir.value_sets.capability_statement_kind import (
        CapabilityStatementKindCode,
    )

    # instantiates (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # imports (canonical)
    # software (CapabilityStatement.Software)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_software import (
        CapabilityStatementSoftware,
    )

    # implementation (CapabilityStatement.Implementation)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_implementation import (
        CapabilityStatementImplementation,
    )

    # fhirVersion (FHIRVersion)
    from spark_auto_mapper_fhir.value_sets.fhir_version import FHIRVersionCode

    # format (Mime Types)
    from spark_auto_mapper_fhir.value_sets.mime_types import MimeTypesCode

    # patchFormat (Mime Types)
    # implementationGuide (canonical)
    # rest (CapabilityStatement.Rest)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_rest import (
        CapabilityStatementRest,
    )

    # messaging (CapabilityStatement.Messaging)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_messaging import (
        CapabilityStatementMessaging,
    )

    # document (CapabilityStatement.Document)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_document import (
        CapabilityStatementDocument,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatement(FhirResourceBase):
    """
    CapabilityStatement
    capabilitystatement.xsd
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR
    Server for a particular version of FHIR that may be used as a statement of
    actual server functionality or a statement of required or desired server
    implementation.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        url: Optional[FhirUri] = None,
        version: Optional[FhirString] = None,
        name: Optional[FhirString] = None,
        title: Optional[FhirString] = None,
        status: PublicationStatusCode,
        experimental: Optional[FhirBoolean] = None,
        date: FhirDateTime,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        jurisdiction: Optional[
            FhirList[CodeableConcept[JurisdictionValueSetCode]]
        ] = None,
        purpose: Optional[FhirMarkdown] = None,
        copyright: Optional[FhirMarkdown] = None,
        kind: CapabilityStatementKindCode,
        instantiates: Optional[FhirList[FhirCanonical]] = None,
        imports: Optional[FhirList[FhirCanonical]] = None,
        software: Optional[CapabilityStatementSoftware] = None,
        implementation: Optional[CapabilityStatementImplementation] = None,
        fhirVersion: FHIRVersionCode,
        format: FhirList[MimeTypesCode],
        patchFormat: Optional[FhirList[MimeTypesCode]] = None,
        implementationGuide: Optional[FhirList[FhirCanonical]] = None,
        rest: Optional[FhirList[CapabilityStatementRest]] = None,
        messaging: Optional[FhirList[CapabilityStatementMessaging]] = None,
        document: Optional[FhirList[CapabilityStatementDocument]] = None,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param url: An absolute URI that is used to identify this capability statement when it is
        referenced in a specification, model, design or an instance; also called its
        canonical identifier. This SHOULD be globally unique and SHOULD be a literal
        address at which at which an authoritative instance of this capability
        statement is (or will be) published. This URL can be the target of a canonical
        reference. It SHALL remain the same when the capability statement is stored on
        different servers.
            :param version: The identifier that is used to identify this version of the capability
        statement when it is referenced in a specification, model, design or instance.
        This is an arbitrary value managed by the capability statement author and is
        not expected to be globally unique. For example, it might be a timestamp (e.g.
        yyyymmdd) if a managed version is not available. There is also no expectation
        that versions can be placed in a lexicographical sequence.
            :param name: A natural language name identifying the capability statement. This name should
        be usable as an identifier for the module by machine processing applications
        such as code generation.
            :param title: A short, descriptive, user-friendly title for the capability statement.
            :param status: The status of this capability statement. Enables tracking the life-cycle of
        the content.
            :param experimental: A Boolean value to indicate that this capability statement is authored for
        testing purposes (or education/evaluation/marketing) and is not intended to be
        used for genuine usage.
            :param date: The date  (and optionally time) when the capability statement was published.
        The date must change when the business version changes and it must change if
        the status code changes. In addition, it should change when the substantive
        content of the capability statement changes.
            :param publisher: The name of the organization or individual that published the capability
        statement.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param description: A free text natural language description of the capability statement from a
        consumer's perspective. Typically, this is used when the capability statement
        describes a desired rather than an actual solution, for example as a formal
        expression of requirements as part of an RFP.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate capability
        statement instances.
            :param jurisdiction: A legal or geographic region in which the capability statement is intended to
        be used.
            :param purpose: Explanation of why this capability statement is needed and why it has been
        designed as it has.
            :param copyright: A copyright statement relating to the capability statement and/or its
        contents. Copyright statements are generally legal restrictions on the use and
        publishing of the capability statement.
            :param kind: The way that this statement is intended to be used, to describe an actual
        running instance of software, a particular product (kind, not instance of
        software) or a class of implementation (e.g. a desired purchase).
            :param instantiates: Reference to a canonical URL of another CapabilityStatement that this software
        implements. This capability statement is a published API description that
        corresponds to a business service. The server may actually implement a subset
        of the capability statement it claims to implement, so the capability
        statement must specify the full capability details.
            :param imports: Reference to a canonical URL of another CapabilityStatement that this software
        adds to. The capability statement automatically includes everything in the
        other statement, and it is not duplicated, though the server may repeat the
        same resources, interactions and operations to add additional details to them.
            :param software: Software that is covered by this capability statement.  It is used when the
        capability statement describes the capabilities of a particular software
        version, independent of an installation.
            :param implementation: Identifies a specific implementation instance that is described by the
        capability statement - i.e. a particular installation, rather than the
        capabilities of a software program.
            :param fhirVersion: The version of the FHIR specification that this CapabilityStatement describes
        (which SHALL be the same as the FHIR version of the CapabilityStatement
        itself). There is no default value.
            :param format: A list of the formats supported by this implementation using their content
        types.
            :param patchFormat: A list of the patch formats supported by this implementation using their
        content types.
            :param implementationGuide: A list of implementation guides that the server does (or should) support in
        their entirety.
            :param rest: A definition of the restful capabilities of the solution, if any.
            :param messaging: A description of the messaging capabilities of the solution.
            :param document: A document definition.
        """
        super().__init__(
            resourceType="CapabilityStatement",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            url=url,
            version=version,
            name=name,
            title=title,
            status=status,
            experimental=experimental,
            date=date,
            publisher=publisher,
            contact=contact,
            description=description,
            useContext=useContext,
            jurisdiction=jurisdiction,
            purpose=purpose,
            copyright=copyright,
            kind=kind,
            instantiates=instantiates,
            imports=imports,
            software=software,
            implementation=implementation,
            fhirVersion=fhirVersion,
            format=format,
            patchFormat=patchFormat,
            implementationGuide=implementationGuide,
            rest=rest,
            messaging=messaging,
            document=document,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return CapabilityStatementSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
