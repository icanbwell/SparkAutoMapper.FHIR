from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.guidanceresponse import GuidanceResponseSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # requestIdentifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # identifier (Identifier)
    # moduleUri (uri)
    # moduleCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # moduleCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for moduleCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for moduleCodeableConcept
    # status (GuidanceResponseStatus)
    from spark_auto_mapper_fhir.value_sets.guidance_response_status import (
        GuidanceResponseStatusCode,
    )

    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # occurrenceDateTime (dateTime)
    # performer (Reference)
    # Imports for References for performer
    from spark_auto_mapper_fhir.resources.device import Device

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation

    # evaluationMessage (Reference)
    # Imports for References for evaluationMessage
    from spark_auto_mapper_fhir.resources.operation_outcome import OperationOutcome

    # outputParameters (Reference)
    # Imports for References for outputParameters
    from spark_auto_mapper_fhir.resources.parameters import Parameters

    # result (Reference)
    # Imports for References for result
    from spark_auto_mapper_fhir.resources.care_plan import CarePlan
    from spark_auto_mapper_fhir.resources.request_group import RequestGroup

    # dataRequirement (DataRequirement)
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GuidanceResponse(FhirResourceBase):
    """
    GuidanceResponse
    guidanceresponse.xsd
        A guidance response is the formal response to a guidance request, including
    any output parameters returned by the evaluation, as well as the description
    of any proposed actions to be taken.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        requestIdentifier: Optional[Identifier] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        moduleUri: Optional[FhirUri] = None,
        moduleCanonical: Optional[FhirCanonical] = None,
        moduleCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        status: GuidanceResponseStatusCode,
        subject: Optional[Reference[Union[Patient, Group]]] = None,
        encounter: Optional[Reference[Encounter]] = None,
        occurrenceDateTime: Optional[FhirDateTime] = None,
        performer: Optional[Reference[Device]] = None,
        reasonCode: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        note: Optional[FhirList[Annotation]] = None,
        evaluationMessage: Optional[FhirList[Reference[OperationOutcome]]] = None,
        outputParameters: Optional[Reference[Parameters]] = None,
        result: Optional[Reference[Union[CarePlan, RequestGroup]]] = None,
        dataRequirement: Optional[FhirList[DataRequirement]] = None,
    ) -> None:
        """
            A guidance response is the formal response to a guidance request, including
        any output parameters returned by the evaluation, as well as the description
        of any proposed actions to be taken.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param requestIdentifier: The identifier of the request associated with this response. If an identifier
        was given as part of the request, it will be reproduced here to enable the
        requester to more easily identify the response in a multi-request scenario.
            :param identifier: Allows a service to provide  unique, business identifiers for the response.
            :param moduleUri: None
            :param moduleCanonical: None
            :param moduleCodeableConcept: None
            :param status: The status of the response. If the evaluation is completed successfully, the
        status will indicate success. However, in order to complete the evaluation,
        the engine may require more information. In this case, the status will be
        data-required, and the response will contain a description of the additional
        required information. If the evaluation completed successfully, but the engine
        determines that a potentially more accurate response could be provided if more
        data was available, the status will be data-requested, and the response will
        contain a description of the additional requested information.
            :param subject: The patient for which the request was processed.
            :param encounter: The encounter during which this response was created or to which the creation
        of this record is tightly associated.
            :param occurrenceDateTime: Indicates when the guidance response was processed.
            :param performer: Provides a reference to the device that performed the guidance.
            :param reasonCode: Describes the reason for the guidance response in coded or textual form.
            :param reasonReference: Indicates the reason the request was initiated. This is typically provided as
        a parameter to the evaluation and echoed by the service, although for some use
        cases, such as subscription- or event-based scenarios, it may provide an
        indication of the cause for the response.
            :param note: Provides a mechanism to communicate additional information about the response.
            :param evaluationMessage: Messages resulting from the evaluation of the artifact or artifacts. As part
        of evaluating the request, the engine may produce informational or warning
        messages. These messages will be provided by this element.
            :param outputParameters: The output parameters of the evaluation, if any. Many modules will result in
        the return of specific resources such as procedure or communication requests
        that are returned as part of the operation result. However, modules may define
        specific outputs that would be returned as the result of the evaluation, and
        these would be returned in this element.
            :param result: The actions, if any, produced by the evaluation of the artifact.
            :param dataRequirement: If the evaluation could not be completed due to lack of information, or
        additional information would potentially result in a more accurate response,
        this element will a description of the data required in order to proceed with
        the evaluation. A subsequent request to the service should include this data.
        """
        super().__init__(
            resourceType="GuidanceResponse",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            requestIdentifier=requestIdentifier,
            identifier=identifier,
            moduleUri=moduleUri,
            moduleCanonical=moduleCanonical,
            moduleCodeableConcept=moduleCodeableConcept,
            status=status,
            subject=subject,
            encounter=encounter,
            occurrenceDateTime=occurrenceDateTime,
            performer=performer,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            note=note,
            evaluationMessage=evaluationMessage,
            outputParameters=outputParameters,
            result=result,
            dataRequirement=dataRequirement,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return GuidanceResponseSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
