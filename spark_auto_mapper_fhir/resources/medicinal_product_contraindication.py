from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductcontraindication import (
    MedicinalProductContraindicationSchema,
)

if TYPE_CHECKING:
    pass
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medication import Medication

    # disease (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for disease
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for disease
    # diseaseStatus (CodeableConcept)
    # Import for CodeableConcept for diseaseStatus
    # End Import for CodeableConcept for diseaseStatus
    # comorbidity (CodeableConcept)
    # Import for CodeableConcept for comorbidity
    # End Import for CodeableConcept for comorbidity
    # therapeuticIndication (Reference)
    # Imports for References for therapeuticIndication
    from spark_auto_mapper_fhir.resources.medicinal_product_indication import (
        MedicinalProductIndication,
    )

    # otherTherapy (MedicinalProductContraindication.OtherTherapy)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_contraindication_other_therapy import (
        MedicinalProductContraindicationOtherTherapy,
    )

    # population (Population)
    from spark_auto_mapper_fhir.backbone_elements.population import Population


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductContraindication(FhirResourceBase):
    """
    MedicinalProductContraindication
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        subject: Optional[
            FhirList[Reference[Union[MedicinalProduct, Medication]]]
        ] = None,
        disease: Optional[CodeableConcept[GenericTypeCode]] = None,
        diseaseStatus: Optional[CodeableConcept[GenericTypeCode]] = None,
        comorbidity: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        therapeuticIndication: Optional[
            FhirList[Reference[Union[MedicinalProductIndication]]]
        ] = None,
        otherTherapy: Optional[
            FhirList[MedicinalProductContraindicationOtherTherapy]
        ] = None,
        population: Optional[FhirList[Population]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param subject: The medication for which this is an indication.
            :param disease: The disease, symptom or procedure for the contraindication.
            :param diseaseStatus: The status of the disease or symptom for the contraindication.
            :param comorbidity: A comorbidity (concurrent condition) or coinfection.
            :param therapeuticIndication: Information about the use of the medicinal product in relation to other
        therapies as part of the indication.
            :param otherTherapy: Information about the use of the medicinal product in relation to other
        therapies described as part of the indication.
            :param population: The population group to which this applies.
        """
        super().__init__(
            resourceType="MedicinalProductContraindication",
            id_=id_,
            meta=meta,
            extension=extension,
            subject=subject,
            disease=disease,
            diseaseStatus=diseaseStatus,
            comorbidity=comorbidity,
            therapeuticIndication=therapeuticIndication,
            otherTherapy=otherTherapy,
            population=population,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductContraindicationSchema.get_schema(
            include_extension=include_extension
        )
