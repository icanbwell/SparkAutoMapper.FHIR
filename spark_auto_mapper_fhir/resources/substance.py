from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substance import SubstanceSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FHIRSubstanceStatus)
    from spark_auto_mapper_fhir.value_sets.fhir_substance_status import (
        FHIRSubstanceStatusCode,
    )

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.substance_category_codes import (
        SubstanceCategoryCodesCode,
    )

    # End Import for CodeableConcept for category
    # code (CodeableConcept)
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.substance_code import SubstanceCodeCode

    # End Import for CodeableConcept for code
    # description (string)
    # instance (Substance.Instance)
    from spark_auto_mapper_fhir.backbone_elements.substance_instance import (
        SubstanceInstance,
    )

    # ingredient (Substance.Ingredient)
    from spark_auto_mapper_fhir.backbone_elements.substance_ingredient import (
        SubstanceIngredient,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Substance(FhirResourceBase):
    """
    Substance
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: Optional[FHIRSubstanceStatusCode] = None,
        category: Optional[
            FhirList[CodeableConcept[SubstanceCategoryCodesCode]]
        ] = None,
        code: CodeableConcept[SubstanceCodeCode],
        description: Optional[FhirString] = None,
        instance: Optional[FhirList[SubstanceInstance]] = None,
        ingredient: Optional[FhirList[SubstanceIngredient]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique identifier for the substance.
            :param status: A code to indicate if the substance is actively used.
            :param category: A code that classifies the general type of substance.  This is used  for
        searching, sorting and display purposes.
            :param code: A code (or set of codes) that identify this substance.
            :param description: A description of the substance - its appearance, handling requirements, and
        other usage notes.
            :param instance: Substance may be used to describe a kind of substance, or a specific
        package/container of the substance: an instance.
            :param ingredient: A substance can be composed of other substances.
        """
        super().__init__(
            resourceType="Substance",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            category=category,
            code=code,
            description=description,
            instance=instance,
            ingredient=ingredient,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubstanceSchema.get_schema(include_extension=include_extension)
