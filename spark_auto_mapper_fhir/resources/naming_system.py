from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.namingsystem import NamingSystemSchema

if TYPE_CHECKING:
    pass
    # name (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # kind (NamingSystemType)
    from spark_auto_mapper_fhir.value_sets.naming_system_type import (
        NamingSystemTypeCode,
    )

    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # responsible (string)
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.identifier_type_codes import (
        IdentifierTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # jurisdiction (CodeableConcept)
    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.jurisdiction_value_set import (
        JurisdictionValueSetCode,
    )

    # End Import for CodeableConcept for jurisdiction
    # usage (string)
    # uniqueId (NamingSystem.UniqueId)
    from spark_auto_mapper_fhir.backbone_elements.naming_system_unique_id import (
        NamingSystemUniqueId,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class NamingSystem(FhirResourceBase):
    """
    NamingSystem
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirString,
        status: PublicationStatusCode,
        kind: NamingSystemTypeCode,
        date: FhirDateTime,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        responsible: Optional[FhirString] = None,
        type_: Optional[CodeableConcept[IdentifierTypeCodesCode]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        jurisdiction: Optional[
            FhirList[CodeableConcept[JurisdictionValueSetCode]]
        ] = None,
        usage: Optional[FhirString] = None,
        uniqueId: FhirList[NamingSystemUniqueId],
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param name: A natural language name identifying the naming system. This name should be
        usable as an identifier for the module by machine processing applications such
        as code generation.
            :param status: The status of this naming system. Enables tracking the life-cycle of the
        content.
            :param kind: Indicates the purpose for the naming system - what kinds of things does it
        make unique?
            :param date: The date  (and optionally time) when the naming system was published. The date
        must change when the business version changes and it must change if the status
        code changes. In addition, it should change when the substantive content of
        the naming system changes.
            :param publisher: The name of the organization or individual that published the naming system.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param responsible: The name of the organization that is responsible for issuing identifiers or
        codes for this namespace and ensuring their non-collision.
            :param type_: Categorizes a naming system for easier search by grouping related naming
        systems.
            :param description: A free text natural language description of the naming system from a
        consumer's perspective. Details about what the namespace identifies including
        scope, granularity, version labeling, etc.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate naming
        system instances.
            :param jurisdiction: A legal or geographic region in which the naming system is intended to be
        used.
            :param usage: Provides guidance on the use of the namespace, including the handling of
        formatting characters, use of upper vs. lower case, etc.
            :param uniqueId: Indicates how the system may be identified when referenced in electronic
        exchange.
        """
        super().__init__(
            resourceType="NamingSystem",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            status=status,
            kind=kind,
            date=date,
            publisher=publisher,
            contact=contact,
            responsible=responsible,
            type_=type_,
            description=description,
            useContext=useContext,
            jurisdiction=jurisdiction,
            usage=usage,
            uniqueId=uniqueId,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return NamingSystemSchema.get_schema(include_extension=include_extension)
