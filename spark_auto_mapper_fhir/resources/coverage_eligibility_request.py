from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.coverageeligibilityrequest import (
    CoverageEligibilityRequestSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FinancialResourceStatusCodes)
    from spark_auto_mapper_fhir.value_sets.financial_resource_status_codes import (
        FinancialResourceStatusCodesCode,
    )

    # priority (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for priority
    from spark_auto_mapper_fhir.value_sets.process_priority_codes import (
        ProcessPriorityCodesCode,
    )

    # End Import for CodeableConcept for priority
    # purpose (EligibilityRequestPurpose)
    from spark_auto_mapper_fhir.value_sets.eligibility_request_purpose import (
        EligibilityRequestPurposeCode,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # servicedDate (date)
    # servicedPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # created (dateTime)
    # enterer (Reference)
    # Imports for References for enterer
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # provider (Reference)
    # Imports for References for provider
    from spark_auto_mapper_fhir.resources.organization import Organization

    # insurer (Reference)
    # Imports for References for insurer
    # facility (Reference)
    # Imports for References for facility
    from spark_auto_mapper_fhir.resources.location import Location

    # supportingInfo (CoverageEligibilityRequest.SupportingInfo)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_request_supporting_info import (
        CoverageEligibilityRequestSupportingInfo,
    )

    # insurance (CoverageEligibilityRequest.Insurance)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_request_insurance import (
        CoverageEligibilityRequestInsurance,
    )

    # item (CoverageEligibilityRequest.Item)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_request_item import (
        CoverageEligibilityRequestItem,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityRequest(FhirResourceBase):
    """
    CoverageEligibilityRequest
        The CoverageEligibilityRequest provides patient and insurance coverage
    information to an insurer for them to respond, in the form of an
    CoverageEligibilityResponse, with information regarding whether the stated
    coverage is valid and in-force and optionally to provide the insurance details
    of the policy.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: FinancialResourceStatusCodesCode,
        priority: Optional[CodeableConcept[ProcessPriorityCodesCode]] = None,
        purpose: FhirList[EligibilityRequestPurposeCode],
        patient: Reference[Union[Patient]],
        servicedDate: Optional[FhirDate] = None,
        servicedPeriod: Optional[Period] = None,
        created: FhirDateTime,
        enterer: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        provider: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        insurer: Reference[Union[Organization]],
        facility: Optional[Reference[Union[Location]]] = None,
        supportingInfo: Optional[
            FhirList[CoverageEligibilityRequestSupportingInfo]
        ] = None,
        insurance: Optional[FhirList[CoverageEligibilityRequestInsurance]] = None,
        item: Optional[FhirList[CoverageEligibilityRequestItem]] = None,
    ) -> None:
        """
            The CoverageEligibilityRequest provides patient and insurance coverage
        information to an insurer for them to respond, in the form of an
        CoverageEligibilityResponse, with information regarding whether the stated
        coverage is valid and in-force and optionally to provide the insurance details
        of the policy.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this coverage eligiblity request.
            :param status: The status of the resource instance.
            :param priority: When the requestor expects the processor to complete processing.
            :param purpose: Code to specify whether requesting: prior authorization requirements for some
        service categories or billing codes; benefits for coverages specified or
        discovered; discovery and return of coverages for the patient; and/or
        validation that the specified coverage is in-force at the date/period
        specified or 'now' if not specified.
            :param patient: The party who is the beneficiary of the supplied coverage and for whom
        eligibility is sought.
            :param servicedDate: None
            :param servicedPeriod: None
            :param created: The date when this resource was created.
            :param enterer: Person who created the request.
            :param provider: The provider which is responsible for the request.
            :param insurer: The Insurer who issued the coverage in question and is the recipient of the
        request.
            :param facility: Facility where the services are intended to be provided.
            :param supportingInfo: Additional information codes regarding exceptions, special considerations, the
        condition, situation, prior or concurrent issues.
            :param insurance: Financial instruments for reimbursement for the health care products and
        services.
            :param item: Service categories or billable services for which benefit details and/or an
        authorization prior to service delivery may be required by the payor.
        """
        super().__init__(
            resourceType="CoverageEligibilityRequest",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            priority=priority,
            purpose=purpose,
            patient=patient,
            servicedDate=servicedDate,
            servicedPeriod=servicedPeriod,
            created=created,
            enterer=enterer,
            provider=provider,
            insurer=insurer,
            facility=facility,
            supportingInfo=supportingInfo,
            insurance=insurance,
            item=item,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CoverageEligibilityRequestSchema.get_schema(
            include_extension=include_extension
        )
