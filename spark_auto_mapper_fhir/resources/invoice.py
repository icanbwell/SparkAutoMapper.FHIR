from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.invoice import InvoiceSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (InvoiceStatus)
    from spark_auto_mapper_fhir.value_sets.invoice_status import InvoiceStatusCode

    # cancelledReason (string)
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # recipient (Reference)
    # Imports for References for recipient
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # date (dateTime)
    # participant (Invoice.Participant)
    from spark_auto_mapper_fhir.backbone_elements.invoice_participant import (
        InvoiceParticipant,
    )

    # issuer (Reference)
    # Imports for References for issuer
    # account (Reference)
    # Imports for References for account
    from spark_auto_mapper_fhir.resources.account import Account

    # lineItem (Invoice.LineItem)
    from spark_auto_mapper_fhir.backbone_elements.invoice_line_item import (
        InvoiceLineItem,
    )

    # totalPriceComponent (Invoice.PriceComponent)
    from spark_auto_mapper_fhir.backbone_elements.invoice_price_component import (
        InvoicePriceComponent,
    )

    # totalNet (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # totalGross (Money)
    # paymentTerms (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Invoice(FhirResourceBase):
    """
    Invoice
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: InvoiceStatusCode,
        cancelledReason: Optional[FhirString] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        subject: Optional[Reference[Union[Patient, Group]]] = None,
        recipient: Optional[
            Reference[Union[Organization, Patient, RelatedPerson]]
        ] = None,
        date: Optional[FhirDateTime] = None,
        participant: Optional[FhirList[InvoiceParticipant]] = None,
        issuer: Optional[Reference[Union[Organization]]] = None,
        account: Optional[Reference[Union[Account]]] = None,
        lineItem: Optional[FhirList[InvoiceLineItem]] = None,
        totalPriceComponent: Optional[FhirList[InvoicePriceComponent]] = None,
        totalNet: Optional[Money] = None,
        totalGross: Optional[Money] = None,
        paymentTerms: Optional[FhirMarkdown] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Identifier of this Invoice, often used for reference in correspondence about
        this invoice or for tracking of payments.
            :param status: The current state of the Invoice.
            :param cancelledReason: In case of Invoice cancellation a reason must be given (entered in error,
        superseded by corrected invoice etc.).
            :param type_: Type of Invoice depending on domain, realm an usage (e.g. internal/external,
        dental, preliminary).
            :param subject: The individual or set of individuals receiving the goods and services billed
        in this invoice.
            :param recipient: The individual or Organization responsible for balancing of this invoice.
            :param date: Date/time(s) of when this Invoice was posted.
            :param participant: Indicates who or what performed or participated in the charged service.
            :param issuer: The organizationissuing the Invoice.
            :param account: Account which is supposed to be balanced with this Invoice.
            :param lineItem: Each line item represents one charge for goods and services rendered. Details
        such as date, code and amount are found in the referenced ChargeItem resource.
            :param totalPriceComponent: The total amount for the Invoice may be calculated as the sum of the line
        items with surcharges/deductions that apply in certain conditions.  The
        priceComponent element can be used to offer transparency to the recipient of
        the Invoice of how the total price was calculated.
            :param totalNet: Invoice total , taxes excluded.
            :param totalGross: Invoice total, tax included.
            :param paymentTerms: Payment details such as banking details, period of payment, deductibles,
        methods of payment.
            :param note: Comments made about the invoice by the issuer, subject, or other participants.
        """
        super().__init__(
            resourceType="Invoice",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            cancelledReason=cancelledReason,
            type_=type_,
            subject=subject,
            recipient=recipient,
            date=date,
            participant=participant,
            issuer=issuer,
            account=account,
            lineItem=lineItem,
            totalPriceComponent=totalPriceComponent,
            totalNet=totalNet,
            totalGross=totalGross,
            paymentTerms=paymentTerms,
            note=note,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return InvoiceSchema.get_schema(include_extension=include_extension)
