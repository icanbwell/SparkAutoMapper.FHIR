from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.detectedissue import DetectedIssueSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (ObservationStatus)
    from spark_auto_mapper_fhir.value_sets.observation_status import (
        ObservationStatusCode,
    )

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.detected_issue_category import (
        DetectedIssueCategoryCode,
    )

    # End Import for CodeableConcept for code
    # severity (DetectedIssueSeverity)
    from spark_auto_mapper_fhir.value_sets.detected_issue_severity import (
        DetectedIssueSeverityCode,
    )

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # identifiedDateTime (dateTime)
    # identifiedPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # author (Reference)
    # Imports for References for author
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.device import Device

    # implicated (Reference)
    # Imports for References for implicated
    from spark_auto_mapper_fhir.resources.resource import Resource

    # evidence (DetectedIssue.Evidence)
    from spark_auto_mapper_fhir.backbone_elements.detected_issue_evidence import (
        DetectedIssueEvidence,
    )

    # detail (string)
    # reference (uri)
    # mitigation (DetectedIssue.Mitigation)
    from spark_auto_mapper_fhir.backbone_elements.detected_issue_mitigation import (
        DetectedIssueMitigation,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DetectedIssue(FhirResourceBase):
    """
    DetectedIssue
    detectedissue.xsd
        Indicates an actual or potential clinical issue with or between one or more
    active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
    Ineffective treatment frequency, Procedure-condition conflict, etc.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ObservationStatusCode,
        code: Optional[CodeableConcept[DetectedIssueCategoryCode]] = None,
        severity: Optional[DetectedIssueSeverityCode] = None,
        patient: Optional[Reference[Patient]] = None,
        identifiedDateTime: Optional[FhirDateTime] = None,
        identifiedPeriod: Optional[Period] = None,
        author: Optional[
            Reference[Union[Practitioner, PractitionerRole, Device]]
        ] = None,
        implicated: Optional[FhirList[Reference[Resource]]] = None,
        evidence: Optional[FhirList[DetectedIssueEvidence]] = None,
        detail: Optional[FhirString] = None,
        reference: Optional[FhirUri] = None,
        mitigation: Optional[FhirList[DetectedIssueMitigation]] = None,
    ) -> None:
        """
            Indicates an actual or potential clinical issue with or between one or more
        active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
        Ineffective treatment frequency, Procedure-condition conflict, etc.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Business identifier associated with the detected issue record.
            :param status: Indicates the status of the detected issue.
            :param code: Identifies the general type of issue identified.
            :param severity: Indicates the degree of importance associated with the identified issue based
        on the potential impact on the patient.
            :param patient: Indicates the patient whose record the detected issue is associated with.
            :param identifiedDateTime: None
            :param identifiedPeriod: None
            :param author: Individual or device responsible for the issue being raised.  For example, a
        decision support application or a pharmacist conducting a medication review.
            :param implicated: Indicates the resource representing the current activity or proposed activity
        that is potentially problematic.
            :param evidence: Supporting evidence or manifestations that provide the basis for identifying
        the detected issue such as a GuidanceResponse or MeasureReport.
            :param detail: A textual explanation of the detected issue.
            :param reference: The literature, knowledge-base or similar reference that describes the
        propensity for the detected issue identified.
            :param mitigation: Indicates an action that has been taken or is committed to reduce or eliminate
        the likelihood of the risk identified by the detected issue from manifesting.
        Can also reflect an observation of known mitigating factors that may
        reduce/eliminate the need for any action.
        """
        super().__init__(
            resourceType="DetectedIssue",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            status=status,
            code=code,
            severity=severity,
            patient=patient,
            identifiedDateTime=identifiedDateTime,
            identifiedPeriod=identifiedPeriod,
            author=author,
            implicated=implicated,
            evidence=evidence,
            detail=detail,
            reference=reference,
            mitigation=mitigation,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return DetectedIssueSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
