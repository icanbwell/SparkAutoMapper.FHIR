from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.clinicalimpression import ClinicalImpressionSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (ClinicalImpressionStatus)
    from spark_auto_mapper_fhir.value_sets.clinical_impression_status import (
        ClinicalImpressionStatusCode,
    )

    # statusReason (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for statusReason
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for statusReason
    # code (CodeableConcept)
    # Import for CodeableConcept for code
    # End Import for CodeableConcept for code
    # description (string)
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # effectiveDateTime (dateTime)
    # effectivePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # date (dateTime)
    # assessor (Reference)
    # Imports for References for assessor
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # previous (Reference)
    # Imports for References for previous
    # problem (Reference)
    # Imports for References for problem
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.allergy_intolerance import AllergyIntolerance

    # investigation (ClinicalImpression.Investigation)
    from spark_auto_mapper_fhir.backbone_elements.clinical_impression_investigation import (
        ClinicalImpressionInvestigation,
    )

    # protocol (uri)
    # summary (string)
    # finding (ClinicalImpression.Finding)
    from spark_auto_mapper_fhir.backbone_elements.clinical_impression_finding import (
        ClinicalImpressionFinding,
    )

    # prognosisCodeableConcept (CodeableConcept)
    # Import for CodeableConcept for prognosisCodeableConcept
    from spark_auto_mapper_fhir.value_sets.clinical_impression_prognosis import (
        ClinicalImpressionPrognosisCode,
    )

    # End Import for CodeableConcept for prognosisCodeableConcept
    # prognosisReference (Reference)
    # Imports for References for prognosisReference
    from spark_auto_mapper_fhir.resources.risk_assessment import RiskAssessment

    # supportingInfo (Reference)
    # Imports for References for supportingInfo
    from spark_auto_mapper_fhir.resources.resource import Resource

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClinicalImpression(FhirResourceBase):
    """
    ClinicalImpression
        A record of a clinical assessment performed to determine what problem(s) may
    affect the patient and before planning the treatments or management strategies
    that are best to manage a patient's condition. Assessments are often 1:1 with
    a clinical consultation / encounter,  but this varies greatly depending on the
    clinical workflow. This resource is called "ClinicalImpression" rather than
    "ClinicalAssessment" to avoid confusion with the recording of assessment tools
    such as Apgar score.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ClinicalImpressionStatusCode,
        statusReason: Optional[CodeableConcept[GenericTypeCode]] = None,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
        description: Optional[FhirString] = None,
        subject: Reference[Union[Patient, Group]],
        encounter: Optional[Reference[Union[Encounter]]] = None,
        effectiveDateTime: Optional[FhirDateTime] = None,
        effectivePeriod: Optional[Period] = None,
        date: Optional[FhirDateTime] = None,
        assessor: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        previous: Optional[Reference[Union[ClinicalImpression]]] = None,
        problem: Optional[
            FhirList[Reference[Union[Condition, AllergyIntolerance]]]
        ] = None,
        investigation: Optional[FhirList[ClinicalImpressionInvestigation]] = None,
        protocol: Optional[FhirList[FhirUri]] = None,
        summary: Optional[FhirString] = None,
        finding: Optional[FhirList[ClinicalImpressionFinding]] = None,
        prognosisCodeableConcept: Optional[
            FhirList[CodeableConcept[ClinicalImpressionPrognosisCode]]
        ] = None,
        prognosisReference: Optional[FhirList[Reference[Union[RiskAssessment]]]] = None,
        supportingInfo: Optional[FhirList[Reference[Union[Resource]]]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            A record of a clinical assessment performed to determine what problem(s) may
        affect the patient and before planning the treatments or management strategies
        that are best to manage a patient's condition. Assessments are often 1:1 with
        a clinical consultation / encounter,  but this varies greatly depending on the
        clinical workflow. This resource is called "ClinicalImpression" rather than
        "ClinicalAssessment" to avoid confusion with the recording of assessment tools
        such as Apgar score.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifiers assigned to this clinical impression by the performer or
        other systems which remain constant as the resource is updated and propagates
        from server to server.
            :param status: Identifies the workflow status of the assessment.
            :param statusReason: Captures the reason for the current state of the ClinicalImpression.
            :param code: Categorizes the type of clinical assessment performed.
            :param description: A summary of the context and/or cause of the assessment - why / where it was
        performed, and what patient events/status prompted it.
            :param subject: The patient or group of individuals assessed as part of this record.
            :param encounter: The Encounter during which this ClinicalImpression was created or to which the
        creation of this record is tightly associated.
            :param effectiveDateTime: None
            :param effectivePeriod: None
            :param date: Indicates when the documentation of the assessment was complete.
            :param assessor: The clinician performing the assessment.
            :param previous: A reference to the last assessment that was conducted on this patient.
        Assessments are often/usually ongoing in nature; a care provider (practitioner
        or team) will make new assessments on an ongoing basis as new data arises or
        the patient's conditions changes.
            :param problem: A list of the relevant problems/conditions for a patient.
            :param investigation: One or more sets of investigations (signs, symptoms, etc.). The actual
        grouping of investigations varies greatly depending on the type and context of
        the assessment. These investigations may include data generated during the
        assessment process, or data previously generated and recorded that is
        pertinent to the outcomes.
            :param protocol: Reference to a specific published clinical protocol that was followed during
        this assessment, and/or that provides evidence in support of the diagnosis.
            :param summary: A text summary of the investigations and the diagnosis.
            :param finding: Specific findings or diagnoses that were considered likely or relevant to
        ongoing treatment.
            :param prognosisCodeableConcept: Estimate of likely outcome.
            :param prognosisReference: RiskAssessment expressing likely outcome.
            :param supportingInfo: Information supporting the clinical impression.
            :param note: Commentary about the impression, typically recorded after the impression
        itself was made, though supplemental notes by the original author could also
        appear.
        """
        super().__init__(
            resourceType="ClinicalImpression",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            statusReason=statusReason,
            code=code,
            description=description,
            subject=subject,
            encounter=encounter,
            effectiveDateTime=effectiveDateTime,
            effectivePeriod=effectivePeriod,
            date=date,
            assessor=assessor,
            previous=previous,
            problem=problem,
            investigation=investigation,
            protocol=protocol,
            summary=summary,
            finding=finding,
            prognosisCodeableConcept=prognosisCodeableConcept,
            prognosisReference=prognosisReference,
            supportingInfo=supportingInfo,
            note=note,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ClinicalImpressionSchema.get_schema(include_extension=include_extension)
