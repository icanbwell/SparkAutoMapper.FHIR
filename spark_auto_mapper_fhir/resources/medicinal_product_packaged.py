from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductpackaged import (
    MedicinalProductPackagedSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct

    # description (string)
    # legalStatusOfSupply (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for legalStatusOfSupply
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for legalStatusOfSupply
    # marketingStatus (MarketingStatus)
    from spark_auto_mapper_fhir.backbone_elements.marketing_status import (
        MarketingStatus,
    )

    # marketingAuthorization (Reference)
    # Imports for References for marketingAuthorization
    from spark_auto_mapper_fhir.resources.medicinal_product_authorization import (
        MedicinalProductAuthorization,
    )

    # manufacturer (Reference)
    # Imports for References for manufacturer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # batchIdentifier (MedicinalProductPackaged.BatchIdentifier)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_packaged_batch_identifier import (
        MedicinalProductPackagedBatchIdentifier,
    )

    # packageItem (MedicinalProductPackaged.PackageItem)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_packaged_package_item import (
        MedicinalProductPackagedPackageItem,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductPackaged(FhirResourceBase):
    """
    MedicinalProductPackaged
        A medicinal product in a container or package.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        subject: Optional[FhirList[Reference[Union[MedicinalProduct]]]] = None,
        description: Optional[FhirString] = None,
        legalStatusOfSupply: Optional[CodeableConcept[GenericTypeCode]] = None,
        marketingStatus: Optional[FhirList[MarketingStatus]] = None,
        marketingAuthorization: Optional[
            Reference[Union[MedicinalProductAuthorization]]
        ] = None,
        manufacturer: Optional[FhirList[Reference[Union[Organization]]]] = None,
        batchIdentifier: Optional[
            FhirList[MedicinalProductPackagedBatchIdentifier]
        ] = None,
        packageItem: FhirList[MedicinalProductPackagedPackageItem],
    ) -> None:
        """
            A medicinal product in a container or package.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique identifier.
            :param subject: The product with this is a pack for.
            :param description: Textual description.
            :param legalStatusOfSupply: The legal status of supply of the medicinal product as classified by the
        regulator.
            :param marketingStatus: Marketing information.
            :param marketingAuthorization: Manufacturer of this Package Item.
            :param manufacturer: Manufacturer of this Package Item.
            :param batchIdentifier: Batch numbering.
            :param packageItem: A packaging item, as a contained for medicine, possibly with other packaging
        items within.
        """
        super().__init__(
            resourceType="MedicinalProductPackaged",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            subject=subject,
            description=description,
            legalStatusOfSupply=legalStatusOfSupply,
            marketingStatus=marketingStatus,
            marketingAuthorization=marketingAuthorization,
            manufacturer=manufacturer,
            batchIdentifier=batchIdentifier,
            packageItem=packageItem,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductPackagedSchema.get_schema(
            include_extension=include_extension
        )
