from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.paymentreconciliation import (
    PaymentReconciliationSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (FinancialResourceStatusCodes)
    from spark_auto_mapper_fhir.value_sets.financial_resource_status_codes import (
        FinancialResourceStatusCodesCode,
    )

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # created (dateTime)
    # paymentIssuer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for paymentIssuer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # request (Reference)
    # Imports for References for request
    from spark_auto_mapper_fhir.resources.task import Task

    # requestor (Reference)
    # Imports for References for requestor
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # outcome (ClaimProcessingCodes)
    from spark_auto_mapper_fhir.value_sets.claim_processing_codes import (
        ClaimProcessingCodesCode,
    )

    # disposition (string)
    # paymentDate (date)
    # paymentAmount (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # paymentIdentifier (Identifier)
    # detail (PaymentReconciliation.Detail)
    from spark_auto_mapper_fhir.backbone_elements.payment_reconciliation_detail import (
        PaymentReconciliationDetail,
    )

    # formCode (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for formCode
    from spark_auto_mapper_fhir.value_sets.form_codes import FormCodesCode

    # End Import for CodeableConcept for formCode
    # processNote (PaymentReconciliation.ProcessNote)
    from spark_auto_mapper_fhir.backbone_elements.payment_reconciliation_process_note import (
        PaymentReconciliationProcessNote,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PaymentReconciliation(FhirResourceBase):
    """
    PaymentReconciliation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: FinancialResourceStatusCodesCode,
        period: Optional[Period] = None,
        created: FhirDateTime,
        paymentIssuer: Optional[Reference[Union[Organization]]] = None,
        request: Optional[Reference[Union[Task]]] = None,
        requestor: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        outcome: Optional[ClaimProcessingCodesCode] = None,
        disposition: Optional[FhirString] = None,
        paymentDate: FhirDate,
        paymentAmount: Money,
        paymentIdentifier: Optional[Identifier] = None,
        detail: Optional[FhirList[PaymentReconciliationDetail]] = None,
        formCode: Optional[CodeableConcept[FormCodesCode]] = None,
        processNote: Optional[FhirList[PaymentReconciliationProcessNote]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this payment reconciliation.
            :param status: The status of the resource instance.
            :param period: The period of time for which payments have been gathered into this bulk
        payment for settlement.
            :param created: The date when the resource was created.
            :param paymentIssuer: The party who generated the payment.
            :param request: Original request resource reference.
            :param requestor: The practitioner who is responsible for the services rendered to the patient.
            :param outcome: The outcome of a request for a reconciliation.
            :param disposition: A human readable description of the status of the request for the
        reconciliation.
            :param paymentDate: The date of payment as indicated on the financial instrument.
            :param paymentAmount: Total payment amount as indicated on the financial instrument.
            :param paymentIdentifier: Issuer's unique identifier for the payment instrument.
            :param detail: Distribution of the payment amount for a previously acknowledged payable.
            :param formCode: A code for the form to be used for printing the content.
            :param processNote: A note that describes or explains the processing in a human readable form.
        """
        super().__init__(
            resourceType="PaymentReconciliation",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            period=period,
            created=created,
            paymentIssuer=paymentIssuer,
            request=request,
            requestor=requestor,
            outcome=outcome,
            disposition=disposition,
            paymentDate=paymentDate,
            paymentAmount=paymentAmount,
            paymentIdentifier=paymentIdentifier,
            detail=detail,
            formCode=formCode,
            processNote=processNote,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return PaymentReconciliationSchema.get_schema(
            include_extension=include_extension
        )
