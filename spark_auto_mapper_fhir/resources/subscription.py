from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.subscription import SubscriptionSchema

if TYPE_CHECKING:
    pass
    # status (SubscriptionStatus)
    from spark_auto_mapper_fhir.value_sets.subscription_status import (
        SubscriptionStatusCode,
    )

    # contact (ContactPoint)
    from spark_auto_mapper_fhir.complex_types.contact_point import ContactPoint

    # end (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # reason (string)
    # criteria (string)
    # error (string)
    # channel (Subscription.Channel)
    from spark_auto_mapper_fhir.backbone_elements.subscription_channel import (
        SubscriptionChannel,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Subscription(FhirResourceBase):
    """
    Subscription
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        status: SubscriptionStatusCode,
        contact: Optional[FhirList[ContactPoint]] = None,
        end: Optional[FhirInstant] = None,
        reason: FhirString,
        criteria: FhirString,
        error: Optional[FhirString] = None,
        channel: SubscriptionChannel,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param status: The status of the subscription, which marks the server state for managing the
        subscription.
            :param contact: Contact details for a human to contact about the subscription. The primary use
        of this for system administrator troubleshooting.
            :param end: The time for the server to turn the subscription off.
            :param reason: A description of why this subscription is defined.
            :param criteria: The rules that the server should use to determine when to generate
        notifications for this subscription.
            :param error: A record of the last error that occurred when the server processed a
        notification.
            :param channel: Details where to send notifications when resources are received that meet the
        criteria.
        """
        super().__init__(
            resourceType="Subscription",
            id_=id_,
            meta=meta,
            extension=extension,
            status=status,
            contact=contact,
            end=end,
            reason=reason,
            criteria=criteria,
            error=error,
            channel=channel,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubscriptionSchema.get_schema(include_extension=include_extension)
