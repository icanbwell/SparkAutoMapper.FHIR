from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.messageheader import MessageHeaderSchema

if TYPE_CHECKING:
    pass
    # destination (MessageHeader.Destination)
    from spark_auto_mapper_fhir.backbone_elements.message_header_destination import (
        MessageHeaderDestination,
    )

    # sender (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for sender
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # enterer (Reference)
    # Imports for References for enterer
    # author (Reference)
    # Imports for References for author
    # source (MessageHeader.Source)
    from spark_auto_mapper_fhir.backbone_elements.message_header_source import (
        MessageHeaderSource,
    )

    # responsible (Reference)
    # Imports for References for responsible
    # reason (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.value_sets.example_message_reason_codes import (
        ExampleMessageReasonCodesCode,
    )

    # End Import for CodeableConcept for reason
    # response (MessageHeader.Response)
    from spark_auto_mapper_fhir.backbone_elements.message_header_response import (
        MessageHeaderResponse,
    )

    # focus (Reference)
    # Imports for References for focus
    from spark_auto_mapper_fhir.resources.resource import Resource

    # definition (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # eventCoding (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for eventCoding
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for eventCoding
    # eventUri (uri)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MessageHeader(FhirResourceBase):
    """
    MessageHeader
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        destination: Optional[FhirList[MessageHeaderDestination]] = None,
        sender: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        enterer: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        author: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        source: MessageHeaderSource,
        responsible: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        reason: Optional[CodeableConcept[ExampleMessageReasonCodesCode]] = None,
        response: Optional[MessageHeaderResponse] = None,
        focus: Optional[FhirList[Reference[Union[Resource]]]] = None,
        definition: Optional[FhirCanonical] = None,
        eventCoding: Optional[Coding[GenericTypeCode]] = None,
        eventUri: Optional[FhirUri] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param destination: The destination application which the message is intended for.
            :param sender: Identifies the sending system to allow the use of a trust relationship.
            :param enterer: The person or device that performed the data entry leading to this message.
        When there is more than one candidate, pick the most proximal to the message.
        Can provide other enterers in extensions.
            :param author: The logical author of the message - the person or device that decided the
        described event should happen. When there is more than one candidate, pick the
        most proximal to the MessageHeader. Can provide other authors in extensions.
            :param source: The source application from which this message originated.
            :param responsible: The person or organization that accepts overall responsibility for the
        contents of the message. The implication is that the message event happened
        under the policies of the responsible party.
            :param reason: Coded indication of the cause for the event - indicates  a reason for the
        occurrence of the event that is a focus of this message.
            :param response: Information about the message that this message is a response to.  Only
        present if this message is a response.
            :param focus: The actual data of the message - a reference to the root/focus class of the
        event.
            :param definition: Permanent link to the MessageDefinition for this message.
            :param eventCoding: None
            :param eventUri: None
        """
        super().__init__(
            resourceType="MessageHeader",
            id_=id_,
            meta=meta,
            extension=extension,
            destination=destination,
            sender=sender,
            enterer=enterer,
            author=author,
            source=source,
            responsible=responsible,
            reason=reason,
            response=response,
            focus=focus,
            definition=definition,
            eventCoding=eventCoding,
            eventUri=eventUri,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MessageHeaderSchema.get_schema(include_extension=include_extension)
