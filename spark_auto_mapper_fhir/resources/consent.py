from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.consent import ConsentSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (ConsentState)
    from spark_auto_mapper_fhir.value_sets.consent_state import ConsentStateCode

    # scope (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for scope
    from spark_auto_mapper_fhir.value_sets.consent_scope_codes import (
        ConsentScopeCodesCode,
    )

    # End Import for CodeableConcept for scope
    # category (CodeableConcept)
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.consent_category_codes import (
        ConsentCategoryCodesCode,
    )

    # End Import for CodeableConcept for category
    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # dateTime (dateTime)
    # performer (Reference)
    # Imports for References for performer
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # organization (Reference)
    # Imports for References for organization
    # sourceAttachment (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # sourceReference (Reference)
    # Imports for References for sourceReference
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference
    from spark_auto_mapper_fhir.resources.contract import Contract
    from spark_auto_mapper_fhir.resources.questionnaire_response import (
        QuestionnaireResponse,
    )

    # policy (Consent.Policy)
    from spark_auto_mapper_fhir.backbone_elements.consent_policy import ConsentPolicy

    # policyRule (CodeableConcept)
    # Import for CodeableConcept for policyRule
    from spark_auto_mapper_fhir.value_sets.consent_policy_rule_codes import (
        ConsentPolicyRuleCodesCode,
    )

    # End Import for CodeableConcept for policyRule
    # verification (Consent.Verification)
    from spark_auto_mapper_fhir.backbone_elements.consent_verification import (
        ConsentVerification,
    )

    # provision (Consent.Provision)
    from spark_auto_mapper_fhir.backbone_elements.consent_provision import (
        ConsentProvision,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Consent(FhirResourceBase):
    """
    Consent
        A record of a healthcare consumer’s  choices, which permits or denies
    identified recipient(s) or recipient role(s) to perform one or more actions
    within a given policy context, for specific purposes and periods of time.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ConsentStateCode,
        scope: CodeableConcept[ConsentScopeCodesCode],
        category: FhirList[CodeableConcept[ConsentCategoryCodesCode]],
        patient: Optional[Reference[Union[Patient]]] = None,
        dateTime: Optional[FhirDateTime] = None,
        performer: Optional[
            FhirList[
                Reference[
                    Union[
                        Organization,
                        Patient,
                        Practitioner,
                        RelatedPerson,
                        PractitionerRole,
                    ]
                ]
            ]
        ] = None,
        organization: Optional[FhirList[Reference[Union[Organization]]]] = None,
        sourceAttachment: Optional[Attachment] = None,
        sourceReference: Optional[
            Reference[
                Union[Consent, DocumentReference, Contract, QuestionnaireResponse]
            ]
        ] = None,
        policy: Optional[FhirList[ConsentPolicy]] = None,
        policyRule: Optional[CodeableConcept[ConsentPolicyRuleCodesCode]] = None,
        verification: Optional[FhirList[ConsentVerification]] = None,
        provision: Optional[ConsentProvision] = None,
    ) -> None:
        """
            A record of a healthcare consumer’s  choices, which permits or denies
        identified recipient(s) or recipient role(s) to perform one or more actions
        within a given policy context, for specific purposes and periods of time.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique identifier for this copy of the Consent Statement.
            :param status: Indicates the current state of this consent.
            :param scope: A selector of the type of consent being presented: ADR, Privacy, Treatment,
        Research.  This list is now extensible.
            :param category: A classification of the type of consents found in the statement. This element
        supports indexing and retrieval of consent statements.
            :param patient: The patient/healthcare consumer to whom this consent applies.
            :param dateTime: When this  Consent was issued / created / indexed.
            :param performer: Either the Grantor, which is the entity responsible for granting the rights
        listed in a Consent Directive or the Grantee, which is the entity responsible
        for complying with the Consent Directive, including any obligations or
        limitations on authorizations and enforcement of prohibitions.
            :param organization: The organization that manages the consent, and the framework within which it
        is executed.
            :param sourceAttachment: None
            :param sourceReference: None
            :param policy: The references to the policies that are included in this consent scope.
        Policies may be organizational, but are often defined jurisdictionally, or in
        law.
            :param policyRule: A reference to the specific base computable regulation or policy.
            :param verification: Whether a treatment instruction (e.g. artificial respiration yes or no) was
        verified with the patient, his/her family or another authorized person.
            :param provision: An exception to the base policy of this consent. An exception can be an
        addition or removal of access permissions.
        """
        super().__init__(
            resourceType="Consent",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            scope=scope,
            category=category,
            patient=patient,
            dateTime=dateTime,
            performer=performer,
            organization=organization,
            sourceAttachment=sourceAttachment,
            sourceReference=sourceReference,
            policy=policy,
            policyRule=policyRule,
            verification=verification,
            provision=provision,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ConsentSchema.get_schema(include_extension=include_extension)
