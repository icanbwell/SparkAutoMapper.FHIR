from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductinteraction import (
    MedicinalProductInteractionSchema,
)

if TYPE_CHECKING:
    pass
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance

    # description (string)
    # interactant (MedicinalProductInteraction.Interactant)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_interaction_interactant import (
        MedicinalProductInteractionInteractant,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # effect (CodeableConcept)
    # Import for CodeableConcept for effect
    # End Import for CodeableConcept for effect
    # incidence (CodeableConcept)
    # Import for CodeableConcept for incidence
    # End Import for CodeableConcept for incidence
    # management (CodeableConcept)
    # Import for CodeableConcept for management
    # End Import for CodeableConcept for management


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductInteraction(FhirResourceBase):
    """
    MedicinalProductInteraction
        The interactions of the medicinal product with other medicinal products, or
    other forms of interactions.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        subject: Optional[
            FhirList[Reference[Union[MedicinalProduct, Medication, Substance]]]
        ] = None,
        description: Optional[FhirString] = None,
        interactant: Optional[FhirList[MedicinalProductInteractionInteractant]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        effect: Optional[CodeableConcept[GenericTypeCode]] = None,
        incidence: Optional[CodeableConcept[GenericTypeCode]] = None,
        management: Optional[CodeableConcept[GenericTypeCode]] = None,
    ) -> None:
        """
            The interactions of the medicinal product with other medicinal products, or
        other forms of interactions.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param subject: The medication for which this is a described interaction.
            :param description: The interaction described.
            :param interactant: The specific medication, food or laboratory test that interacts.
            :param type_: The type of the interaction e.g. drug-drug interaction, drug-food interaction,
        drug-lab test interaction.
            :param effect: The effect of the interaction, for example "reduced gastric absorption of
        primary medication".
            :param incidence: The incidence of the interaction, e.g. theoretical, observed.
            :param management: Actions for managing the interaction.
        """
        super().__init__(
            resourceType="MedicinalProductInteraction",
            id_=id_,
            meta=meta,
            extension=extension,
            subject=subject,
            description=description,
            interactant=interactant,
            type_=type_,
            effect=effect,
            incidence=incidence,
            management=management,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductInteractionSchema.get_schema(
            include_extension=include_extension
        )
