from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medication import MedicationSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.snomedct_medication_codes import (
        SNOMEDCTMedicationCodesCode,
    )

    # End Import for CodeableConcept for code
    # status (Medication Status Codes)
    from spark_auto_mapper_fhir.value_sets.medication_status_codes import (
        MedicationStatusCodesCode,
    )

    # manufacturer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for manufacturer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # form (CodeableConcept)
    # Import for CodeableConcept for form
    from spark_auto_mapper_fhir.value_sets.snomedct_form_codes import (
        SNOMEDCTFormCodesCode,
    )

    # End Import for CodeableConcept for form
    # amount (Ratio)
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio

    # ingredient (Medication.Ingredient)
    from spark_auto_mapper_fhir.backbone_elements.medication_ingredient import (
        MedicationIngredient,
    )

    # batch (Medication.Batch)
    from spark_auto_mapper_fhir.backbone_elements.medication_batch import (
        MedicationBatch,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Medication(FhirResourceBase):
    """
    Medication
        This resource is primarily used for the identification and definition of a
    medication for the purposes of prescribing, dispensing, and administering a
    medication as well as for making statements about medication use.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        code: Optional[CodeableConcept[SNOMEDCTMedicationCodesCode]] = None,
        status: Optional[MedicationStatusCodesCode] = None,
        manufacturer: Optional[Reference[Union[Organization]]] = None,
        form: Optional[CodeableConcept[SNOMEDCTFormCodesCode]] = None,
        amount: Optional[Ratio] = None,
        ingredient: Optional[FhirList[MedicationIngredient]] = None,
        batch: Optional[MedicationBatch] = None,
    ) -> None:
        """
            This resource is primarily used for the identification and definition of a
        medication for the purposes of prescribing, dispensing, and administering a
        medication as well as for making statements about medication use.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifier for this medication.
            :param code: A code (or set of codes) that specify this medication, or a textual
        description if no code is available. Usage note: This could be a standard
        medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also
        be a national or local formulary code, optionally with translations to other
        code systems.
            :param status: A code to indicate if the medication is in active use.
            :param manufacturer: Describes the details of the manufacturer of the medication product.  This is
        not intended to represent the distributor of a medication product.
            :param form: Describes the form of the item.  Powder; tablets; capsule.
            :param amount: Specific amount of the drug in the packaged product.  For example, when
        specifying a product that has the same strength (For example, Insulin glargine
        100 unit per mL solution for injection), this attribute provides additional
        clarification of the package amount (For example, 3 mL, 10mL, etc.).
            :param ingredient: Identifies a particular constituent of interest in the product.
            :param batch: Information that only applies to packages (not products).
        """
        super().__init__(
            resourceType="Medication",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            code=code,
            status=status,
            manufacturer=manufacturer,
            form=form,
            amount=amount,
            ingredient=ingredient,
            batch=batch,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicationSchema.get_schema(include_extension=include_extension)
