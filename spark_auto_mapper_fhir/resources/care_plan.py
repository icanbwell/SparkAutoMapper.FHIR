from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.careplan import CarePlanSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # instantiatesCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # instantiatesUri (uri)
    # basedOn (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for basedOn
    # replaces (Reference)
    # Imports for References for replaces
    # partOf (Reference)
    # Imports for References for partOf
    # status (RequestStatus)
    from spark_auto_mapper_fhir.value_sets.request_status import RequestStatusCode

    # intent (CarePlanIntent)
    from spark_auto_mapper_fhir.value_sets.care_plan_intent import CarePlanIntentCode

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.care_plan_category import (
        CarePlanCategoryCode,
    )

    # End Import for CodeableConcept for category
    # title (string)
    # description (string)
    # subject (Reference)
    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # created (dateTime)
    # author (Reference)
    # Imports for References for author
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.care_team import CareTeam

    # contributor (Reference)
    # Imports for References for contributor
    # careTeam (Reference)
    # Imports for References for careTeam
    # addresses (Reference)
    # Imports for References for addresses
    from spark_auto_mapper_fhir.resources.condition import Condition

    # supportingInfo (Reference)
    # Imports for References for supportingInfo
    from spark_auto_mapper_fhir.resources.resource import Resource

    # goal (Reference)
    # Imports for References for goal
    from spark_auto_mapper_fhir.resources.goal import Goal

    # activity (CarePlan.Activity)
    from spark_auto_mapper_fhir.backbone_elements.care_plan_activity import (
        CarePlanActivity,
    )

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CarePlan(FhirResourceBase):
    """
    CarePlan
    careplan.xsd
        Describes the intention of how one or more practitioners intend to deliver
    care for a particular patient, group or community for a period of time,
    possibly limited to care for a specific condition or set of conditions.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        instantiatesCanonical: Optional[FhirList[FhirCanonical]] = None,
        instantiatesUri: Optional[FhirList[FhirUri]] = None,
        basedOn: Optional[FhirList[Reference[CarePlan]]] = None,
        replaces: Optional[FhirList[Reference[CarePlan]]] = None,
        partOf: Optional[FhirList[Reference[CarePlan]]] = None,
        status: RequestStatusCode,
        intent: CarePlanIntentCode,
        category: Optional[FhirList[CodeableConcept[CarePlanCategoryCode]]] = None,
        title: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        subject: Reference[Union[Patient, Group]],
        encounter: Optional[Reference[Encounter]] = None,
        period: Optional[Period] = None,
        created: Optional[FhirDateTime] = None,
        author: Optional[
            Reference[
                Union[
                    Patient,
                    Practitioner,
                    PractitionerRole,
                    Device,
                    RelatedPerson,
                    Organization,
                    CareTeam,
                ]
            ]
        ] = None,
        contributor: Optional[
            FhirList[
                Reference[
                    Union[
                        Patient,
                        Practitioner,
                        PractitionerRole,
                        Device,
                        RelatedPerson,
                        Organization,
                        CareTeam,
                    ]
                ]
            ]
        ] = None,
        careTeam: Optional[FhirList[Reference[CareTeam]]] = None,
        addresses: Optional[FhirList[Reference[Condition]]] = None,
        supportingInfo: Optional[FhirList[Reference[Resource]]] = None,
        goal: Optional[FhirList[Reference[Goal]]] = None,
        activity: Optional[FhirList[CarePlanActivity]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            Describes the intention of how one or more practitioners intend to deliver
        care for a particular patient, group or community for a period of time,
        possibly limited to care for a specific condition or set of conditions.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Business identifiers assigned to this care plan by the performer or other
        systems which remain constant as the resource is updated and propagates from
        server to server.
            :param instantiatesCanonical: The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
        definition that is adhered to in whole or in part by this CarePlan.
            :param instantiatesUri: The URL pointing to an externally maintained protocol, guideline,
        questionnaire or other definition that is adhered to in whole or in part by
        this CarePlan.
            :param basedOn: A care plan that is fulfilled in whole or in part by this care plan.
            :param replaces: Completed or terminated care plan whose function is taken by this new care
        plan.
            :param partOf: A larger care plan of which this particular care plan is a component or step.
            :param status: Indicates whether the plan is currently being acted upon, represents future
        intentions or is now a historical record.
            :param intent: Indicates the level of authority/intentionality associated with the care plan
        and where the care plan fits into the workflow chain.
            :param category: Identifies what "kind" of plan this is to support differentiation between
        multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
        "disease management", "wellness plan", etc.
            :param title: Human-friendly name for the care plan.
            :param description: A description of the scope and nature of the plan.
            :param subject: Identifies the patient or group whose intended care is described by the plan.
            :param encounter: The Encounter during which this CarePlan was created or to which the creation
        of this record is tightly associated.
            :param period: Indicates when the plan did (or is intended to) come into effect and end.
            :param created: Represents when this particular CarePlan record was created in the system,
        which is often a system-generated date.
            :param author: When populated, the author is responsible for the care plan.  The care plan is
        attributed to the author.
            :param contributor: Identifies the individual(s) or organization who provided the contents of the
        care plan.
            :param careTeam: Identifies all people and organizations who are expected to be involved in the
        care envisioned by this plan.
            :param addresses: Identifies the conditions/problems/concerns/diagnoses/etc. whose management
        and/or mitigation are handled by this plan.
            :param supportingInfo: Identifies portions of the patient's record that specifically influenced the
        formation of the plan.  These might include comorbidities, recent procedures,
        limitations, recent assessments, etc.
            :param goal: Describes the intended objective(s) of carrying out the care plan.
            :param activity: Identifies a planned action to occur as part of the plan.  For example, a
        medication to be used, lab tests to perform, self-monitoring, education, etc.
            :param note: General notes about the care plan not covered elsewhere.
        """
        super().__init__(
            resourceType="CarePlan",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            instantiatesCanonical=instantiatesCanonical,
            instantiatesUri=instantiatesUri,
            basedOn=basedOn,
            replaces=replaces,
            partOf=partOf,
            status=status,
            intent=intent,
            category=category,
            title=title,
            description=description,
            subject=subject,
            encounter=encounter,
            period=period,
            created=created,
            author=author,
            contributor=contributor,
            careTeam=careTeam,
            addresses=addresses,
            supportingInfo=supportingInfo,
            goal=goal,
            activity=activity,
            note=note,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return CarePlanSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
