from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.compartmentdefinition import (
    CompartmentDefinitionSchema,
)

if TYPE_CHECKING:
    pass
    # url (uri)
    # version (string)
    # name (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # experimental (boolean)
    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # purpose (markdown)
    # code (CompartmentType)
    from spark_auto_mapper_fhir.value_sets.compartment_type import CompartmentTypeCode

    # search (boolean)
    # resource (CompartmentDefinition.Resource)
    from spark_auto_mapper_fhir.backbone_elements.compartment_definition_resource import (
        CompartmentDefinitionResource,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompartmentDefinition(FhirResourceBase):
    """
    CompartmentDefinition
        A compartment definition that defines how resources are accessed on a server.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        url: FhirUri,
        version: Optional[FhirString] = None,
        name: FhirString,
        status: PublicationStatusCode,
        experimental: Optional[FhirBoolean] = None,
        date: Optional[FhirDateTime] = None,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        purpose: Optional[FhirMarkdown] = None,
        code: CompartmentTypeCode,
        search: FhirBoolean,
        resource: Optional[FhirList[CompartmentDefinitionResource]] = None,
    ) -> None:
        """
            A compartment definition that defines how resources are accessed on a server.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param url: An absolute URI that is used to identify this compartment definition when it
        is referenced in a specification, model, design or an instance; also called
        its canonical identifier. This SHOULD be globally unique and SHOULD be a
        literal address at which at which an authoritative instance of this
        compartment definition is (or will be) published. This URL can be the target
        of a canonical reference. It SHALL remain the same when the compartment
        definition is stored on different servers.
            :param version: The identifier that is used to identify this version of the compartment
        definition when it is referenced in a specification, model, design or
        instance. This is an arbitrary value managed by the compartment definition
        author and is not expected to be globally unique. For example, it might be a
        timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
        no expectation that versions can be placed in a lexicographical sequence.
            :param name: A natural language name identifying the compartment definition. This name
        should be usable as an identifier for the module by machine processing
        applications such as code generation.
            :param status: The status of this compartment definition. Enables tracking the life-cycle of
        the content.
            :param experimental: A Boolean value to indicate that this compartment definition is authored for
        testing purposes (or education/evaluation/marketing) and is not intended to be
        used for genuine usage.
            :param date: The date  (and optionally time) when the compartment definition was published.
        The date must change when the business version changes and it must change if
        the status code changes. In addition, it should change when the substantive
        content of the compartment definition changes.
            :param publisher: The name of the organization or individual that published the compartment
        definition.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param description: A free text natural language description of the compartment definition from a
        consumer's perspective.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate compartment
        definition instances.
            :param purpose: Explanation of why this compartment definition is needed and why it has been
        designed as it has.
            :param code: Which compartment this definition describes.
            :param search: Whether the search syntax is supported,.
            :param resource: Information about how a resource is related to the compartment.
        """
        super().__init__(
            resourceType="CompartmentDefinition",
            id_=id_,
            meta=meta,
            extension=extension,
            url=url,
            version=version,
            name=name,
            status=status,
            experimental=experimental,
            date=date,
            publisher=publisher,
            contact=contact,
            description=description,
            useContext=useContext,
            purpose=purpose,
            code=code,
            search=search,
            resource=resource,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CompartmentDefinitionSchema.get_schema(
            include_extension=include_extension
        )
