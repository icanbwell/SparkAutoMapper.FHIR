from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.insuranceplan import InsurancePlanSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.insurance_plan_type import (
        InsurancePlanTypeCode,
    )

    # End Import for CodeableConcept for type_
    # name (string)
    # alias (string)
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # ownedBy (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for ownedBy
    from spark_auto_mapper_fhir.resources.organization import Organization

    # administeredBy (Reference)
    # Imports for References for administeredBy
    # coverageArea (Reference)
    # Imports for References for coverageArea
    from spark_auto_mapper_fhir.resources.location import Location

    # contact (InsurancePlan.Contact)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_contact import (
        InsurancePlanContact,
    )

    # endpoint (Reference)
    # Imports for References for endpoint
    from spark_auto_mapper_fhir.resources.endpoint import Endpoint

    # network (Reference)
    # Imports for References for network
    # coverage (InsurancePlan.Coverage)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_coverage import (
        InsurancePlanCoverage,
    )

    # plan (InsurancePlan.Plan)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_plan import (
        InsurancePlanPlan,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlan(FhirResourceBase):
    """
    InsurancePlan
        Details of a Health Insurance product/plan provided by an organization.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: Optional[PublicationStatusCode] = None,
        type_: Optional[FhirList[CodeableConcept[InsurancePlanTypeCode]]] = None,
        name: Optional[FhirString] = None,
        alias: Optional[FhirList[FhirString]] = None,
        period: Optional[Period] = None,
        ownedBy: Optional[Reference[Union[Organization]]] = None,
        administeredBy: Optional[Reference[Union[Organization]]] = None,
        coverageArea: Optional[FhirList[Reference[Union[Location]]]] = None,
        contact: Optional[FhirList[InsurancePlanContact]] = None,
        endpoint: Optional[FhirList[Reference[Union[Endpoint]]]] = None,
        network: Optional[FhirList[Reference[Union[Organization]]]] = None,
        coverage: Optional[FhirList[InsurancePlanCoverage]] = None,
        plan: Optional[FhirList[InsurancePlanPlan]] = None,
    ) -> None:
        """
            Details of a Health Insurance product/plan provided by an organization.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifiers assigned to this health insurance product which remain
        constant as the resource is updated and propagates from server to server.
            :param status: The current state of the health insurance product.
            :param type_: The kind of health insurance product.
            :param name: Official name of the health insurance product as designated by the owner.
            :param alias: A list of alternate names that the product is known as, or was known as in the
        past.
            :param period: The period of time that the health insurance product is available.
            :param ownedBy: The entity that is providing  the health insurance product and underwriting
        the risk.  This is typically an insurance carriers, other third-party payers,
        or health plan sponsors comonly referred to as 'payers'.
            :param administeredBy: An organization which administer other services such as underwriting, customer
        service and/or claims processing on behalf of the health insurance product
        owner.
            :param coverageArea: The geographic region in which a health insurance product's benefits apply.
            :param contact: The contact for the health insurance product for a certain purpose.
            :param endpoint: The technical endpoints providing access to services operated for the health
        insurance product.
            :param network: Reference to the network included in the health insurance product.
            :param coverage: Details about the coverage offered by the insurance product.
            :param plan: Details about an insurance plan.
        """
        super().__init__(
            resourceType="InsurancePlan",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            type_=type_,
            name=name,
            alias=alias,
            period=period,
            ownedBy=ownedBy,
            administeredBy=administeredBy,
            coverageArea=coverageArea,
            contact=contact,
            endpoint=endpoint,
            network=network,
            coverage=coverage,
            plan=plan,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return InsurancePlanSchema.get_schema(include_extension=include_extension)
