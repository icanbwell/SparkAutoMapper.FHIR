from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substancepolymer import SubstancePolymerSchema

if TYPE_CHECKING:
    pass
    # class_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for class_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for class_
    # geometry (CodeableConcept)
    # Import for CodeableConcept for geometry
    # End Import for CodeableConcept for geometry
    # copolymerConnectivity (CodeableConcept)
    # Import for CodeableConcept for copolymerConnectivity
    # End Import for CodeableConcept for copolymerConnectivity
    # modification (string)
    # monomerSet (SubstancePolymer.MonomerSet)
    from spark_auto_mapper_fhir.backbone_elements.substance_polymer_monomer_set import (
        SubstancePolymerMonomerSet,
    )

    # repeat (SubstancePolymer.Repeat)
    from spark_auto_mapper_fhir.backbone_elements.substance_polymer_repeat import (
        SubstancePolymerRepeat,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstancePolymer(FhirResourceBase):
    """
    SubstancePolymer
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        class_: Optional[CodeableConcept[GenericTypeCode]] = None,
        geometry: Optional[CodeableConcept[GenericTypeCode]] = None,
        copolymerConnectivity: Optional[
            FhirList[CodeableConcept[GenericTypeCode]]
        ] = None,
        modification: Optional[FhirList[FhirString]] = None,
        monomerSet: Optional[FhirList[SubstancePolymerMonomerSet]] = None,
        repeat: Optional[FhirList[SubstancePolymerRepeat]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param class_: Todo.
        :param geometry: Todo.
        :param copolymerConnectivity: Todo.
        :param modification: Todo.
        :param monomerSet: Todo.
        :param repeat: Todo.
        """
        super().__init__(
            resourceType="SubstancePolymer",
            id_=id_,
            meta=meta,
            extension=extension,
            class_=class_,
            geometry=geometry,
            copolymerConnectivity=copolymerConnectivity,
            modification=modification,
            monomerSet=monomerSet,
            repeat=repeat,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubstancePolymerSchema.get_schema(include_extension=include_extension)
