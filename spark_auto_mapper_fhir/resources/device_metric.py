from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.devicemetric import DeviceMetricSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.device_metric_and_component_types import (
        DeviceMetricAndComponentTypesCode,
    )

    # End Import for CodeableConcept for type_
    # unit (CodeableConcept)
    # Import for CodeableConcept for unit
    # End Import for CodeableConcept for unit
    # source (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for source
    from spark_auto_mapper_fhir.resources.device import Device

    # parent (Reference)
    # Imports for References for parent
    # operationalStatus (DeviceMetricOperationalStatus)
    from spark_auto_mapper_fhir.value_sets.device_metric_operational_status import (
        DeviceMetricOperationalStatusCode,
    )

    # color (DeviceMetricColor)
    from spark_auto_mapper_fhir.value_sets.device_metric_color import (
        DeviceMetricColorCode,
    )

    # category (DeviceMetricCategory)
    from spark_auto_mapper_fhir.value_sets.device_metric_category import (
        DeviceMetricCategoryCode,
    )

    # measurementPeriod (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # calibration (DeviceMetric.Calibration)
    from spark_auto_mapper_fhir.backbone_elements.device_metric_calibration import (
        DeviceMetricCalibration,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceMetric(FhirResourceBase):
    """
    DeviceMetric
    devicemetric.xsd
        Describes a measurement, calculation or setting capability of a medical
    device.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: CodeableConcept[DeviceMetricAndComponentTypesCode],
        unit: Optional[CodeableConcept[DeviceMetricAndComponentTypesCode]] = None,
        source: Optional[Reference[Device]] = None,
        parent: Optional[Reference[Device]] = None,
        operationalStatus: Optional[DeviceMetricOperationalStatusCode] = None,
        color: Optional[DeviceMetricColorCode] = None,
        category: DeviceMetricCategoryCode,
        measurementPeriod: Optional[Timing] = None,
        calibration: Optional[FhirList[DeviceMetricCalibration]] = None,
    ) -> None:
        """
            Describes a measurement, calculation or setting capability of a medical
        device.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Unique instance identifiers assigned to a device by the device or gateway
        software, manufacturers, other organizations or owners. For example: handle
        ID.
            :param type_: Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
            :param unit: Describes the unit that an observed value determined for this metric will
        have. For example: Percent, Seconds, etc.
            :param source: Describes the link to the  Device that this DeviceMetric belongs to and that
        contains administrative device information such as manufacturer, serial
        number, etc.
            :param parent: Describes the link to the  Device that this DeviceMetric belongs to and that
        provide information about the location of this DeviceMetric in the containment
        structure of the parent Device. An example would be a Device that represents a
        Channel. This reference can be used by a client application to distinguish
        DeviceMetrics that have the same type, but should be interpreted based on
        their containment location.
            :param operationalStatus: Indicates current operational state of the device. For example: On, Off,
        Standby, etc.
            :param color: Describes the color representation for the metric. This is often used to aid
        clinicians to track and identify parameter types by color. In practice,
        consider a Patient Monitor that has ECG/HR and Pleth for example; the
        parameters are displayed in different characteristic colors, such as HR-blue,
        BP-green, and PR and SpO2- magenta.
            :param category: Indicates the category of the observation generation process. A DeviceMetric
        can be for example a setting, measurement, or calculation.
            :param measurementPeriod: Describes the measurement repetition time. This is not necessarily the same as
        the update period. The measurement repetition time can range from milliseconds
        up to hours. An example for a measurement repetition time in the range of
        milliseconds is the sampling rate of an ECG. An example for a measurement
        repetition time in the range of hours is a NIBP that is triggered
        automatically every hour. The update period may be different than the
        measurement repetition time, if the device does not update the published
        observed value with the same frequency as it was measured.
            :param calibration: Describes the calibrations that have been performed or that are required to be
        performed.
        """
        super().__init__(
            resourceType="DeviceMetric",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            type_=type_,
            unit=unit,
            source=source,
            parent=parent,
            operationalStatus=operationalStatus,
            color=color,
            category=category,
            measurementPeriod=measurementPeriod,
            calibration=calibration,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return DeviceMetricSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
