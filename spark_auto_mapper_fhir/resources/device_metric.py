from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.devicemetric import DeviceMetricSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.device_metric_and_component_types import (
        DeviceMetricAndComponentTypesCode,
    )

    # End Import for CodeableConcept for type_
    # unit (CodeableConcept)
    # Import for CodeableConcept for unit
    # End Import for CodeableConcept for unit
    # source (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for source
    from spark_auto_mapper_fhir.resources.device import Device

    # parent (Reference)
    # Imports for References for parent
    # operationalStatus (DeviceMetricOperationalStatus)
    from spark_auto_mapper_fhir.value_sets.device_metric_operational_status import (
        DeviceMetricOperationalStatusCode,
    )

    # color (DeviceMetricColor)
    from spark_auto_mapper_fhir.value_sets.device_metric_color import (
        DeviceMetricColorCode,
    )

    # category (DeviceMetricCategory)
    from spark_auto_mapper_fhir.value_sets.device_metric_category import (
        DeviceMetricCategoryCode,
    )

    # measurementPeriod (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # calibration (DeviceMetric.Calibration)
    from spark_auto_mapper_fhir.backbone_elements.device_metric_calibration import (
        DeviceMetricCalibration,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceMetric(FhirResourceBase):
    """
    DeviceMetric
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: CodeableConcept[DeviceMetricAndComponentTypesCode],
        unit: Optional[CodeableConcept[DeviceMetricAndComponentTypesCode]] = None,
        source: Optional[Reference[Union[Device]]] = None,
        parent: Optional[Reference[Union[Device]]] = None,
        operationalStatus: Optional[DeviceMetricOperationalStatusCode] = None,
        color: Optional[DeviceMetricColorCode] = None,
        category: DeviceMetricCategoryCode,
        measurementPeriod: Optional[Timing] = None,
        calibration: Optional[FhirList[DeviceMetricCalibration]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Unique instance identifiers assigned to a device by the device or gateway
        software, manufacturers, other organizations or owners. For example: handle
        ID.
            :param type_: Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
            :param unit: Describes the unit that an observed value determined for this metric will
        have. For example: Percent, Seconds, etc.
            :param source: Describes the link to the  Device that this DeviceMetric belongs to and that
        contains administrative device information such as manufacturer, serial
        number, etc.
            :param parent: Describes the link to the  Device that this DeviceMetric belongs to and that
        provide information about the location of this DeviceMetric in the containment
        structure of the parent Device. An example would be a Device that represents a
        Channel. This reference can be used by a client application to distinguish
        DeviceMetrics that have the same type, but should be interpreted based on
        their containment location.
            :param operationalStatus: Indicates current operational state of the device. For example: On, Off,
        Standby, etc.
            :param color: Describes the color representation for the metric. This is often used to aid
        clinicians to track and identify parameter types by color. In practice,
        consider a Patient Monitor that has ECG/HR and Pleth for example; the
        parameters are displayed in different characteristic colors, such as HR-blue,
        BP-green, and PR and SpO2- magenta.
            :param category: Indicates the category of the observation generation process. A DeviceMetric
        can be for example a setting, measurement, or calculation.
            :param measurementPeriod: Describes the measurement repetition time. This is not necessarily the same as
        the update period. The measurement repetition time can range from milliseconds
        up to hours. An example for a measurement repetition time in the range of
        milliseconds is the sampling rate of an ECG. An example for a measurement
        repetition time in the range of hours is a NIBP that is triggered
        automatically every hour. The update period may be different than the
        measurement repetition time, if the device does not update the published
        observed value with the same frequency as it was measured.
            :param calibration: Describes the calibrations that have been performed or that are required to be
        performed.
        """
        super().__init__(
            resourceType="DeviceMetric",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            type_=type_,
            unit=unit,
            source=source,
            parent=parent,
            operationalStatus=operationalStatus,
            color=color,
            category=category,
            measurementPeriod=measurementPeriod,
            calibration=calibration,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return DeviceMetricSchema.get_schema(include_extension=include_extension)
