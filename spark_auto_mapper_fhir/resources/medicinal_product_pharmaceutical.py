from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproductpharmaceutical import (
    MedicinalProductPharmaceuticalSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # administrableDoseForm (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for administrableDoseForm
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for administrableDoseForm
    # unitOfPresentation (CodeableConcept)
    # Import for CodeableConcept for unitOfPresentation
    # End Import for CodeableConcept for unitOfPresentation
    # ingredient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for ingredient
    from spark_auto_mapper_fhir.resources.medicinal_product_ingredient import (
        MedicinalProductIngredient,
    )

    # device (Reference)
    # Imports for References for device
    from spark_auto_mapper_fhir.resources.device_definition import DeviceDefinition

    # characteristics (MedicinalProductPharmaceutical.Characteristics)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_pharmaceutical_characteristics import (
        MedicinalProductPharmaceuticalCharacteristics,
    )

    # routeOfAdministration (MedicinalProductPharmaceutical.RouteOfAdministration)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_pharmaceutical_route_of_administration import (
        MedicinalProductPharmaceuticalRouteOfAdministration,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductPharmaceutical(FhirResourceBase):
    """
    MedicinalProductPharmaceutical
        A pharmaceutical product described in terms of its composition and dose form.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        administrableDoseForm: CodeableConcept[GenericTypeCode],
        unitOfPresentation: Optional[CodeableConcept[GenericTypeCode]] = None,
        ingredient: Optional[
            FhirList[Reference[Union[MedicinalProductIngredient]]]
        ] = None,
        device: Optional[FhirList[Reference[Union[DeviceDefinition]]]] = None,
        characteristics: Optional[
            FhirList[MedicinalProductPharmaceuticalCharacteristics]
        ] = None,
        routeOfAdministration: FhirList[
            MedicinalProductPharmaceuticalRouteOfAdministration
        ],
    ) -> None:
        """
            A pharmaceutical product described in terms of its composition and dose form.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: An identifier for the pharmaceutical medicinal product.
            :param administrableDoseForm: The administrable dose form, after necessary reconstitution.
            :param unitOfPresentation: Todo.
            :param ingredient: Ingredient.
            :param device: Accompanying device.
            :param characteristics: Characteristics e.g. a products onset of action.
            :param routeOfAdministration: The path by which the pharmaceutical product is taken into or makes contact
        with the body.
        """
        super().__init__(
            resourceType="MedicinalProductPharmaceutical",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            administrableDoseForm=administrableDoseForm,
            unitOfPresentation=unitOfPresentation,
            ingredient=ingredient,
            device=device,
            characteristics=characteristics,
            routeOfAdministration=routeOfAdministration,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductPharmaceuticalSchema.get_schema(
            include_extension=include_extension
        )
