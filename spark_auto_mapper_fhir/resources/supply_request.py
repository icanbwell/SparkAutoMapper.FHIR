from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.supplyrequest import SupplyRequestSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (SupplyRequestStatus)
    from spark_auto_mapper_fhir.value_sets.supply_request_status import (
        SupplyRequestStatusCode,
    )

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.supply_type import SupplyTypeCode

    # End Import for CodeableConcept for category
    # priority (RequestPriority)
    from spark_auto_mapper_fhir.value_sets.request_priority import RequestPriorityCode

    # itemCodeableConcept (CodeableConcept)
    # Import for CodeableConcept for itemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for itemCodeableConcept
    # itemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for itemReference
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.device import Device

    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # parameter (SupplyRequest.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.supply_request_parameter import (
        SupplyRequestParameter,
    )

    # occurrenceDateTime (dateTime)
    # occurrencePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # occurrenceTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # authoredOn (dateTime)
    # requester (Reference)
    # Imports for References for requester
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # supplier (Reference)
    # Imports for References for supplier
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.supply_request_reason import (
        SupplyRequestReasonCode,
    )

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # deliverFrom (Reference)
    # Imports for References for deliverFrom
    from spark_auto_mapper_fhir.resources.location import Location

    # deliverTo (Reference)
    # Imports for References for deliverTo


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SupplyRequest(FhirResourceBase):
    """
    SupplyRequest
        A record of a request for a medication, substance or device used in the
    healthcare setting.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: Optional[SupplyRequestStatusCode] = None,
        category: Optional[CodeableConcept[SupplyTypeCode]] = None,
        priority: Optional[RequestPriorityCode] = None,
        itemCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        itemReference: Optional[Reference[Union[Medication, Substance, Device]]] = None,
        quantity: Quantity,
        parameter: Optional[FhirList[SupplyRequestParameter]] = None,
        occurrenceDateTime: Optional[FhirDateTime] = None,
        occurrencePeriod: Optional[Period] = None,
        occurrenceTiming: Optional[Timing] = None,
        authoredOn: Optional[FhirDateTime] = None,
        requester: Optional[
            Reference[
                Union[
                    Practitioner,
                    PractitionerRole,
                    Organization,
                    Patient,
                    RelatedPerson,
                    Device,
                ]
            ]
        ] = None,
        supplier: Optional[
            FhirList[Reference[Union[Organization, HealthcareService]]]
        ] = None,
        reasonCode: Optional[FhirList[CodeableConcept[SupplyRequestReasonCode]]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        deliverFrom: Optional[Reference[Union[Organization, Location]]] = None,
        deliverTo: Optional[Reference[Union[Organization, Location, Patient]]] = None,
    ) -> None:
        """
            A record of a request for a medication, substance or device used in the
        healthcare setting.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Business identifiers assigned to this SupplyRequest by the author and/or other
        systems. These identifiers remain constant as the resource is updated and
        propagates from server to server.
            :param status: Status of the supply request.
            :param category: Category of supply, e.g.  central, non-stock, etc. This is used to support
        work flows associated with the supply process.
            :param priority: Indicates how quickly this SupplyRequest should be addressed with respect to
        other requests.
            :param itemCodeableConcept: None
            :param itemReference: None
            :param quantity: The amount that is being ordered of the indicated item.
            :param parameter: Specific parameters for the ordered item.  For example, the size of the
        indicated item.
            :param occurrenceDateTime: None
            :param occurrencePeriod: None
            :param occurrenceTiming: None
            :param authoredOn: When the request was made.
            :param requester: The device, practitioner, etc. who initiated the request.
            :param supplier: Who is intended to fulfill the request.
            :param reasonCode: The reason why the supply item was requested.
            :param reasonReference: The reason why the supply item was requested.
            :param deliverFrom: Where the supply is expected to come from.
            :param deliverTo: Where the supply is destined to go.
        """
        super().__init__(
            resourceType="SupplyRequest",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            status=status,
            category=category,
            priority=priority,
            itemCodeableConcept=itemCodeableConcept,
            itemReference=itemReference,
            quantity=quantity,
            parameter=parameter,
            occurrenceDateTime=occurrenceDateTime,
            occurrencePeriod=occurrencePeriod,
            occurrenceTiming=occurrenceTiming,
            authoredOn=authoredOn,
            requester=requester,
            supplier=supplier,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            deliverFrom=deliverFrom,
            deliverTo=deliverTo,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SupplyRequestSchema.get_schema(include_extension=include_extension)
