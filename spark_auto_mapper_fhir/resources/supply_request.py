from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.supplyrequest import SupplyRequestSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (SupplyRequestStatus)
    from spark_auto_mapper_fhir.value_sets.supply_request_status import (
        SupplyRequestStatusCode,
    )

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.supply_type import SupplyTypeCode

    # End Import for CodeableConcept for category
    # priority (RequestPriority)
    from spark_auto_mapper_fhir.value_sets.request_priority import RequestPriorityCode

    # itemCodeableConcept (CodeableConcept)
    # Import for CodeableConcept for itemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.snomedct_supply_item import (
        SNOMEDCTSupplyItemCode,
    )

    # End Import for CodeableConcept for itemCodeableConcept
    # itemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for itemReference
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.device import Device

    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # parameter (SupplyRequest.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.supply_request_parameter import (
        SupplyRequestParameter,
    )

    # occurrenceDateTime (dateTime)
    # occurrencePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # occurrenceTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # authoredOn (dateTime)
    # requester (Reference)
    # Imports for References for requester
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # supplier (Reference)
    # Imports for References for supplier
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.supply_request_reason import (
        SupplyRequestReasonCode,
    )

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # deliverFrom (Reference)
    # Imports for References for deliverFrom
    from spark_auto_mapper_fhir.resources.location import Location

    # deliverTo (Reference)
    # Imports for References for deliverTo


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SupplyRequest(FhirResourceBase):
    """
    SupplyRequest
    supplyrequest.xsd
        A record of a request for a medication, substance or device used in the
    healthcare setting.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: Optional[SupplyRequestStatusCode] = None,
        category: Optional[CodeableConcept[SupplyTypeCode]] = None,
        priority: Optional[RequestPriorityCode] = None,
        itemCodeableConcept: Optional[CodeableConcept[SNOMEDCTSupplyItemCode]] = None,
        itemReference: Optional[Reference[Union[Medication, Substance, Device]]] = None,
        quantity: Quantity,
        parameter: Optional[FhirList[SupplyRequestParameter]] = None,
        occurrenceDateTime: Optional[FhirDateTime] = None,
        occurrencePeriod: Optional[Period] = None,
        occurrenceTiming: Optional[Timing] = None,
        authoredOn: Optional[FhirDateTime] = None,
        requester: Optional[
            Reference[
                Union[
                    Practitioner,
                    PractitionerRole,
                    Organization,
                    Patient,
                    RelatedPerson,
                    Device,
                ]
            ]
        ] = None,
        supplier: Optional[
            FhirList[Reference[Union[Organization, HealthcareService]]]
        ] = None,
        reasonCode: Optional[FhirList[CodeableConcept[SupplyRequestReasonCode]]] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        deliverFrom: Optional[Reference[Union[Organization, Location]]] = None,
        deliverTo: Optional[Reference[Union[Organization, Location, Patient]]] = None,
    ) -> None:
        """
            A record of a request for a medication, substance or device used in the
        healthcare setting.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Business identifiers assigned to this SupplyRequest by the author and/or other
        systems. These identifiers remain constant as the resource is updated and
        propagates from server to server.
            :param status: Status of the supply request.
            :param category: Category of supply, e.g.  central, non-stock, etc. This is used to support
        work flows associated with the supply process.
            :param priority: Indicates how quickly this SupplyRequest should be addressed with respect to
        other requests.
            :param itemCodeableConcept: None
            :param itemReference: None
            :param quantity: The amount that is being ordered of the indicated item.
            :param parameter: Specific parameters for the ordered item.  For example, the size of the
        indicated item.
            :param occurrenceDateTime: None
            :param occurrencePeriod: None
            :param occurrenceTiming: None
            :param authoredOn: When the request was made.
            :param requester: The device, practitioner, etc. who initiated the request.
            :param supplier: Who is intended to fulfill the request.
            :param reasonCode: The reason why the supply item was requested.
            :param reasonReference: The reason why the supply item was requested.
            :param deliverFrom: Where the supply is expected to come from.
            :param deliverTo: Where the supply is destined to go.
        """
        super().__init__(
            resourceType="SupplyRequest",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            status=status,
            category=category,
            priority=priority,
            itemCodeableConcept=itemCodeableConcept,
            itemReference=itemReference,
            quantity=quantity,
            parameter=parameter,
            occurrenceDateTime=occurrenceDateTime,
            occurrencePeriod=occurrencePeriod,
            occurrenceTiming=occurrenceTiming,
            authoredOn=authoredOn,
            requester=requester,
            supplier=supplier,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            deliverFrom=deliverFrom,
            deliverTo=deliverTo,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return SupplyRequestSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
