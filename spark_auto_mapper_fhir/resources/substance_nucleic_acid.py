from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substancenucleicacid import (
    SubstanceNucleicAcidSchema,
)

if TYPE_CHECKING:
    pass
    # sequenceType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for sequenceType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for sequenceType
    # numberOfSubunits (integer)
    # areaOfHybridisation (string)
    # oligoNucleotideType (CodeableConcept)
    # Import for CodeableConcept for oligoNucleotideType
    # End Import for CodeableConcept for oligoNucleotideType
    # subunit (SubstanceNucleicAcid.Subunit)
    from spark_auto_mapper_fhir.backbone_elements.substance_nucleic_acid_subunit import (
        SubstanceNucleicAcidSubunit,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceNucleicAcid(FhirResourceBase):
    """
    SubstanceNucleicAcid
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequenceType: Optional[CodeableConcept[GenericTypeCode]] = None,
        numberOfSubunits: Optional[FhirInteger] = None,
        areaOfHybridisation: Optional[FhirString] = None,
        oligoNucleotideType: Optional[CodeableConcept[GenericTypeCode]] = None,
        subunit: Optional[FhirList[SubstanceNucleicAcidSubunit]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param sequenceType: The type of the sequence shall be specified based on a controlled vocabulary.
            :param numberOfSubunits: The number of linear sequences of nucleotides linked through phosphodiester
        bonds shall be described. Subunits would be strands of nucleic acids that are
        tightly associated typically through Watson-Crick base pairing. NOTE: If not
        specified in the reference source, the assumption is that there is 1 subunit.
            :param areaOfHybridisation: The area of hybridisation shall be described if applicable for double stranded
        RNA or DNA. The number associated with the subunit followed by the number
        associated to the residue shall be specified in increasing order. The
        underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
            :param oligoNucleotideType: (TBC).
            :param subunit: Subunits are listed in order of decreasing length; sequences of the same
        length will be ordered by molecular weight; subunits that have identical
        sequences will be repeated multiple times.
        """
        super().__init__(
            resourceType="SubstanceNucleicAcid",
            id_=id_,
            meta=meta,
            extension=extension,
            sequenceType=sequenceType,
            numberOfSubunits=numberOfSubunits,
            areaOfHybridisation=areaOfHybridisation,
            oligoNucleotideType=oligoNucleotideType,
            subunit=subunit,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubstanceNucleicAcidSchema.get_schema(
            include_extension=include_extension
        )
