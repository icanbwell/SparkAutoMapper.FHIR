from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.medicinalproduct import MedicinalProductSchema

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.marketing_status import MarketingStatus
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for pharmaceuticalProduct
    from spark_auto_mapper_fhir.resources.medicinal_product_pharmaceutical import MedicinalProductPharmaceutical
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for packagedMedicinalProduct
    from spark_auto_mapper_fhir.resources.medicinal_product_packaged import MedicinalProductPackaged
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for attachedDocument
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for masterFile
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for contact
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for clinicalTrial
    from spark_auto_mapper_fhir.resources.research_study import ResearchStudy
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_name import MedicinalProductName
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_manufacturing_business_operation import MedicinalProductManufacturingBusinessOperation
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_special_designation import MedicinalProductSpecialDesignation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProduct(FhirResourceBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier ]] = None,
        type_: Optional[CodeableConcept ] = None,
        domain: Optional[Coding ] = None,
        combinedPharmaceuticalDoseForm: Optional[CodeableConcept ] = None,
        legalStatusOfSupply: Optional[CodeableConcept ] = None,
        additionalMonitoringIndicator: Optional[CodeableConcept ] = None,
        specialMeasures: Optional[FhirList[FhirString ]] = None,
        paediatricUseIndicator: Optional[CodeableConcept ] = None,
        productClassification: Optional[FhirList[CodeableConcept ]] = None,
        marketingStatus: Optional[FhirList[MarketingStatus ]] = None,
        pharmaceuticalProduct: Optional[FhirList[Reference [Union[MedicinalProductPharmaceutical]]]] = None,
        packagedMedicinalProduct: Optional[FhirList[Reference [Union[MedicinalProductPackaged]]]] = None,
        attachedDocument: Optional[FhirList[Reference [Union[DocumentReference]]]] = None,
        masterFile: Optional[FhirList[Reference [Union[DocumentReference]]]] = None,
        contact: Optional[FhirList[Reference [Union[Organization, PractitionerRole]]]] = None,
        clinicalTrial: Optional[FhirList[Reference [Union[ResearchStudy]]]] = None,
        name: FhirList[MedicinalProductName ],
        crossReference: Optional[FhirList[Identifier ]] = None,
        manufacturingBusinessOperation: Optional[FhirList[MedicinalProductManufacturingBusinessOperation ]] = None,
        specialDesignation: Optional[FhirList[MedicinalProductSpecialDesignation ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param identifier: Business identifier for this product. Could be an MPID.
        :param type_: Regulatory type, e.g. Investigational or Authorized.
        :param domain: If this medicine applies to human or veterinary uses.
        :param combinedPharmaceuticalDoseForm: The dose form for a single part product, or combined form of a multiple part
    product.
        :param legalStatusOfSupply: The legal status of supply of the medicinal product as classified by the
    regulator.
        :param additionalMonitoringIndicator: Whether the Medicinal Product is subject to additional monitoring for
    regulatory reasons.
        :param specialMeasures: Whether the Medicinal Product is subject to special measures for regulatory
    reasons.
        :param paediatricUseIndicator: If authorised for use in children.
        :param productClassification: Allows the product to be classified by various systems.
        :param marketingStatus: Marketing status of the medicinal product, in contrast to marketing
    authorizaton.
        :param pharmaceuticalProduct: Pharmaceutical aspects of product.
        :param packagedMedicinalProduct: Package representation for the product.
        :param attachedDocument: Supporting documentation, typically for regulatory submission.
        :param masterFile: A master file for to the medicinal product (e.g. Pharmacovigilance System
    Master File).
        :param contact: A product specific contact, person (in a role), or an organization.
        :param clinicalTrial: Clinical trials or studies that this product is involved in.
        :param name: The product's name, including full name and possibly coded parts.
        :param crossReference: Reference to another product, e.g. for linking authorised to investigational
    product.
        :param manufacturingBusinessOperation: An operation applied to the product, for manufacturing or adminsitrative
    purpose.
        :param specialDesignation: Indicates if the medicinal product has an orphan designation for the treatment
    of a rare disease.
        """
        super().__init__(
            resourceType="MedicinalProduct",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            type_=type_,
            domain=domain,
            combinedPharmaceuticalDoseForm=combinedPharmaceuticalDoseForm,
            legalStatusOfSupply=legalStatusOfSupply,
            additionalMonitoringIndicator=additionalMonitoringIndicator,
            specialMeasures=specialMeasures,
            paediatricUseIndicator=paediatricUseIndicator,
            productClassification=productClassification,
            marketingStatus=marketingStatus,
            pharmaceuticalProduct=pharmaceuticalProduct,
            packagedMedicinalProduct=packagedMedicinalProduct,
            attachedDocument=attachedDocument,
            masterFile=masterFile,
            contact=contact,
            clinicalTrial=clinicalTrial,
            name=name,
            crossReference=crossReference,
            manufacturingBusinessOperation=manufacturingBusinessOperation,
            specialDesignation=specialDesignation,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MedicinalProductSchema.get_schema(include_extension=include_extension)
