from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.molecularsequence import MolecularSequenceSchema

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (sequenceType)
    from spark_auto_mapper_fhir.value_sets.sequence_type import SequenceTypeCode

    # coordinateSystem (integer)
    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # specimen (Reference)
    # Imports for References for specimen
    from spark_auto_mapper_fhir.resources.specimen import Specimen

    # device (Reference)
    # Imports for References for device
    from spark_auto_mapper_fhir.resources.device import Device

    # performer (Reference)
    # Imports for References for performer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # referenceSeq (MolecularSequence.ReferenceSeq)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_reference_seq import (
        MolecularSequenceReferenceSeq,
    )

    # variant (MolecularSequence.Variant)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_variant import (
        MolecularSequenceVariant,
    )

    # observedSeq (string)
    # quality (MolecularSequence.Quality)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_quality import (
        MolecularSequenceQuality,
    )

    # readCoverage (integer)
    # repository (MolecularSequence.Repository)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_repository import (
        MolecularSequenceRepository,
    )

    # pointer (Reference)
    # Imports for References for pointer
    # structureVariant (MolecularSequence.StructureVariant)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_structure_variant import (
        MolecularSequenceStructureVariant,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequence(FhirResourceBase):
    """
    MolecularSequence
        Raw data describing a biological sequence.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: Optional[SequenceTypeCode] = None,
        coordinateSystem: FhirInteger,
        patient: Optional[Reference[Union[Patient]]] = None,
        specimen: Optional[Reference[Union[Specimen]]] = None,
        device: Optional[Reference[Union[Device]]] = None,
        performer: Optional[Reference[Union[Organization]]] = None,
        quantity: Optional[Quantity] = None,
        referenceSeq: Optional[MolecularSequenceReferenceSeq] = None,
        variant: Optional[FhirList[MolecularSequenceVariant]] = None,
        observedSeq: Optional[FhirString] = None,
        quality: Optional[FhirList[MolecularSequenceQuality]] = None,
        readCoverage: Optional[FhirInteger] = None,
        repository: Optional[FhirList[MolecularSequenceRepository]] = None,
        pointer: Optional[FhirList[Reference[Union[MolecularSequence]]]] = None,
        structureVariant: Optional[FhirList[MolecularSequenceStructureVariant]] = None,
    ) -> None:
        """
            Raw data describing a biological sequence.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier for this particular sequence instance. This is a FHIR-
        defined id.
            :param type_: Amino Acid Sequence/ DNA Sequence / RNA Sequence.
            :param coordinateSystem: Whether the sequence is numbered starting at 0 (0-based numbering or
        coordinates, inclusive start, exclusive end) or starting at 1 (1-based
        numbering, inclusive start and inclusive end).
            :param patient: The patient whose sequencing results are described by this resource.
            :param specimen: Specimen used for sequencing.
            :param device: The method for sequencing, for example, chip information.
            :param performer: The organization or lab that should be responsible for this result.
            :param quantity: The number of copies of the sequence of interest. (RNASeq).
            :param referenceSeq: A sequence that is used as a reference to describe variants that are present
        in a sequence analyzed.
            :param variant: The definition of variant here originates from Sequence ontology ([variant_of]
        (http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This
        element can represent amino acid or nucleic sequence change(including
        insertion,deletion,SNP,etc.)  It can represent some complex mutation or
        segment variation with the assist of CIGAR string.
            :param observedSeq: Sequence that was observed. It is the result marked by referenceSeq along with
        variant records on referenceSeq. This shall start from
        referenceSeq.windowStart and end by referenceSeq.windowEnd.
            :param quality: An experimental feature attribute that defines the quality of the feature in a
        quantitative way, such as a phred quality score ([SO:0001686](http://www.seque
        nceontology.org/browser/current_svn/term/SO:0001686)).
            :param readCoverage: Coverage (read depth or depth) is the average number of reads representing a
        given nucleotide in the reconstructed sequence.
            :param repository: Configurations of the external repository. The repository shall store target's
        observedSeq or records related with target's observedSeq.
            :param pointer: Pointer to next atomic sequence which at most contains one variant.
            :param structureVariant: Information about chromosome structure variation.
        """
        super().__init__(
            resourceType="MolecularSequence",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            type_=type_,
            coordinateSystem=coordinateSystem,
            patient=patient,
            specimen=specimen,
            device=device,
            performer=performer,
            quantity=quantity,
            referenceSeq=referenceSeq,
            variant=variant,
            observedSeq=observedSeq,
            quality=quality,
            readCoverage=readCoverage,
            repository=repository,
            pointer=pointer,
            structureVariant=structureVariant,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return MolecularSequenceSchema.get_schema(include_extension=include_extension)
