from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.substancesourcematerial import (
    SubstanceSourceMaterialSchema,
)

if TYPE_CHECKING:
    pass
    # sourceMaterialClass (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for sourceMaterialClass
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for sourceMaterialClass
    # sourceMaterialType (CodeableConcept)
    # Import for CodeableConcept for sourceMaterialType
    # End Import for CodeableConcept for sourceMaterialType
    # sourceMaterialState (CodeableConcept)
    # Import for CodeableConcept for sourceMaterialState
    # End Import for CodeableConcept for sourceMaterialState
    # organismId (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # organismName (string)
    # parentSubstanceId (Identifier)
    # parentSubstanceName (string)
    # countryOfOrigin (CodeableConcept)
    # Import for CodeableConcept for countryOfOrigin
    # End Import for CodeableConcept for countryOfOrigin
    # geographicalLocation (string)
    # developmentStage (CodeableConcept)
    # Import for CodeableConcept for developmentStage
    # End Import for CodeableConcept for developmentStage
    # fractionDescription (SubstanceSourceMaterial.FractionDescription)
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_fraction_description import (
        SubstanceSourceMaterialFractionDescription,
    )

    # organism (SubstanceSourceMaterial.Organism)
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_organism import (
        SubstanceSourceMaterialOrganism,
    )

    # partDescription (SubstanceSourceMaterial.PartDescription)
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_part_description import (
        SubstanceSourceMaterialPartDescription,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSourceMaterial(FhirResourceBase):
    """
    SubstanceSourceMaterial
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sourceMaterialClass: Optional[CodeableConcept[GenericTypeCode]] = None,
        sourceMaterialType: Optional[CodeableConcept[GenericTypeCode]] = None,
        sourceMaterialState: Optional[CodeableConcept[GenericTypeCode]] = None,
        organismId: Optional[Identifier] = None,
        organismName: Optional[FhirString] = None,
        parentSubstanceId: Optional[FhirList[Identifier]] = None,
        parentSubstanceName: Optional[FhirList[FhirString]] = None,
        countryOfOrigin: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        geographicalLocation: Optional[FhirList[FhirString]] = None,
        developmentStage: Optional[CodeableConcept[GenericTypeCode]] = None,
        fractionDescription: Optional[
            FhirList[SubstanceSourceMaterialFractionDescription]
        ] = None,
        organism: Optional[SubstanceSourceMaterialOrganism] = None,
        partDescription: Optional[
            FhirList[SubstanceSourceMaterialPartDescription]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param sourceMaterialClass: General high level classification of the source material specific to the
        origin of the material.
            :param sourceMaterialType: The type of the source material shall be specified based on a controlled
        vocabulary. For vaccines, this subclause refers to the class of infectious
        agent.
            :param sourceMaterialState: The state of the source material when extracted.
            :param organismId: The unique identifier associated with the source material parent organism
        shall be specified.
            :param organismName: The organism accepted Scientific name shall be provided based on the organism
        taxonomy.
            :param parentSubstanceId: The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the
        substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
            :param parentSubstanceName: The parent substance of the Herbal Drug, or Herbal preparation.
            :param countryOfOrigin: The country where the plant material is harvested or the countries where the
        plasma is sourced from as laid down in accordance with the Plasma Master File.
        For “Plasma-derived substances” the attribute country of origin provides
        information about the countries used for the manufacturing of the Cryopoor
        plama or Crioprecipitate.
            :param geographicalLocation: The place/region where the plant is harvested or the places/regions where the
        animal source material has its habitat.
            :param developmentStage: Stage of life for animals, plants, insects and microorganisms. This
        information shall be provided only when the substance is significantly
        different in these stages (e.g. foetal bovine serum).
            :param fractionDescription: Many complex materials are fractions of parts of plants, animals, or minerals.
        Fraction elements are often necessary to define both Substances and Specified
        Group 1 Substances. For substances derived from Plants, fraction information
        will be captured at the Substance information level ( . Oils, Juices and
        Exudates). Additional information for Extracts, such as extraction solvent
        composition, will be captured at the Specified Substance Group 1 information
        level. For plasma-derived products fraction information will be captured at
        the Substance and the Specified Substance Group 1 levels.
            :param organism: This subclause describes the organism which the substance is derived from. For
        vaccines, the parent organism shall be specified based on these subclause
        elements. As an example, full taxonomy will be described for the Substance
        Name: ., Leaf.
            :param partDescription: To do.
        """
        super().__init__(
            resourceType="SubstanceSourceMaterial",
            id_=id_,
            meta=meta,
            extension=extension,
            sourceMaterialClass=sourceMaterialClass,
            sourceMaterialType=sourceMaterialType,
            sourceMaterialState=sourceMaterialState,
            organismId=organismId,
            organismName=organismName,
            parentSubstanceId=parentSubstanceId,
            parentSubstanceName=parentSubstanceName,
            countryOfOrigin=countryOfOrigin,
            geographicalLocation=geographicalLocation,
            developmentStage=developmentStage,
            fractionDescription=fractionDescription,
            organism=organism,
            partDescription=partDescription,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return SubstanceSourceMaterialSchema.get_schema(
            include_extension=include_extension
        )
