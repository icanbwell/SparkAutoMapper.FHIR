from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.group import GroupSchema

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.boolean import FhirBoolean
    from spark_auto_mapper_fhir.complex_types.group_type import GroupType
    from spark_auto_mapper_fhir.complex_types.boolean import FhirBoolean
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.acme_chol_codes_blood import ACMECholCodesBloodCode
    # End Import for CodeableConcept for code
    from spark_auto_mapper_fhir.complex_types.string import FhirString
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for managingEntity
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.backbone_elements.group_characteristic import GroupCharacteristic
    from spark_auto_mapper_fhir.backbone_elements.group_member import GroupMember


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Group(FhirResourceBase):
    """
    Group
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier ]] = None,
        active: Optional[FhirBoolean ] = None,
        type_: GroupType ,
        actual: FhirBoolean ,
        code: Optional[CodeableConcept[ACMECholCodesBloodCode] ] = None,
        name: Optional[FhirString ] = None,
        quantity: Optional[unsignedInt ] = None,
        managingEntity: Optional[Reference [Union[Organization, RelatedPerson, Practitioner, PractitionerRole]]] = None,
        characteristic: Optional[FhirList[GroupCharacteristic ]] = None,
        member: Optional[FhirList[GroupMember ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param identifier: A unique business identifier for this group.
        :param active: Indicates whether the record for the group is available for use or is merely
    being retained for historical purposes.
        :param type_: Identifies the broad classification of the kind of resources the group
    includes.
        :param actual: If true, indicates that the resource refers to a specific group of real
    individuals.  If false, the group defines a set of intended individuals.
        :param code: Provides a specific type of resource the group includes; e.g. "cow",
    "syringe", etc.
        :param name: A label assigned to the group for human identification and communication.
        :param quantity: A count of the number of resource instances that are part of the group.
        :param managingEntity: Entity responsible for defining and maintaining Group characteristics and/or
    registered members.
        :param characteristic: Identifies traits whose presence r absence is shared by members of the group.
        :param member: Identifies the resource instances that are members of the group.
        """
        super().__init__(
            resourceType="Group",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            active=active,
            type_=type_,
            actual=actual,
            code=code,
            name=name,
            quantity=quantity,
            managingEntity=managingEntity,
            characteristic=characteristic,
            member=member,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return GroupSchema.get_schema(include_extension=include_extension)
