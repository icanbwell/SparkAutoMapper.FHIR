from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.specimen import SpecimenSchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # accessionIdentifier (Identifier)
    # status (SpecimenStatus)
    from spark_auto_mapper_fhir.value_sets.specimen_status import SpecimenStatusCode

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.v2_0487 import V2_0487

    # End Import for CodeableConcept for type_
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.group import Group
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.location import Location

    # receivedTime (dateTime)
    # parent (Reference)
    # Imports for References for parent
    # request (Reference)
    # Imports for References for request
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # collection (Specimen.Collection)
    from spark_auto_mapper_fhir.backbone_elements.specimen_collection import (
        SpecimenCollection,
    )

    # processing (Specimen.Processing)
    from spark_auto_mapper_fhir.backbone_elements.specimen_processing import (
        SpecimenProcessing,
    )

    # container (Specimen.Container)
    from spark_auto_mapper_fhir.backbone_elements.specimen_container import (
        SpecimenContainer,
    )

    # condition (CodeableConcept)
    # Import for CodeableConcept for condition
    from spark_auto_mapper_fhir.value_sets.v2_0493 import V2_0493

    # End Import for CodeableConcept for condition
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Specimen(FhirResourceBase):
    """
    Specimen
    specimen.xsd
        A sample to be used for analysis.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        accessionIdentifier: Optional[Identifier] = None,
        status: Optional[SpecimenStatusCode] = None,
        type_: Optional[CodeableConcept[V2_0487]] = None,
        subject: Optional[
            Reference[Union[Patient, Group, Device, Substance, Location]]
        ] = None,
        receivedTime: Optional[FhirDateTime] = None,
        parent: Optional[FhirList[Reference[Specimen]]] = None,
        request: Optional[FhirList[Reference[ServiceRequest]]] = None,
        collection: Optional[SpecimenCollection] = None,
        processing: Optional[FhirList[SpecimenProcessing]] = None,
        container: Optional[FhirList[SpecimenContainer]] = None,
        condition: Optional[FhirList[CodeableConcept[V2_0493]]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            A sample to be used for analysis.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Id for specimen.
            :param accessionIdentifier: The identifier assigned by the lab when accessioning specimen(s). This is not
        necessarily the same as the specimen identifier, depending on local lab
        procedures.
            :param status: The availability of the specimen.
            :param type_: The kind of material that forms the specimen.
            :param subject: Where the specimen came from. This may be from patient(s), from a location
        (e.g., the source of an environmental sample), or a sampling of a substance or
        a device.
            :param receivedTime: Time when specimen was received for processing or testing.
            :param parent: Reference to the parent (source) specimen which is used when the specimen was
        either derived from or a component of another specimen.
            :param request: Details concerning a service request that required a specimen to be collected.
            :param collection: Details concerning the specimen collection.
            :param processing: Details concerning processing and processing steps for the specimen.
            :param container: The container holding the specimen.  The recursive nature of containers; i.e.
        blood in tube in tray in rack is not addressed here.
            :param condition: A mode or state of being that describes the nature of the specimen.
            :param note: To communicate any details or issues about the specimen or during the specimen
        collection. (for example: broken vial, sent with patient, frozen).
        """
        super().__init__(
            resourceType="Specimen",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            accessionIdentifier=accessionIdentifier,
            status=status,
            type_=type_,
            subject=subject,
            receivedTime=receivedTime,
            parent=parent,
            request=request,
            collection=collection,
            processing=processing,
            container=container,
            condition=condition,
            note=note,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return SpecimenSchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
