from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.immunizationrecommendation import (
    ImmunizationRecommendationSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # patient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for patient
    from spark_auto_mapper_fhir.resources.patient import Patient

    # date (dateTime)
    # authority (Reference)
    # Imports for References for authority
    from spark_auto_mapper_fhir.resources.organization import Organization

    # recommendation (ImmunizationRecommendation.Recommendation)
    from spark_auto_mapper_fhir.backbone_elements.immunization_recommendation_recommendation import (
        ImmunizationRecommendationRecommendation,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationRecommendation(FhirResourceBase):
    """
    ImmunizationRecommendation
        A patient's point-in-time set of recommendations (i.e. forecasting) according
    to a published schedule with optional supporting justification.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        patient: Reference[Union[Patient]],
        date: FhirDateTime,
        authority: Optional[Reference[Union[Organization]]] = None,
        recommendation: FhirList[ImmunizationRecommendationRecommendation],
    ) -> None:
        """
            A patient's point-in-time set of recommendations (i.e. forecasting) according
        to a published schedule with optional supporting justification.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: A unique identifier assigned to this particular recommendation record.
            :param patient: The patient the recommendation(s) are for.
            :param date: The date the immunization recommendation(s) were created.
            :param authority: Indicates the authority who published the protocol (e.g. ACIP).
            :param recommendation: Vaccine administration recommendations.
        """
        super().__init__(
            resourceType="ImmunizationRecommendation",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            patient=patient,
            date=date,
            authority=authority,
            recommendation=recommendation,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return ImmunizationRecommendationSchema.get_schema(
            include_extension=include_extension
        )
