from __future__ import annotations
from typing import List, Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.imagingstudy import ImagingStudySchema

if TYPE_CHECKING:
    pass
    # id_ (id)
    # meta (Meta)
    # implicitRules (uri)
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # contained (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )

    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # status (ImagingStudyStatus)
    from spark_auto_mapper_fhir.value_sets.imaging_study_status import (
        ImagingStudyStatusCode,
    )

    # modality (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for modality
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for modality
    # subject (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subject
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.group import Group

    # encounter (Reference)
    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter

    # started (dateTime)
    # basedOn (Reference)
    # Imports for References for basedOn
    from spark_auto_mapper_fhir.resources.care_plan import CarePlan
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest
    from spark_auto_mapper_fhir.resources.appointment import Appointment
    from spark_auto_mapper_fhir.resources.appointment_response import (
        AppointmentResponse,
    )
    from spark_auto_mapper_fhir.resources.task import Task

    # referrer (Reference)
    # Imports for References for referrer
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # interpreter (Reference)
    # Imports for References for interpreter
    # endpoint (Reference)
    # Imports for References for endpoint
    from spark_auto_mapper_fhir.resources.endpoint import Endpoint

    # numberOfSeries (unsignedInt)
    from spark_auto_mapper_fhir.fhir_types.unsigned_int import FhirUnsignedInt

    # numberOfInstances (unsignedInt)
    # procedureReference (Reference)
    # Imports for References for procedureReference
    from spark_auto_mapper_fhir.resources.procedure import Procedure

    # procedureCode (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for procedureCode
    # End Import for CodeableConcept for procedureCode
    # location (Reference)
    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location

    # reasonCode (CodeableConcept)
    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.procedure_reason_codes import (
        ProcedureReasonCodesCode,
    )

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.media import Media
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation

    # description (string)
    # series (ImagingStudy.Series)
    from spark_auto_mapper_fhir.backbone_elements.imaging_study_series import (
        ImagingStudySeries,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImagingStudy(FhirResourceBase):
    """
    ImagingStudy
    imagingstudy.xsd
        Representation of the content produced in a DICOM imaging study. A study
    comprises a set of series, each of which includes a set of Service-Object Pair
    Instances (SOP Instances - images or other data) acquired or produced in a
    common context.  A series is of only one modality (e.g. X-ray, CT, MR,
    ultrasound), but a study may have multiple series of different modalities.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        use_date_for: Optional[List[str]] = None,
        id_: Optional[FhirId] = None,
        meta: Optional[Meta] = None,
        implicitRules: Optional[FhirUri] = None,
        language: Optional[CommonLanguagesCode] = None,
        text: Optional[Narrative] = None,
        contained: Optional[FhirList[ResourceContainer]] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        status: ImagingStudyStatusCode,
        modality: Optional[FhirList[Coding[GenericTypeCode]]] = None,
        subject: Reference[Union[Patient, Device, Group]],
        encounter: Optional[Reference[Encounter]] = None,
        started: Optional[FhirDateTime] = None,
        basedOn: Optional[
            FhirList[
                Reference[
                    Union[
                        CarePlan, ServiceRequest, Appointment, AppointmentResponse, Task
                    ]
                ]
            ]
        ] = None,
        referrer: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        interpreter: Optional[
            FhirList[Reference[Union[Practitioner, PractitionerRole]]]
        ] = None,
        endpoint: Optional[FhirList[Reference[Endpoint]]] = None,
        numberOfSeries: Optional[FhirUnsignedInt] = None,
        numberOfInstances: Optional[FhirUnsignedInt] = None,
        procedureReference: Optional[Reference[Procedure]] = None,
        procedureCode: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        location: Optional[Reference[Location]] = None,
        reasonCode: Optional[
            FhirList[CodeableConcept[ProcedureReasonCodesCode]]
        ] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[
                        Condition,
                        Observation,
                        Media,
                        DiagnosticReport,
                        DocumentReference,
                    ]
                ]
            ]
        ] = None,
        note: Optional[FhirList[Annotation]] = None,
        description: Optional[FhirString] = None,
        series: Optional[FhirList[ImagingStudySeries]] = None,
    ) -> None:
        """
            Representation of the content produced in a DICOM imaging study. A study
        comprises a set of series, each of which includes a set of Service-Object Pair
        Instances (SOP Instances - images or other data) acquired or produced in a
        common context.  A series is of only one modality (e.g. X-ray, CT, MR,
        ultrasound), but a study may have multiple series of different modalities.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: The logical id of the resource, as used in the URL for the resource. Once
        assigned, this value never changes.
            :param meta: The metadata about the resource. This is content that is maintained by the
        infrastructure. Changes to the content might not always be associated with
        version changes to the resource.
            :param implicitRules: A reference to a set of rules that were followed when the resource was
        constructed, and which must be understood when processing the content. Often,
        this is a reference to an implementation guide that defines the special rules
        along with other profiles etc.
            :param language: The base language in which the resource is written.
            :param text: A human-readable narrative that contains a summary of the resource and can be
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
        Resource definitions may define what content should be represented in the
        narrative to ensure clinical safety.
            :param contained: These resources do not have an independent existence apart from the resource
        that contains them - they cannot be identified independently, and nor can they
        have their own independent transaction scope.
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the resource. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the resource and that modifies the understanding of the element
        that contains it and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer is allowed to define an extension, there is a set of requirements
        that SHALL be met as part of the definition of the extension. Applications
        processing a resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Identifiers for the ImagingStudy such as DICOM Study Instance UID, and
        Accession Number.
            :param status: The current state of the ImagingStudy.
            :param modality: A list of all the series.modality values that are actual acquisition
        modalities, i.e. those in the DICOM Context Group 29 (value set OID
        1.2.840.10008.6.1.19).
            :param subject: The subject, typically a patient, of the imaging study.
            :param encounter: The healthcare event (e.g. a patient and healthcare provider interaction)
        during which this ImagingStudy is made.
            :param started: Date and time the study started.
            :param basedOn: A list of the diagnostic requests that resulted in this imaging study being
        performed.
            :param referrer: The requesting/referring physician.
            :param interpreter: Who read the study and interpreted the images or other content.
            :param endpoint: The network service providing access (e.g., query, view, or retrieval) for the
        study. See implementation notes for information about using DICOM endpoints. A
        study-level endpoint applies to each series in the study, unless overridden by
        a series-level endpoint with the same Endpoint.connectionType.
            :param numberOfSeries: Number of Series in the Study. This value given may be larger than the number
        of series elements this Resource contains due to resource availability,
        security, or other factors. This element should be present if any series
        elements are present.
            :param numberOfInstances: Number of SOP Instances in Study. This value given may be larger than the
        number of instance elements this resource contains due to resource
        availability, security, or other factors. This element should be present if
        any instance elements are present.
            :param procedureReference: The procedure which this ImagingStudy was part of.
            :param procedureCode: The code for the performed procedure type.
            :param location: The principal physical location where the ImagingStudy was performed.
            :param reasonCode: Description of clinical condition indicating why the ImagingStudy was
        requested.
            :param reasonReference: Indicates another resource whose existence justifies this Study.
            :param note: Per the recommended DICOM mapping, this element is derived from the Study
        Description attribute (0008,1030). Observations or findings about the imaging
        study should be recorded in another resource, e.g. Observation, and not in
        this element.
            :param description: The Imaging Manager description of the study. Institution-generated
        description or classification of the Study (component) performed.
            :param series: Each study has one or more series of images or other content.
        """
        super().__init__(
            resourceType="ImagingStudy",
            id_=id_,
            meta=meta,
            implicitRules=implicitRules,
            language=language,
            text=text,
            contained=contained,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            status=status,
            modality=modality,
            subject=subject,
            encounter=encounter,
            started=started,
            basedOn=basedOn,
            referrer=referrer,
            interpreter=interpreter,
            endpoint=endpoint,
            numberOfSeries=numberOfSeries,
            numberOfInstances=numberOfInstances,
            procedureReference=procedureReference,
            procedureCode=procedureCode,
            location=location,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            note=note,
            description=description,
            series=series,
        )

        self.use_date_for = use_date_for

    def get_schema(
        self, include_extension: bool, extension_fields: Optional[List[str]] = None
    ) -> Optional[Union[StructType, DataType]]:
        return ImagingStudySchema.get_schema(
            include_extension=include_extension,
            extension_fields=extension_fields,
            use_date_for=self.use_date_for,
        )
