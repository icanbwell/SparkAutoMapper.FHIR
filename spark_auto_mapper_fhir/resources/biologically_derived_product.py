from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.biologicallyderivedproduct import (
    BiologicallyDerivedProductSchema,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # productCategory (BiologicallyDerivedProductCategory)
    from spark_auto_mapper_fhir.value_sets.biologically_derived_product_category import (
        BiologicallyDerivedProductCategoryCode,
    )

    # productCode (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for productCode
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for productCode
    # status (BiologicallyDerivedProductStatus)
    from spark_auto_mapper_fhir.value_sets.biologically_derived_product_status import (
        BiologicallyDerivedProductStatusCode,
    )

    # request (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for request
    from spark_auto_mapper_fhir.resources.service_request import ServiceRequest

    # quantity (integer)
    # parent (Reference)
    # Imports for References for parent
    # collection (BiologicallyDerivedProduct.Collection)
    from spark_auto_mapper_fhir.backbone_elements.biologically_derived_product_collection import (
        BiologicallyDerivedProductCollection,
    )

    # processing (BiologicallyDerivedProduct.Processing)
    from spark_auto_mapper_fhir.backbone_elements.biologically_derived_product_processing import (
        BiologicallyDerivedProductProcessing,
    )

    # manipulation (BiologicallyDerivedProduct.Manipulation)
    from spark_auto_mapper_fhir.backbone_elements.biologically_derived_product_manipulation import (
        BiologicallyDerivedProductManipulation,
    )

    # storage (BiologicallyDerivedProduct.Storage)
    from spark_auto_mapper_fhir.backbone_elements.biologically_derived_product_storage import (
        BiologicallyDerivedProductStorage,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BiologicallyDerivedProduct(FhirResourceBase):
    """
    BiologicallyDerivedProduct
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        productCategory: Optional[BiologicallyDerivedProductCategoryCode] = None,
        productCode: Optional[CodeableConcept[GenericTypeCode]] = None,
        status: Optional[BiologicallyDerivedProductStatusCode] = None,
        request: Optional[FhirList[Reference[Union[ServiceRequest]]]] = None,
        quantity: Optional[FhirInteger] = None,
        parent: Optional[FhirList[Reference[Union[BiologicallyDerivedProduct]]]] = None,
        collection: Optional[BiologicallyDerivedProductCollection] = None,
        processing: Optional[FhirList[BiologicallyDerivedProductProcessing]] = None,
        manipulation: Optional[BiologicallyDerivedProductManipulation] = None,
        storage: Optional[FhirList[BiologicallyDerivedProductStorage]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: This records identifiers associated with this biologically derived product
        instance that are defined by business processes and/or used to refer to it
        when a direct URL reference to the resource itself is not appropriate (e.g. in
        CDA documents, or in written / printed documentation).
            :param productCategory: Broad category of this product.
            :param productCode: A code that identifies the kind of this biologically derived product (SNOMED
        Ctcode).
            :param status: Whether the product is currently available.
            :param request: Procedure request to obtain this biologically derived product.
            :param quantity: Number of discrete units within this product.
            :param parent: Parent product (if any).
            :param collection: How this product was collected.
            :param processing: Any processing of the product during collection that does not change the
        fundamental nature of the product. For example adding anti-coagulants during
        the collection of Peripheral Blood Stem Cells.
            :param manipulation: Any manipulation of product post-collection that is intended to alter the
        product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral
        Blood Stem Cells to make it more suitable for infusion.
            :param storage: Product storage.
        """
        super().__init__(
            resourceType="BiologicallyDerivedProduct",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            productCategory=productCategory,
            productCode=productCode,
            status=status,
            request=request,
            quantity=quantity,
            parent=parent,
            collection=collection,
            processing=processing,
            manipulation=manipulation,
            storage=storage,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return BiologicallyDerivedProductSchema.get_schema(
            include_extension=include_extension
        )
