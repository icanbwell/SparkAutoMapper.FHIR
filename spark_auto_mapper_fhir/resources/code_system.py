from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

# noinspection PyPackageRequirements
from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_resource_base import FhirResourceBase
from spark_fhir_schemas.r4.resources.codesystem import CodeSystemSchema

if TYPE_CHECKING:
    pass
    # url (uri)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # version (string)
    # name (string)
    # title (string)
    # status (PublicationStatus)
    from spark_auto_mapper_fhir.value_sets.publication_status import (
        PublicationStatusCode,
    )

    # experimental (boolean)
    # date (dateTime)
    # publisher (string)
    # contact (ContactDetail)
    from spark_auto_mapper_fhir.complex_types.contact_detail import ContactDetail

    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # useContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # jurisdiction (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.jurisdiction_value_set import (
        JurisdictionValueSetCode,
    )

    # End Import for CodeableConcept for jurisdiction
    # purpose (markdown)
    # copyright (markdown)
    # caseSensitive (boolean)
    # valueSet (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # hierarchyMeaning (CodeSystemHierarchyMeaning)
    from spark_auto_mapper_fhir.value_sets.code_system_hierarchy_meaning import (
        CodeSystemHierarchyMeaningCode,
    )

    # compositional (boolean)
    # versionNeeded (boolean)
    # content (CodeSystemContentMode)
    from spark_auto_mapper_fhir.value_sets.code_system_content_mode import (
        CodeSystemContentModeCode,
    )

    # supplements (canonical)
    # count (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt

    # filter (CodeSystem.Filter)
    from spark_auto_mapper_fhir.backbone_elements.code_system_filter import (
        CodeSystemFilter,
    )

    # property (CodeSystem.Property)
    from spark_auto_mapper_fhir.backbone_elements.code_system_property import (
        CodeSystemProperty,
    )

    # concept (CodeSystem.Concept)
    from spark_auto_mapper_fhir.backbone_elements.code_system_concept import (
        CodeSystemConcept,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CodeSystem(FhirResourceBase):
    """
    CodeSystem
        The CodeSystem resource is used to declare the existence of and describe a
    code system or code system supplement and its key properties, and optionally
    define a part or all of its content.
        If the element is present, it must have either a @value, an @id, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        url: Optional[FhirUri] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        version: Optional[FhirString] = None,
        name: Optional[FhirString] = None,
        title: Optional[FhirString] = None,
        status: PublicationStatusCode,
        experimental: Optional[FhirBoolean] = None,
        date: Optional[FhirDateTime] = None,
        publisher: Optional[FhirString] = None,
        contact: Optional[FhirList[ContactDetail]] = None,
        description: Optional[FhirMarkdown] = None,
        useContext: Optional[FhirList[UsageContext]] = None,
        jurisdiction: Optional[
            FhirList[CodeableConcept[JurisdictionValueSetCode]]
        ] = None,
        purpose: Optional[FhirMarkdown] = None,
        copyright: Optional[FhirMarkdown] = None,
        caseSensitive: Optional[FhirBoolean] = None,
        valueSet: Optional[FhirCanonical] = None,
        hierarchyMeaning: Optional[CodeSystemHierarchyMeaningCode] = None,
        compositional: Optional[FhirBoolean] = None,
        versionNeeded: Optional[FhirBoolean] = None,
        content: CodeSystemContentModeCode,
        supplements: Optional[FhirCanonical] = None,
        count: Optional[unsignedInt] = None,
        filter: Optional[FhirList[CodeSystemFilter]] = None,
        property: Optional[FhirList[CodeSystemProperty]] = None,
        concept: Optional[FhirList[CodeSystemConcept]] = None,
    ) -> None:
        """
            The CodeSystem resource is used to declare the existence of and describe a
        code system or code system supplement and its key properties, and optionally
        define a part or all of its content.
            If the element is present, it must have either a @value, an @id, or extensions

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param url: An absolute URI that is used to identify this code system when it is
        referenced in a specification, model, design or an instance; also called its
        canonical identifier. This SHOULD be globally unique and SHOULD be a literal
        address at which at which an authoritative instance of this code system is (or
        will be) published. This URL can be the target of a canonical reference. It
        SHALL remain the same when the code system is stored on different servers.
        This is used in [Coding](datatypes.html#Coding).system.
            :param identifier: A formal identifier that is used to identify this code system when it is
        represented in other formats, or referenced in a specification, model, design
        or an instance.
            :param version: The identifier that is used to identify this version of the code system when
        it is referenced in a specification, model, design or instance. This is an
        arbitrary value managed by the code system author and is not expected to be
        globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
        managed version is not available. There is also no expectation that versions
        can be placed in a lexicographical sequence. This is used in
        [Coding](datatypes.html#Coding).version.
            :param name: A natural language name identifying the code system. This name should be
        usable as an identifier for the module by machine processing applications such
        as code generation.
            :param title: A short, descriptive, user-friendly title for the code system.
            :param status: The date (and optionally time) when the code system resource was created or
        revised.
            :param experimental: A Boolean value to indicate that this code system is authored for testing
        purposes (or education/evaluation/marketing) and is not intended to be used
        for genuine usage.
            :param date: The date  (and optionally time) when the code system was published. The date
        must change when the business version changes and it must change if the status
        code changes. In addition, it should change when the substantive content of
        the code system changes.
            :param publisher: The name of the organization or individual that published the code system.
            :param contact: Contact details to assist a user in finding and communicating with the
        publisher.
            :param description: A free text natural language description of the code system from a consumer's
        perspective.
            :param useContext: The content was developed with a focus and intent of supporting the contexts
        that are listed. These contexts may be general categories (gender, age, ...)
        or may be references to specific programs (insurance plans, studies, ...) and
        may be used to assist with indexing and searching for appropriate code system
        instances.
            :param jurisdiction: A legal or geographic region in which the code system is intended to be used.
            :param purpose: Explanation of why this code system is needed and why it has been designed as
        it has.
            :param copyright: A copyright statement relating to the code system and/or its contents.
        Copyright statements are generally legal restrictions on the use and
        publishing of the code system.
            :param caseSensitive: If code comparison is case sensitive when codes within this system are
        compared to each other.
            :param valueSet: Canonical reference to the value set that contains the entire code system.
            :param hierarchyMeaning: The meaning of the hierarchy of concepts as represented in this resource.
            :param compositional: The code system defines a compositional (post-coordination) grammar.
            :param versionNeeded: This flag is used to signify that the code system does not commit to concept
        permanence across versions. If true, a version must be specified when
        referencing this code system.
            :param content: The extent of the content of the code system (the concepts and codes it
        defines) are represented in this resource instance.
            :param supplements: The canonical URL of the code system that this code system supplement is
        adding designations and properties to.
            :param count: The total number of concepts defined by the code system. Where the code system
        has a compositional grammar, the basis of this count is defined by the system
        steward.
            :param filter: A filter that can be used in a value set compose statement when selecting
        concepts using a filter.
            :param property: A property defines an additional slot through which additional information can
        be provided about a concept.
            :param concept: Concepts that are in the code system. The concept definitions are inherently
        hierarchical, but the definitions must be consulted to determine what the
        meanings of the hierarchical relationships are.
        """
        super().__init__(
            resourceType="CodeSystem",
            id_=id_,
            meta=meta,
            extension=extension,
            url=url,
            identifier=identifier,
            version=version,
            name=name,
            title=title,
            status=status,
            experimental=experimental,
            date=date,
            publisher=publisher,
            contact=contact,
            description=description,
            useContext=useContext,
            jurisdiction=jurisdiction,
            purpose=purpose,
            copyright=copyright,
            caseSensitive=caseSensitive,
            valueSet=valueSet,
            hierarchyMeaning=hierarchyMeaning,
            compositional=compositional,
            versionNeeded=versionNeeded,
            content=content,
            supplements=supplements,
            count=count,
            filter=filter,
            property=property,
            concept=concept,
        )

    def get_schema(
        self, include_extension: bool
    ) -> Optional[Union[StructType, DataType]]:
        return CodeSystemSchema.get_schema(include_extension=include_extension)
