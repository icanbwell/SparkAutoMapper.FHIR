from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (TypeRestfulInteraction)
    from spark_auto_mapper_fhir.value_sets.type_restful_interaction import (
        TypeRestfulInteractionCode,
    )

    # documentation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementInteraction(FhirBackboneElementBase):
    """
    CapabilityStatement.Interaction
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: TypeRestfulInteractionCode,
        documentation: Optional[FhirMarkdown] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: Coded identifier of the operation, supported by the system resource.
            :param documentation: Guidance specific to the implementation of this operation, such as 'delete is
        a logical delete' or 'updates are only allowed with version id' or 'creates
        permitted from pre-authorized certificates only'.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            documentation=documentation,
        )
