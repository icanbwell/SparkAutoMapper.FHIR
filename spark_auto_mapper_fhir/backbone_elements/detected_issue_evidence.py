from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.manifestation_and_symptom_codes import ManifestationAndSymptomCodes
    # End Import for CodeableConcept for code
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for detail
    from spark_auto_mapper_fhir.resources.resource import Resource


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DetectedIssueEvidence(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[FhirList[CodeableConcept[ManifestationAndSymptomCodes] ]] = None,
        detail: Optional[FhirList[Reference [Union[Resource]]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param code: A manifestation that led to the recording of this detected issue.
        :param detail: Links to resources that constitute evidence for the detected issue such as a
    GuidanceResponse or MeasureReport.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            detail=detail,
        )
