from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.manifestation_and_symptom_codes import (
        ManifestationAndSymptomCodesCode,
    )

    # End Import for CodeableConcept for code
    # detail (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for detail


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DetectedIssueEvidence(FhirBackboneElementBase):
    """
    DetectedIssue.Evidence
        Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[
            FhirList[CodeableConcept[ManifestationAndSymptomCodesCode]]
        ] = None,
        detail: Optional[FhirList[Reference[Union[Resource]]]] = None,
    ) -> None:
        """
            Indicates an actual or potential clinical issue with or between one or more
        active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
        Ineffective treatment frequency, Procedure-condition conflict, etc.

            :param id_: id of resource
            :param extension: extensions
            :param code: A manifestation that led to the recording of this detected issue.
            :param detail: Links to resources that constitute evidence for the detected issue such as a
        GuidanceResponse or MeasureReport.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            detail=detail,
        )
