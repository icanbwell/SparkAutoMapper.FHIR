from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_benefit1 import (
        InsurancePlanBenefit1,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanSpecificCost(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: CodeableConcept,
        benefit: Optional[FhirList[InsurancePlanBenefit1]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param category: General category of benefit (Medical; Dental; Vision; Drug; Mental Health;
        Substance Abuse; Hospice, Home Health).
            :param benefit: List of the specific benefits under this category of benefit.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            benefit=benefit,
        )
