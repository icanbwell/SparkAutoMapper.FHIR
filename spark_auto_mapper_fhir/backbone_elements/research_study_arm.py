from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # name (string)
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # description (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ResearchStudyArm(FhirBackboneElementBase):
    """
    ResearchStudy.Arm
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirString,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        description: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param name: Unique, human-readable label for this arm of the study.
            :param type_: Categorization of study arm, e.g. experimental, active comparator, placebo
        comparater.
            :param description: A succinct description of the path through the study that would be followed by
        a subject adhering to this arm.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            type_=type_,
            description=description,
        )
