from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # target (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for target
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.person import Person

    # assurance (IdentityAssuranceLevel)
    from spark_auto_mapper_fhir.complex_types.identity_assurance_level import (
        IdentityAssuranceLevel,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PersonLink(FhirBackboneElementBase):
    """
    Person.Link
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        target: Reference[Union[Patient, Practitioner, RelatedPerson, Person]],
        assurance: Optional[IdentityAssuranceLevel] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param target: The resource to which this actual person is associated.
        :param assurance: Level of assurance that this link is associated with the target resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            target=target,
            assurance=assurance,
        )
