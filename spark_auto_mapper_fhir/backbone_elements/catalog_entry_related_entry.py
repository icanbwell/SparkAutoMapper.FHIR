from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # relationtype (CatalogEntryRelationType)
    from spark_auto_mapper_fhir.complex_types.catalog_entry_relation_type import (
        CatalogEntryRelationType,
    )

    # item (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for item
    from spark_auto_mapper_fhir.resources.catalog_entry import CatalogEntry


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CatalogEntryRelatedEntry(FhirBackboneElementBase):
    """
    CatalogEntry.RelatedEntry
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        relationtype: CatalogEntryRelationType,
        item: Reference[Union[CatalogEntry]],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param relationtype: The type of relation to the related item: child, parent, packageContent,
        containerPackage, usedIn, uses, requires, etc.
            :param item: The reference to the related item.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            relationtype=relationtype,
            item=item,
        )
