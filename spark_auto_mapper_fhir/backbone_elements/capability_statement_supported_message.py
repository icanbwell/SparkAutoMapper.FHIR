from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # mode (EventCapabilityMode)
    from spark_auto_mapper_fhir.value_sets.event_capability_mode import (
        EventCapabilityModeCode,
    )

    # definition (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementSupportedMessage(FhirBackboneElementBase):
    """
    CapabilityStatement.SupportedMessage
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        mode: EventCapabilityModeCode,
        definition: FhirCanonical,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.

            :param id_: id of resource
            :param extension: extensions
            :param mode: The mode of this event declaration - whether application is sender or
        receiver.
            :param definition: Points to a message definition that identifies the messaging event, message
        structure, allowed responses, etc.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            mode=mode,
            definition=definition,
        )
