from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # message (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # situation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MessageDefinitionAllowedResponse(FhirBackboneElementBase):
    """
    MessageDefinition.AllowedResponse
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        message: FhirCanonical,
        situation: Optional[FhirMarkdown] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param message: A reference to the message definition that must be adhered to by this
        supported response.
            :param situation: Provides a description of the circumstances in which this response should be
        used (as opposed to one of the alternative responses).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            message=message,
            situation=situation,
        )
