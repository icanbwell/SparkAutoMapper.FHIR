from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for function
    from spark_auto_mapper_fhir.value_sets.procedure_performer_role_codes import (
        ProcedurePerformerRoleCodes,
    )

    # End Import for CodeableConcept for function
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for actor
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for onBehalfOf
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ProcedurePerformer(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        function: Optional[CodeableConcept[ProcedurePerformerRoleCodes]] = None,
        actor: Reference[
            Union[
                Practitioner,
                PractitionerRole,
                Organization,
                Patient,
                RelatedPerson,
                Device,
            ]
        ],
        onBehalfOf: Optional[Reference[Union[Organization]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param function: Distinguishes the type of involvement of the performer in the procedure. For
        example, surgeon, anaesthetist, endoscopist.
            :param actor: The practitioner who was involved in the procedure.
            :param onBehalfOf: The organization the device or practitioner was acting on behalf of.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            function=function,
            actor=actor,
            onBehalfOf=onBehalfOf,
        )
