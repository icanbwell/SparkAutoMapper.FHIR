from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (LinkageType)
    from spark_auto_mapper_fhir.value_sets.linkage_type import LinkageTypeCode

    # resource (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for resource


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class LinkageItem(FhirBackboneElementBase):
    """
    Linkage.Item
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: LinkageTypeCode,
        resource: Reference[Union[Resource]],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: Distinguishes which item is "source of truth" (if any) and which items are no
        longer considered to be current representations.
            :param resource: The resource instance being linked as part of the group.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            resource=resource,
        )
