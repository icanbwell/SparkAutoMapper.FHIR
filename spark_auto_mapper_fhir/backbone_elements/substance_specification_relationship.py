from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for source
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecificationRelationship(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        relationship: Optional[CodeableConcept ] = None,
        isDefining: Optional[FhirBoolean ] = None,
        amountRatioLowLimit: Optional[Ratio ] = None,
        amountType: Optional[CodeableConcept ] = None,
        source: Optional[FhirList[Reference [Union[DocumentReference]]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param relationship: For example "salt to parent", "active moiety", "starting material".
        :param isDefining: For example where an enzyme strongly bonds with a particular substance, this
    is a defining relationship for that enzyme, out of several possible substance
    relationships.
        :param amountRatioLowLimit: For use when the numeric.
        :param amountType: An operator for the amount, for example "average", "approximately", "less
    than".
        :param source: Supporting literature.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            relationship=relationship,
            isDefining=isDefining,
            amountRatioLowLimit=amountRatioLowLimit,
            amountType=amountType,
            source=source,
        )
