from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.backbone_elements.structure_map_source import (
        StructureMapSource,
    )
    from spark_auto_mapper_fhir.backbone_elements.structure_map_target import (
        StructureMapTarget,
    )
    from spark_auto_mapper_fhir.backbone_elements.structure_map_rule import (
        StructureMapRule,
    )
    from spark_auto_mapper_fhir.backbone_elements.structure_map_dependent import (
        StructureMapDependent,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapRule(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: id,
        source: FhirList[StructureMapSource],
        target: Optional[FhirList[StructureMapTarget]] = None,
        rule: Optional[FhirList[StructureMapRule]] = None,
        dependent: Optional[FhirList[StructureMapDependent]] = None,
        documentation: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param name: Name of the rule for internal references.
        :param source: Source inputs to the mapping.
        :param target: Content to create because of this mapping rule.
        :param rule: Rules contained in this rule.
        :param dependent: Which other rules to apply in the context of this rule.
        :param documentation: Documentation for this instance of data.
        """
        super().__init__(
            resourceType="StructureMapRule",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            source=source,
            target=target,
            rule=rule,
            dependent=dependent,
            documentation=documentation,
        )
