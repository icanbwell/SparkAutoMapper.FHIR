from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # link (TestScript.Link)
    from spark_auto_mapper_fhir.backbone_elements.test_script_link import TestScriptLink
    # capability (TestScript.Capability)
    from spark_auto_mapper_fhir.backbone_elements.test_script_capability import TestScriptCapability


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptMetadata(FhirBackboneElementBase):
    """
    TestScript.Metadata
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        link: Optional[FhirList[TestScriptLink ]] = None,
        capability: FhirList[TestScriptCapability ],
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param link: A link to the FHIR specification that this test is covering.
        :param capability: Capabilities that must exist and are assumed to function correctly on the FHIR
    server being tested.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            link=link,
            capability=capability,
        )
