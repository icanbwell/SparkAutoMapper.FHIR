from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # itemCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for itemCodeableConcept
    # Import for CodeableConcept for itemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.condition_or__problem_or__diagnosis_codes import (
        Condition_or_Problem_or_DiagnosisCodesCode,
    )

    # End Import for CodeableConcept for itemCodeableConcept
    # itemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for itemReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.media import Media

    # basis (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClinicalImpressionFinding(FhirBackboneElementBase):
    """
    ClinicalImpression.Finding
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        itemCodeableConcept: Optional[
            CodeableConcept[Condition_or_Problem_or_DiagnosisCodesCode]
        ] = None,
        itemReference: Optional[Reference[Union[Condition, Observation, Media]]] = None,
        basis: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param itemCodeableConcept: Specific text or code for finding or diagnosis, which may include ruled-out or
        resolved conditions.
            :param itemReference: Specific reference for finding or diagnosis, which may include ruled-out or
        resolved conditions.
            :param basis: Which investigations support finding or diagnosis.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            itemCodeableConcept=itemCodeableConcept,
            itemReference=itemReference,
            basis=basis,
        )
