from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.episode_of_care_status import (
        EpisodeOfCareStatus,
    )
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EpisodeOfCareStatusHistory(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        status: EpisodeOfCareStatus,
        period: Period,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param status: planned | waitlist | active | onhold | finished | cancelled.
        :param period: The period during this EpisodeOfCare that the specific status applied.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            status=status,
            period=period,
        )
