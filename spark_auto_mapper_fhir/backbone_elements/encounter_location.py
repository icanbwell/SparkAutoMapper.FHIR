from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.complex_types.encounter_location_status import EncounterLocationStatus
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EncounterLocation(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        location: Reference[Union[Location]],
        status: Optional[EncounterLocationStatus] = None,
        physicalType: Optional[CodeableConcept] = None,
        period: Optional[Period] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param location: The location where the encounter takes place.
        :param status: The status of the participants' presence at the specified location during the
    period specified. If the participant is no longer at the location, then the
    period will have an end date/time.
        :param physicalType: This will be used to specify the required levels (bed/ward/room/etc.) desired
    to be recorded to simplify either messaging or query.
        :param period: Time period during which the patient was present at the location.
        """
        super().__init__(
            resourceType="EncounterLocation",
            id_=id_,
            meta=meta,
            extension=extension,
            location=location,
            status=status,
            physicalType=physicalType,
            period=period,
        )
