from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.binding_strength import BindingStrength
    from spark_auto_mapper_fhir.complex_types.canonical import canonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionBinding(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        strength: BindingStrength,
        description: Optional[FhirString] = None,
        valueSet: Optional[canonical] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param strength: Indicates the degree of conformance expectations associated with this binding
        - that is, the degree to which the provided value set must be adhered to in
        the instances.
            :param description: Describes the intended use of this particular set of codes.
            :param valueSet: Refers to the value set that identifies the set of codes the binding refers
        to.
        """
        super().__init__(
            resourceType="ElementDefinitionBinding",
            id_=id_,
            meta=meta,
            extension=extension,
            strength=strength,
            description=description,
            valueSet=valueSet,
        )
