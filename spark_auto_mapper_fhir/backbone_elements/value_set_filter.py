from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # property (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # op (FilterOperator)
    from spark_auto_mapper_fhir.value_sets.filter_operator import FilterOperatorCode

    # value (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ValueSetFilter(FhirBackboneElementBase):
    """
    ValueSet.Filter
        A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        property: code,
        op: FilterOperatorCode,
        value: FhirString,
    ) -> None:
        """
            A ValueSet resource instance specifies a set of codes drawn from one or more
        code systems, intended for use in a particular context. Value sets link
        between [[[CodeSystem]]] definitions and their use in [coded
        elements](terminologies.html).

            :param id_: id of resource
            :param extension: extensions
            :param property: A code that identifies a property or a filter defined in the code system.
            :param op: The kind of operation to perform as a part of the filter criteria.
            :param value: The match value may be either a code defined by the system, or a string value,
        which is a regex match on the literal string of the property value  (if the
        filter represents a property defined in CodeSystem) or of the system filter
        value (if the filter represents a filter defined in CodeSystem) when the
        operation is 'regex', or one of the values (true and false), when the
        operation is 'exists'.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            property=property,
            op=op,
            value=value,
        )
