from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # sequence (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # chargeItemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for chargeItemReference
    from spark_auto_mapper_fhir.resources.charge_item import ChargeItem

    # chargeItemCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for chargeItemCodeableConcept
    # Import for CodeableConcept for chargeItemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for chargeItemCodeableConcept
    # priceComponent (Invoice.PriceComponent)
    from spark_auto_mapper_fhir.backbone_elements.invoice_price_component import (
        InvoicePriceComponent,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InvoiceLineItem(FhirBackboneElementBase):
    """
    Invoice.LineItem
        Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: Optional[FhirPositiveInt] = None,
        chargeItemReference: Optional[Reference[Union[ChargeItem]]] = None,
        chargeItemCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        priceComponent: Optional[FhirList[InvoicePriceComponent]] = None,
    ) -> None:
        """
            Invoice containing collected ChargeItems from an Account with calculated
        individual and total price for Billing purpose.

            :param id_: id of resource
            :param extension: extensions
            :param sequence: Sequence in which the items appear on the invoice.
            :param chargeItemReference: None
            :param chargeItemCodeableConcept: None
            :param priceComponent: The price for a ChargeItem may be calculated as a base price with
        surcharges/deductions that apply in certain conditions. A ChargeItemDefinition
        resource that defines the prices, factors and conditions that apply to a
        billing code is currently under development. The priceComponent element can be
        used to offer transparency to the recipient of the Invoice as to how the
        prices have been calculated.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            chargeItemReference=chargeItemReference,
            chargeItemCodeableConcept=chargeItemCodeableConcept,
            priceComponent=priceComponent,
        )
