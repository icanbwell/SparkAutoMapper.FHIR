from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.dose_and_rate_type import DoseAndRateTypeCode

    # End Import for CodeableConcept for type_
    # doseRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # doseQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # rateRatio (Ratio)
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio

    # rateRange (Range)
    # rateQuantity (Quantity)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DosageDoseAndRate(FhirBackboneElementBase):
    """
    Dosage.DoseAndRate
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[CodeableConcept[DoseAndRateTypeCode]] = None,
        doseRange: Optional[Range] = None,
        doseQuantity: Optional[Quantity] = None,
        rateRatio: Optional[Ratio] = None,
        rateRange: Optional[Range] = None,
        rateQuantity: Optional[Quantity] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: The kind of dose or rate specified, for example, ordered or calculated.
        :param doseRange: None
        :param doseQuantity: None
        :param rateRatio: None
        :param rateRange: None
        :param rateQuantity: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            doseRange=doseRange,
            doseQuantity=doseQuantity,
            rateRatio=rateRatio,
            rateRange=rateRange,
            rateQuantity=rateQuantity,
        )
