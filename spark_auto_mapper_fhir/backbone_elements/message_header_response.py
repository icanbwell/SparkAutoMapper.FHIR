from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.response_type import ResponseType
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for details
    from spark_auto_mapper_fhir.resources.operation_outcome import OperationOutcome


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MessageHeaderResponse(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: id,
        code: ResponseType,
        details: Optional[Reference[Union[OperationOutcome]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: The MessageHeader.id of the message to which this message is a response.
            :param code: Code that identifies the type of response to the message - whether it was
        successful or not, and whether it should be resent or not.
            :param details: Full details of any issues found in the message.
        """
        super().__init__(
            resourceType="MessageHeaderResponse",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            code=code,
            details=details,
        )
