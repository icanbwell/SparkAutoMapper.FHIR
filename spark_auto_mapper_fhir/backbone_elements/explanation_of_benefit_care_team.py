from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # sequence (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # provider (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for provider
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # responsible (boolean)
    # role (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for role
    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.claim_care_team_role_codes import (
        ClaimCareTeamRoleCodesCode,
    )

    # End Import for CodeableConcept for role
    # qualification (CodeableConcept)
    # End Import for References for qualification
    # Import for CodeableConcept for qualification
    from spark_auto_mapper_fhir.value_sets.example_provider_qualification_codes import (
        ExampleProviderQualificationCodesCode,
    )

    # End Import for CodeableConcept for qualification


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitCareTeam(FhirBackboneElementBase):
    """
    ExplanationOfBenefit.CareTeam
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: FhirPositiveInt,
        provider: Reference[Union[Practitioner, PractitionerRole, Organization]],
        responsible: Optional[FhirBoolean] = None,
        role: Optional[CodeableConcept[ClaimCareTeamRoleCodesCode]] = None,
        qualification: Optional[
            CodeableConcept[ExampleProviderQualificationCodesCode]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param sequence: A number to uniquely identify care team entries.
            :param provider: Member of the team who provided the product or service.
            :param responsible: The party who is billing and/or responsible for the claimed products or
        services.
            :param role: The lead, assisting or supervising practitioner and their discipline if a
        multidisciplinary team.
            :param qualification: The qualification of the practitioner which is applicable for this service.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            provider=provider,
            responsible=responsible,
            role=role,
            qualification=qualification,
        )
