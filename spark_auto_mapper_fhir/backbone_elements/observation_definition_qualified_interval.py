from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.observation_range_category import (
        ObservationRangeCategory,
    )
    from spark_auto_mapper_fhir.complex_types.range import Range
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for context
    from spark_auto_mapper_fhir.value_sets.observationreferencerangemeaningcodes import (
        Observationreferencerangemeaningcodes,
    )

    # End Import for CodeableConcept for context
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.administrative_gender import (
        AdministrativeGender,
    )
    from spark_auto_mapper_fhir.complex_types.range import Range
    from spark_auto_mapper_fhir.complex_types.range import Range


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ObservationDefinitionQualifiedInterval(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: Optional[ObservationRangeCategory] = None,
        range: Optional[Range] = None,
        context: Optional[
            CodeableConcept[Observationreferencerangemeaningcodes]
        ] = None,
        appliesTo: Optional[FhirList[CodeableConcept]] = None,
        gender: Optional[AdministrativeGender] = None,
        age: Optional[Range] = None,
        gestationalAge: Optional[Range] = None,
        condition: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param category: The category of interval of values for continuous or ordinal observations
        conforming to this ObservationDefinition.
            :param range: The low and high values determining the interval. There may be only one of the
        two.
            :param context: Codes to indicate the health context the range applies to. For example, the
        normal or therapeutic range.
            :param appliesTo: Codes to indicate the target population this reference range applies to.
            :param gender: Sex of the population the range applies to.
            :param age: The age at which this reference range is applicable. This is a neonatal age
        (e.g. number of weeks at term) if the meaning says so.
            :param gestationalAge: The gestational age to which this reference range is applicable, in the
        context of pregnancy.
            :param condition: Text based condition for which the reference range is valid.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            range=range,
            context=context,
            appliesTo=appliesTo,
            gender=gender,
            age=age,
            gestationalAge=gestationalAge,
            condition=condition,
        )
