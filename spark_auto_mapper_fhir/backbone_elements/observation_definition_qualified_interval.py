from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # category (ObservationRangeCategory)
    from spark_auto_mapper_fhir.value_sets.observation_range_category import (
        ObservationRangeCategoryCode,
    )

    # range (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # context (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for context
    # Import for CodeableConcept for context
    from spark_auto_mapper_fhir.value_sets.observation_reference_range_meaning_codes import (
        ObservationReferenceRangeMeaningCodesCode,
    )

    # End Import for CodeableConcept for context
    # appliesTo (CodeableConcept)
    # End Import for References for appliesTo
    # Import for CodeableConcept for appliesTo
    from spark_auto_mapper_fhir.value_sets.observation_reference_range_applies_to_codes import (
        ObservationReferenceRangeAppliesToCodesCode,
    )

    # End Import for CodeableConcept for appliesTo
    # gender (AdministrativeGender)
    from spark_auto_mapper_fhir.value_sets.administrative_gender import (
        AdministrativeGenderCode,
    )

    # age (Range)
    # gestationalAge (Range)
    # condition (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ObservationDefinitionQualifiedInterval(FhirBackboneElementBase):
    """
    ObservationDefinition.QualifiedInterval
        Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        category: Optional[ObservationRangeCategoryCode] = None,
        range: Optional[Range] = None,
        context: Optional[
            CodeableConcept[ObservationReferenceRangeMeaningCodesCode]
        ] = None,
        appliesTo: Optional[
            FhirList[CodeableConcept[ObservationReferenceRangeAppliesToCodesCode]]
        ] = None,
        gender: Optional[AdministrativeGenderCode] = None,
        age: Optional[Range] = None,
        gestationalAge: Optional[Range] = None,
        condition: Optional[FhirString] = None,
    ) -> None:
        """
            Set of definitional characteristics for a kind of observation or measurement
        produced or consumed by an orderable health care service.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param category: The category of interval of values for continuous or ordinal observations
        conforming to this ObservationDefinition.
            :param range: The low and high values determining the interval. There may be only one of the
        two.
            :param context: Codes to indicate the health context the range applies to. For example, the
        normal or therapeutic range.
            :param appliesTo: Codes to indicate the target population this reference range applies to.
            :param gender: Sex of the population the range applies to.
            :param age: The age at which this reference range is applicable. This is a neonatal age
        (e.g. number of weeks at term) if the meaning says so.
            :param gestationalAge: The gestational age to which this reference range is applicable, in the
        context of pregnancy.
            :param condition: Text based condition for which the reference range is valid.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            category=category,
            range=range,
            context=context,
            appliesTo=appliesTo,
            gender=gender,
            age=age,
            gestationalAge=gestationalAge,
            condition=condition,
        )
