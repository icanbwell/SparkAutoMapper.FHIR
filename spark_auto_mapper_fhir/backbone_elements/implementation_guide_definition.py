from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # grouping (ImplementationGuide.Grouping)
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_grouping import (
        ImplementationGuideGrouping,
    )

    # resource (ImplementationGuide.Resource)
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_resource import (
        ImplementationGuideResource,
    )

    # page (ImplementationGuide.Page)
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_page import (
        ImplementationGuidePage,
    )

    # parameter (ImplementationGuide.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_parameter import (
        ImplementationGuideParameter,
    )

    # template (ImplementationGuide.Template)
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_template import (
        ImplementationGuideTemplate,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuideDefinition(FhirBackboneElementBase):
    """
    ImplementationGuide.Definition
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        grouping: Optional[FhirList[ImplementationGuideGrouping]] = None,
        resource: FhirList[ImplementationGuideResource],
        page: Optional[ImplementationGuidePage] = None,
        parameter: Optional[FhirList[ImplementationGuideParameter]] = None,
        template: Optional[FhirList[ImplementationGuideTemplate]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param grouping: A logical group of resources. Logical groups can be used when building pages.
            :param resource: A resource that is part of the implementation guide. Conformance resources
        (value set, structure definition, capability statements etc.) are obvious
        candidates for inclusion, but any kind of resource can be included as an
        example resource.
            :param page: A page / section in the implementation guide. The root page is the
        implementation guide home page.
            :param parameter: Defines how IG is built by tools.
            :param template: A template for building resources.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            grouping=grouping,
            resource=resource,
            page=page,
            parameter=parameter,
            template=template,
        )
