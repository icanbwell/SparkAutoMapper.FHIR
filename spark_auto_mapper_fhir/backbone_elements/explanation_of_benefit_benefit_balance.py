from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_financial import ExplanationOfBenefitFinancial


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitBenefitBalance(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: CodeableConcept,
        excluded: Optional[boolean] = None,
        name: Optional[string] = None,
        description: Optional[string] = None,
        network: Optional[CodeableConcept] = None,
        unit: Optional[CodeableConcept] = None,
        term: Optional[CodeableConcept] = None,
        financial: Optional[FhirList[ExplanationOfBenefitFinancial]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param category: Code to identify the general type of benefits under which products and
    services are provided.
        :param excluded: True if the indicated class of service is excluded from the plan, missing or
    False indicates the product or service is included in the coverage.
        :param name: A short name or tag for the benefit.
        :param description: A richer description of the benefit or services covered.
        :param network: Is a flag to indicate whether the benefits refer to in-network providers or
    out-of-network providers.
        :param unit: Indicates if the benefits apply to an individual or to the family.
        :param term: The term or period of the values such as 'maximum lifetime benefit' or
    'maximum annual visits'.
        :param financial: Benefits Used to date.
        """
        super().__init__(
            resourceType="ExplanationOfBenefitBenefitBalance",
            id_=id_,
            meta=meta,
            extension=extension,
            category=category,
            excluded=excluded,
            name=name,
            description=description,
            network=network,
            unit=unit,
            term=term,
            financial=financial,
        )
