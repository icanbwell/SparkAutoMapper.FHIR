from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for category
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.benefit_category_codes import (
        BenefitCategoryCodesCode,
    )

    # End Import for CodeableConcept for category
    # excluded (boolean)
    # name (string)
    # description (string)
    # network (CodeableConcept)
    # End Import for References for network
    # Import for CodeableConcept for network
    from spark_auto_mapper_fhir.value_sets.network_type_codes import (
        NetworkTypeCodesCode,
    )

    # End Import for CodeableConcept for network
    # unit (CodeableConcept)
    # End Import for References for unit
    # Import for CodeableConcept for unit
    from spark_auto_mapper_fhir.value_sets.unit_type_codes import UnitTypeCodesCode

    # End Import for CodeableConcept for unit
    # term (CodeableConcept)
    # End Import for References for term
    # Import for CodeableConcept for term
    from spark_auto_mapper_fhir.value_sets.benefit_term_codes import (
        BenefitTermCodesCode,
    )

    # End Import for CodeableConcept for term
    # financial (ExplanationOfBenefit.Financial)
    from spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_financial import (
        ExplanationOfBenefitFinancial,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitBenefitBalance(FhirBackboneElementBase):
    """
    ExplanationOfBenefit.BenefitBalance
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: CodeableConcept[BenefitCategoryCodesCode],
        excluded: Optional[FhirBoolean] = None,
        name: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        network: Optional[CodeableConcept[NetworkTypeCodesCode]] = None,
        unit: Optional[CodeableConcept[UnitTypeCodesCode]] = None,
        term: Optional[CodeableConcept[BenefitTermCodesCode]] = None,
        financial: Optional[FhirList[ExplanationOfBenefitFinancial]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param category: Code to identify the general type of benefits under which products and
        services are provided.
            :param excluded: True if the indicated class of service is excluded from the plan, missing or
        False indicates the product or service is included in the coverage.
            :param name: A short name or tag for the benefit.
            :param description: A richer description of the benefit or services covered.
            :param network: Is a flag to indicate whether the benefits refer to in-network providers or
        out-of-network providers.
            :param unit: Indicates if the benefits apply to an individual or to the family.
            :param term: The term or period of the values such as 'maximum lifetime benefit' or
        'maximum annual visits'.
            :param financial: Benefits Used to date.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            excluded=excluded,
            name=name,
            description=description,
            network=network,
            unit=unit,
            term=term,
            financial=financial,
        )
