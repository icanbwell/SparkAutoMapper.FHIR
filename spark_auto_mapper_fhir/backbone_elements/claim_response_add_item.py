from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # itemSequence (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # detailSequence (positiveInt)
    # subdetailSequence (positiveInt)
    # provider (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for provider
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # productOrService (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for productOrService
    # Import for CodeableConcept for productOrService
    from spark_auto_mapper_fhir.value_sets.uscls_codes import USCLSCodesCode

    # End Import for CodeableConcept for productOrService
    # modifier (CodeableConcept)
    # End Import for References for modifier
    # Import for CodeableConcept for modifier
    from spark_auto_mapper_fhir.value_sets.modifier_type_codes import (
        ModifierTypeCodesCode,
    )

    # End Import for CodeableConcept for modifier
    # programCode (CodeableConcept)
    # End Import for References for programCode
    # Import for CodeableConcept for programCode
    from spark_auto_mapper_fhir.value_sets.example_program_reason_codes import (
        ExampleProgramReasonCodesCode,
    )

    # End Import for CodeableConcept for programCode
    # servicedDate (date)
    # servicedPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # locationCodeableConcept (CodeableConcept)
    # End Import for References for locationCodeableConcept
    # Import for CodeableConcept for locationCodeableConcept
    from spark_auto_mapper_fhir.value_sets.example_service_place_codes import (
        ExampleServicePlaceCodesCode,
    )

    # End Import for CodeableConcept for locationCodeableConcept
    # locationAddress (Address)
    from spark_auto_mapper_fhir.complex_types.address import Address

    # locationReference (Reference)
    # Imports for References for locationReference
    from spark_auto_mapper_fhir.resources.location import Location

    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # unitPrice (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # factor (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # net (Money)
    # bodySite (CodeableConcept)
    # End Import for References for bodySite
    # Import for CodeableConcept for bodySite
    from spark_auto_mapper_fhir.value_sets.oral_site_codes import OralSiteCodesCode

    # End Import for CodeableConcept for bodySite
    # subSite (CodeableConcept)
    # End Import for References for subSite
    # Import for CodeableConcept for subSite
    from spark_auto_mapper_fhir.value_sets.surface_codes import SurfaceCodesCode

    # End Import for CodeableConcept for subSite
    # noteNumber (positiveInt)
    # adjudication (ClaimResponse.Adjudication)
    from spark_auto_mapper_fhir.backbone_elements.claim_response_adjudication import (
        ClaimResponseAdjudication,
    )

    # detail (ClaimResponse.Detail1)
    from spark_auto_mapper_fhir.backbone_elements.claim_response_detail1 import (
        ClaimResponseDetail1,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimResponseAddItem(FhirBackboneElementBase):
    """
    ClaimResponse.AddItem
        This resource provides the adjudication details from the processing of a Claim resource.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        itemSequence: Optional[FhirList[FhirPositiveInt]] = None,
        detailSequence: Optional[FhirList[FhirPositiveInt]] = None,
        subdetailSequence: Optional[FhirList[FhirPositiveInt]] = None,
        provider: Optional[
            FhirList[Reference[Union[Practitioner, PractitionerRole, Organization]]]
        ] = None,
        productOrService: CodeableConcept[USCLSCodesCode],
        modifier: Optional[FhirList[CodeableConcept[ModifierTypeCodesCode]]] = None,
        programCode: Optional[
            FhirList[CodeableConcept[ExampleProgramReasonCodesCode]]
        ] = None,
        servicedDate: Optional[FhirDate] = None,
        servicedPeriod: Optional[Period] = None,
        locationCodeableConcept: Optional[
            CodeableConcept[ExampleServicePlaceCodesCode]
        ] = None,
        locationAddress: Optional[Address] = None,
        locationReference: Optional[Reference[Location]] = None,
        quantity: Optional[Quantity] = None,
        unitPrice: Optional[Money] = None,
        factor: Optional[FhirDecimal] = None,
        net: Optional[Money] = None,
        bodySite: Optional[CodeableConcept[OralSiteCodesCode]] = None,
        subSite: Optional[FhirList[CodeableConcept[SurfaceCodesCode]]] = None,
        noteNumber: Optional[FhirList[FhirPositiveInt]] = None,
        adjudication: FhirList[ClaimResponseAdjudication],
        detail: Optional[FhirList[ClaimResponseDetail1]] = None,
    ) -> None:
        """
            This resource provides the adjudication details from the processing of a Claim
        resource.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param itemSequence: Claim items which this service line is intended to replace.
            :param detailSequence: The sequence number of the details within the claim item which this line is
        intended to replace.
            :param subdetailSequence: The sequence number of the sub-details within the details within the claim
        item which this line is intended to replace.
            :param provider: The providers who are authorized for the services rendered to the patient.
            :param productOrService: When the value is a group code then this item collects a set of related claim
        details, otherwise this contains the product, service, drug or other billing
        code for the item.
            :param modifier: Item typification or modifiers codes to convey additional context for the
        product or service.
            :param programCode: Identifies the program under which this may be recovered.
            :param servicedDate: None
            :param servicedPeriod: None
            :param locationCodeableConcept: None
            :param locationAddress: None
            :param locationReference: None
            :param quantity: The number of repetitions of a service or product.
            :param unitPrice: If the item is not a group then this is the fee for the product or service,
        otherwise this is the total of the fees for the details of the group.
            :param factor: A real number that represents a multiplier used in determining the overall
        value of services delivered and/or goods received. The concept of a Factor
        allows for a discount or surcharge multiplier to be applied to a monetary
        amount.
            :param net: The quantity times the unit price for an additional service or product or
        charge.
            :param bodySite: Physical service site on the patient (limb, tooth, etc.).
            :param subSite: A region or surface of the bodySite, e.g. limb region or tooth surface(s).
            :param noteNumber: The numbers associated with notes below which apply to the adjudication of
        this item.
            :param adjudication: The adjudication results.
            :param detail: The second-tier service adjudications for payor added services.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            itemSequence=itemSequence,
            detailSequence=detailSequence,
            subdetailSequence=subdetailSequence,
            provider=provider,
            productOrService=productOrService,
            modifier=modifier,
            programCode=programCode,
            servicedDate=servicedDate,
            servicedPeriod=servicedPeriod,
            locationCodeableConcept=locationCodeableConcept,
            locationAddress=locationAddress,
            locationReference=locationReference,
            quantity=quantity,
            unitPrice=unitPrice,
            factor=factor,
            net=net,
            bodySite=bodySite,
            subSite=subSite,
            noteNumber=noteNumber,
            adjudication=adjudication,
            detail=detail,
        )
