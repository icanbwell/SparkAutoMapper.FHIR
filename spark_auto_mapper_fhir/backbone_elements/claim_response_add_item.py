from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for provider
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.backbone_elements.claim_response_adjudication import ClaimResponseAdjudication
    from spark_auto_mapper_fhir.backbone_elements.claim_response_detail1 import ClaimResponseDetail1


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimResponseAddItem(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        itemSequence: Optional[FhirList[positiveInt]] = None,
        detailSequence: Optional[FhirList[positiveInt]] = None,
        subdetailSequence: Optional[FhirList[positiveInt]] = None,
        provider: Optional[FhirList[Reference[Union[Practitioner, PractitionerRole, Organization]]]] = None,
        productOrService: CodeableConcept,
        modifier: Optional[FhirList[CodeableConcept]] = None,
        programCode: Optional[FhirList[CodeableConcept]] = None,
        quantity: Optional[Quantity] = None,
        unitPrice: Optional[Money] = None,
        factor: Optional[decimal] = None,
        net: Optional[Money] = None,
        bodySite: Optional[CodeableConcept] = None,
        subSite: Optional[FhirList[CodeableConcept]] = None,
        noteNumber: Optional[FhirList[positiveInt]] = None,
        adjudication: FhirList[ClaimResponseAdjudication],
        detail: Optional[FhirList[ClaimResponseDetail1]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param itemSequence: Claim items which this service line is intended to replace.
        :param detailSequence: The sequence number of the details within the claim item which this line is
    intended to replace.
        :param subdetailSequence: The sequence number of the sub-details within the details within the claim
    item which this line is intended to replace.
        :param provider: The providers who are authorized for the services rendered to the patient.
        :param productOrService: When the value is a group code then this item collects a set of related claim
    details, otherwise this contains the product, service, drug or other billing
    code for the item.
        :param modifier: Item typification or modifiers codes to convey additional context for the
    product or service.
        :param programCode: Identifies the program under which this may be recovered.
        :param quantity: The number of repetitions of a service or product.
        :param unitPrice: If the item is not a group then this is the fee for the product or service,
    otherwise this is the total of the fees for the details of the group.
        :param factor: A real number that represents a multiplier used in determining the overall
    value of services delivered and/or goods received. The concept of a Factor
    allows for a discount or surcharge multiplier to be applied to a monetary
    amount.
        :param net: The quantity times the unit price for an additional service or product or
    charge.
        :param bodySite: Physical service site on the patient (limb, tooth, etc.).
        :param subSite: A region or surface of the bodySite, e.g. limb region or tooth surface(s).
        :param noteNumber: The numbers associated with notes below which apply to the adjudication of
    this item.
        :param adjudication: The adjudication results.
        :param detail: The second-tier service adjudications for payor added services.
        """
        super().__init__(
            resourceType="ClaimResponseAddItem",
            id_=id_,
            meta=meta,
            extension=extension,
            itemSequence=itemSequence,
            detailSequence=detailSequence,
            subdetailSequence=subdetailSequence,
            provider=provider,
            productOrService=productOrService,
            modifier=modifier,
            programCode=programCode,
            quantity=quantity,
            unitPrice=unitPrice,
            factor=factor,
            net=net,
            bodySite=bodySite,
            subSite=subSite,
            noteNumber=noteNumber,
            adjudication=adjudication,
            detail=detail,
        )
