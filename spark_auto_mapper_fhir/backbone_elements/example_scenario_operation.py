from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # number (string)
    # type_ (string)
    # name (string)
    # initiator (string)
    # receiver (string)
    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # initiatorActive (boolean)
    # receiverActive (boolean)
    # request (ExampleScenario.ContainedInstance)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_contained_instance import (
        ExampleScenarioContainedInstance,
    )

    # response (ExampleScenario.ContainedInstance)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExampleScenarioOperation(FhirBackboneElementBase):
    """
    ExampleScenario.Operation
        Example of workflow instance.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        number: FhirString,
        type_: Optional[FhirString] = None,
        name: Optional[FhirString] = None,
        initiator: Optional[FhirString] = None,
        receiver: Optional[FhirString] = None,
        description: Optional[FhirMarkdown] = None,
        initiatorActive: Optional[FhirBoolean] = None,
        receiverActive: Optional[FhirBoolean] = None,
        request: Optional[ExampleScenarioContainedInstance] = None,
        response: Optional[ExampleScenarioContainedInstance] = None,
    ) -> None:
        """
        Example of workflow instance.

        :param id_: id of resource
        :param extension: extensions
        :param number: The sequential number of the interaction, e.g. 1.2.5.
        :param type_: The type of operation - CRUD.
        :param name: The human-friendly name of the interaction.
        :param initiator: Who starts the transaction.
        :param receiver: Who receives the transaction.
        :param description: A comment to be inserted in the diagram.
        :param initiatorActive: Whether the initiator is deactivated right after the transaction.
        :param receiverActive: Whether the receiver is deactivated right after the transaction.
        :param request: Each resource instance used by the initiator.
        :param response: Each resource instance used by the responder.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            number=number,
            type_=type_,
            name=name,
            initiator=initiator,
            receiver=receiver,
            description=description,
            initiatorActive=initiatorActive,
            receiverActive=receiverActive,
            request=request,
            response=response,
        )
