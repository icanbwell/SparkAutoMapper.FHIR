from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # method (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for method
    # Import for CodeableConcept for method
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for method
    # type_ (CodeableConcept)
    # End Import for References for type_
    # Import for CodeableConcept for type_
    # End Import for CodeableConcept for type_
    # amount (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecificationMolecularWeight(FhirBackboneElementBase):
    """
    SubstanceSpecification.MolecularWeight
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        method: Optional[CodeableConcept[GenericTypeCode]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        amount: Optional[Quantity] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param method: The method by which the molecular weight was determined.
            :param type_: Type of molecular weight such as exact, average (also known as. number
        average), weight average.
            :param amount: Used to capture quantitative values for a variety of elements. If only limits
        are given, the arithmetic mean would be the average. If only a single definite
        value for a given element is given, it would be captured in this field.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            method=method,
            type_=type_,
            amount=amount,
        )
