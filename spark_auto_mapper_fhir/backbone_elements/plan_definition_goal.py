from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for category
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.goal_category import GoalCategoryCode

    # End Import for CodeableConcept for category
    # description (CodeableConcept)
    # End Import for References for description
    # Import for CodeableConcept for description
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindingsCode,
    )

    # End Import for CodeableConcept for description
    # priority (CodeableConcept)
    # End Import for References for priority
    # Import for CodeableConcept for priority
    from spark_auto_mapper_fhir.value_sets.goal_priority import GoalPriorityCode

    # End Import for CodeableConcept for priority
    # start (CodeableConcept)
    # End Import for References for start
    # Import for CodeableConcept for start
    from spark_auto_mapper_fhir.value_sets.goal_start_event import GoalStartEventCode

    # End Import for CodeableConcept for start
    # addresses (CodeableConcept)
    # End Import for References for addresses
    # Import for CodeableConcept for addresses
    from spark_auto_mapper_fhir.value_sets.condition_or__problem_or__diagnosis_codes import (
        Condition_or_Problem_or_DiagnosisCodesCode,
    )

    # End Import for CodeableConcept for addresses
    # documentation (RelatedArtifact)
    from spark_auto_mapper_fhir.complex_types.related_artifact import RelatedArtifact

    # target (PlanDefinition.Target)
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_target import (
        PlanDefinitionTarget,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PlanDefinitionGoal(FhirBackboneElementBase):
    """
    PlanDefinition.Goal
        This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        category: Optional[CodeableConcept[GoalCategoryCode]] = None,
        description: CodeableConcept[SNOMEDCTClinicalFindingsCode],
        priority: Optional[CodeableConcept[GoalPriorityCode]] = None,
        start: Optional[CodeableConcept[GoalStartEventCode]] = None,
        addresses: Optional[
            FhirList[CodeableConcept[Condition_or_Problem_or_DiagnosisCodesCode]]
        ] = None,
        documentation: Optional[FhirList[RelatedArtifact]] = None,
        target: Optional[FhirList[PlanDefinitionTarget]] = None,
    ) -> None:
        """
            This resource allows for the definition of various types of plans as a
        sharable, consumable, and executable artifact. The resource is general enough
        to support the description of a broad range of clinical artifacts such as
        clinical decision support rules, order sets and protocols.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param category: Indicates a category the goal falls within.
            :param description: Human-readable and/or coded description of a specific desired objective of
        care, such as "control blood pressure" or "negotiate an obstacle course" or
        "dance with child at wedding".
            :param priority: Identifies the expected level of importance associated with
        reaching/sustaining the defined goal.
            :param start: The event after which the goal should begin being pursued.
            :param addresses: Identifies problems, conditions, issues, or concerns the goal is intended to
        address.
            :param documentation: Didactic or other informational resources associated with the goal that
        provide further supporting information about the goal. Information resources
        can include inline text commentary and links to web resources.
            :param target: Indicates what should be done and within what timeframe.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            category=category,
            description=description,
            priority=priority,
            start=start,
            addresses=addresses,
            documentation=documentation,
            target=target,
        )
