from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # description (string)
    # definitionReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for definitionReference
    from spark_auto_mapper_fhir.resources.group import Group

    # definitionCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # definitionCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for definitionCodeableConcept
    # Import for CodeableConcept for definitionCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for definitionCodeableConcept
    # definitionExpression (Expression)
    from spark_auto_mapper_fhir.complex_types.expression import Expression

    # definitionDataRequirement (DataRequirement)
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement

    # definitionTriggerDefinition (TriggerDefinition)
    from spark_auto_mapper_fhir.complex_types.trigger_definition import (
        TriggerDefinition,
    )

    # usageContext (UsageContext)
    from spark_auto_mapper_fhir.complex_types.usage_context import UsageContext

    # exclude (boolean)
    # participantEffectiveDateTime (dateTime)
    # participantEffectivePeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # participantEffectiveDuration (Duration)
    from spark_auto_mapper_fhir.complex_types.duration import Duration

    # participantEffectiveTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # timeFromStart (Duration)
    # groupMeasure (GroupMeasure)
    from spark_auto_mapper_fhir.value_sets.group_measure import GroupMeasureCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EvidenceVariableCharacteristic(FhirBackboneElementBase):
    """
    EvidenceVariable.Characteristic
        The EvidenceVariable resource describes a "PICO" element that knowledge (evidence, assertion, recommendation) is about.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[FhirString] = None,
        definitionReference: Optional[Reference[Group]] = None,
        definitionCanonical: Optional[FhirCanonical] = None,
        definitionCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        definitionExpression: Optional[Expression] = None,
        definitionDataRequirement: Optional[DataRequirement] = None,
        definitionTriggerDefinition: Optional[TriggerDefinition] = None,
        usageContext: Optional[FhirList[UsageContext]] = None,
        exclude: Optional[FhirBoolean] = None,
        participantEffectiveDateTime: Optional[FhirDateTime] = None,
        participantEffectivePeriod: Optional[Period] = None,
        participantEffectiveDuration: Optional[Duration] = None,
        participantEffectiveTiming: Optional[Timing] = None,
        timeFromStart: Optional[Duration] = None,
        groupMeasure: Optional[GroupMeasureCode] = None,
    ) -> None:
        """
            The EvidenceVariable resource describes a "PICO" element that knowledge
        (evidence, assertion, recommendation) is about.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param description: A short, natural language description of the characteristic that could be used
        to communicate the criteria to an end-user.
            :param definitionReference: None
            :param definitionCanonical: None
            :param definitionCodeableConcept: None
            :param definitionExpression: None
            :param definitionDataRequirement: None
            :param definitionTriggerDefinition: None
            :param usageContext: Use UsageContext to define the members of the population, such as Age Ranges,
        Genders, Settings.
            :param exclude: When true, members with this characteristic are excluded from the element.
            :param participantEffectiveDateTime: None
            :param participantEffectivePeriod: None
            :param participantEffectiveDuration: None
            :param participantEffectiveTiming: None
            :param timeFromStart: Indicates duration from the participant's study entry.
            :param groupMeasure: Indicates how elements are aggregated within the study effective period.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            description=description,
            definitionReference=definitionReference,
            definitionCanonical=definitionCanonical,
            definitionCodeableConcept=definitionCodeableConcept,
            definitionExpression=definitionExpression,
            definitionDataRequirement=definitionDataRequirement,
            definitionTriggerDefinition=definitionTriggerDefinition,
            usageContext=usageContext,
            exclude=exclude,
            participantEffectiveDateTime=participantEffectiveDateTime,
            participantEffectivePeriod=participantEffectivePeriod,
            participantEffectiveDuration=participantEffectiveDuration,
            participantEffectiveTiming=participantEffectiveTiming,
            timeFromStart=timeFromStart,
            groupMeasure=groupMeasure,
        )
