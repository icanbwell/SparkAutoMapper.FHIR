from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reference
    from spark_auto_mapper_fhir.resources.medication_knowledge import (
        MedicationKnowledge,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgeRelatedMedicationKnowledge(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: CodeableConcept,
        reference: FhirList[Reference[Union[MedicationKnowledge]]],
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type: The category of the associated medication knowledge reference.
        :param reference: Associated documentation about the associated medication knowledge.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type=type,
            reference=reference,
        )
