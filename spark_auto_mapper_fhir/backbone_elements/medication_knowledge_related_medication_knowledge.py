from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # reference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reference
    from spark_auto_mapper_fhir.resources.medication_knowledge import (
        MedicationKnowledge,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgeRelatedMedicationKnowledge(FhirBackboneElementBase):
    """
    MedicationKnowledge.RelatedMedicationKnowledge
        Information about a medication that is used to support knowledge.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: CodeableConcept[GenericTypeCode],
        reference: FhirList[Reference[Union[MedicationKnowledge]]],
    ) -> None:
        """
        Information about a medication that is used to support knowledge.

        :param id_: id of resource
        :param extension: extensions
        :param type_: The category of the associated medication knowledge reference.
        :param reference: Associated documentation about the associated medication knowledge.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            reference=reference,
        )
