from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # lockedDate (date)
    # inactive (boolean)
    # include (ValueSet.Include)
    from spark_auto_mapper_fhir.backbone_elements.value_set_include import (
        ValueSetInclude,
    )

    # exclude (ValueSet.Include)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ValueSetCompose(FhirBackboneElementBase):
    """
    ValueSet.Compose
        A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        lockedDate: Optional[FhirDate] = None,
        inactive: Optional[FhirBoolean] = None,
        include: FhirList[ValueSetInclude],
        exclude: Optional[FhirList[ValueSetInclude]] = None,
    ) -> None:
        """
            A ValueSet resource instance specifies a set of codes drawn from one or more
        code systems, intended for use in a particular context. Value sets link
        between [[[CodeSystem]]] definitions and their use in [coded
        elements](terminologies.html).

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param lockedDate: The Locked Date is  the effective date that is used to determine the version
        of all referenced Code Systems and Value Set Definitions included in the
        compose that are not already tied to a specific version.
            :param inactive: Whether inactive codes - codes that are not approved for current use - are in
        the value set. If inactive = true, inactive codes are to be included in the
        expansion, if inactive = false, the inactive codes will not be included in the
        expansion. If absent, the behavior is determined by the implementation, or by
        the applicable $expand parameters (but generally, inactive codes would be
        expected to be included).
            :param include: Include one or more codes from a code system or other value set(s).
            :param exclude: Exclude one or more codes from the value set based on code system filters
        and/or other value sets.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            lockedDate=lockedDate,
            inactive=inactive,
            include=include,
            exclude=exclude,
        )
