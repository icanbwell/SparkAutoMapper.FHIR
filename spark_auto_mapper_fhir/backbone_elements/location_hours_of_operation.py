from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.days_of_week import DaysOfWeek
    from spark_auto_mapper_fhir.complex_types.time import time
    from spark_auto_mapper_fhir.complex_types.time import time


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class LocationHoursOfOperation(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        daysOfWeek: Optional[FhirList[DaysOfWeek]] = None,
        allDay: Optional[FhirBoolean] = None,
        openingTime: Optional[time] = None,
        closingTime: Optional[time] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param daysOfWeek: Indicates which days of the week are available between the start and end
        Times.
            :param allDay: The Location is open all day.
            :param openingTime: Time that the Location opens.
            :param closingTime: Time that the Location closes.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            daysOfWeek=daysOfWeek,
            allDay=allDay,
            openingTime=openingTime,
            closingTime=closingTime,
        )
