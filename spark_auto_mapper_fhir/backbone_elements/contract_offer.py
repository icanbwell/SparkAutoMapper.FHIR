from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # party (Contract.Party)
    from spark_auto_mapper_fhir.backbone_elements.contract_party import ContractParty

    # topic (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for topic
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.contract_term_type_codes import (
        ContractTermTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # decision (CodeableConcept)
    # End Import for References for decision
    # Import for CodeableConcept for decision
    from spark_auto_mapper_fhir.value_sets.act_consent_directive import (
        ActConsentDirective,
    )

    # End Import for CodeableConcept for decision
    # decisionMode (CodeableConcept)
    # End Import for References for decisionMode
    # Import for CodeableConcept for decisionMode
    from spark_auto_mapper_fhir.value_sets.contract_resource_decision_mode_codes import (
        ContractResourceDecisionModeCodesCode,
    )

    # End Import for CodeableConcept for decisionMode
    # answer (Contract.Answer)
    from spark_auto_mapper_fhir.backbone_elements.contract_answer import ContractAnswer

    # text (string)
    # linkId (string)
    # securityLabelNumber (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractOffer(FhirBackboneElementBase):
    """
    Contract.Offer
        Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        party: Optional[FhirList[ContractParty]] = None,
        topic: Optional[Reference[Union[Resource]]] = None,
        type_: Optional[CodeableConcept[ContractTermTypeCodesCode]] = None,
        decision: Optional[CodeableConcept[ActConsentDirective]] = None,
        decisionMode: Optional[
            FhirList[CodeableConcept[ContractResourceDecisionModeCodesCode]]
        ] = None,
        answer: Optional[FhirList[ContractAnswer]] = None,
        text: Optional[FhirString] = None,
        linkId: Optional[FhirList[FhirString]] = None,
        securityLabelNumber: Optional[FhirList[unsignedInt]] = None,
    ) -> None:
        """
            Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
        a policy or agreement.

            :param id_: id of resource
            :param extension: extensions
            :param identifier: Unique identifier for this particular Contract Provision.
            :param party: Offer Recipient.
            :param topic: The owner of an asset has the residual control rights over the asset: the
        right to decide all usages of the asset in any way not inconsistent with a
        prior contract, custom, or law (Hart, 1995, p. 30).
            :param type_: Type of Contract Provision such as specific requirements, purposes for
        actions, obligations, prohibitions, e.g. life time maximum benefit.
            :param decision: Type of choice made by accepting party with respect to an offer made by an
        offeror/ grantee.
            :param decisionMode: How the decision about a Contract was conveyed.
            :param answer: Response to offer text.
            :param text: Human readable form of this Contract Offer.
            :param linkId: The id of the clause or question text of the offer in the referenced
        questionnaire/response.
            :param securityLabelNumber: Security labels that protects the offer.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            party=party,
            topic=topic,
            type_=type_,
            decision=decision,
            decisionMode=decisionMode,
            answer=answer,
            text=text,
            linkId=linkId,
            securityLabelNumber=securityLabelNumber,
        )
