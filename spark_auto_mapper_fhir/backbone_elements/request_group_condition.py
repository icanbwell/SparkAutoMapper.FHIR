from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # kind (ActionConditionKind)
    from spark_auto_mapper_fhir.value_sets.action_condition_kind import (
        ActionConditionKindCode,
    )

    # expression (Expression)
    from spark_auto_mapper_fhir.complex_types.expression import Expression


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RequestGroupCondition(FhirBackboneElementBase):
    """
    RequestGroup.Condition
        A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        kind: ActionConditionKindCode,
        expression: Optional[Expression] = None,
    ) -> None:
        """
            A group of related requests that can be used to capture intended activities
        that have inter-dependencies such as "give this medication after that one".

            :param id_: id of resource
            :param extension: extensions
            :param kind: The kind of condition.
            :param expression: An expression that returns true or false, indicating whether or not the
        condition is satisfied.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            kind=kind,
            expression=expression,
        )
