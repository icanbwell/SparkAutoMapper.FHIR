from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.test_script_request_method_code import TestScriptRequestMethodCode
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.backbone_elements.test_script_request_header import TestScriptRequestHeader
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptOperation(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[Coding] = None,
        resource: Optional[code] = None,
        label: Optional[string] = None,
        description: Optional[string] = None,
        accept: Optional[code] = None,
        contentType: Optional[code] = None,
        destination: Optional[integer] = None,
        encodeRequestUrl: boolean,
        method: Optional[TestScriptRequestMethodCode] = None,
        origin: Optional[integer] = None,
        params: Optional[string] = None,
        requestHeader: Optional[FhirList[TestScriptRequestHeader]] = None,
        requestId: Optional[id] = None,
        responseId: Optional[id] = None,
        sourceId: Optional[id] = None,
        targetId: Optional[id] = None,
        url: Optional[string] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type_: Server interaction or operation type.
        :param resource: The type of the resource.  See http://build.fhir.org/resourcelist.html.
        :param label: The label would be used for tracking/logging purposes by test engines.
        :param description: The description would be used by test engines for tracking and reporting
    purposes.
        :param accept: The mime-type to use for RESTful operation in the 'Accept' header.
        :param contentType: The mime-type to use for RESTful operation in the 'Content-Type' header.
        :param destination: The server where the request message is destined for.  Must be one of the
    server numbers listed in TestScript.destination section.
        :param encodeRequestUrl: Whether or not to implicitly send the request url in encoded format. The
    default is true to match the standard RESTful client behavior. Set to false
    when communicating with a server that does not support encoded url paths.
        :param method: The HTTP method the test engine MUST use for this operation regardless of any
    other operation details.
        :param origin: The server where the request message originates from.  Must be one of the
    server numbers listed in TestScript.origin section.
        :param params: Path plus parameters after [type].  Used to set parts of the request URL
    explicitly.
        :param requestHeader: Header elements would be used to set HTTP headers.
        :param requestId: The fixture id (maybe new) to map to the request.
        :param responseId: The fixture id (maybe new) to map to the response.
        :param sourceId: The id of the fixture used as the body of a PUT or POST request.
        :param targetId: Id of fixture used for extracting the [id],  [type], and [vid] for GET
    requests.
        :param url: Complete request URL.
        """
        super().__init__(
            resourceType="TestScriptOperation",
            id_=id_,
            meta=meta,
            extension=extension,
            type_=type_,
            resource=resource,
            label=label,
            description=description,
            accept=accept,
            contentType=contentType,
            destination=destination,
            encodeRequestUrl=encodeRequestUrl,
            method=method,
            origin=origin,
            params=params,
            requestHeader=requestHeader,
            requestId=requestId,
            responseId=responseId,
            sourceId=sourceId,
            targetId=targetId,
            url=url,
        )
