from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # sequence (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for category
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.claim_information_category_codes import (
        ClaimInformationCategoryCodesCode,
    )

    # End Import for CodeableConcept for category
    # code (CodeableConcept)
    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.exception_codes import ExceptionCodesCode

    # End Import for CodeableConcept for code
    # reason (CodeableConcept)
    # End Import for References for reason
    # Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.value_sets.missing_tooth_reason_codes import (
        MissingToothReasonCodesCode,
    )

    # End Import for CodeableConcept for reason
    # timingDate (date)
    # timingPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # valueBoolean (boolean)
    # valueString (string)
    # valueQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # valueAttachment (Attachment)
    from spark_auto_mapper_fhir.complex_types.attachment import Attachment

    # valueReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for valueReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimSupportingInfo(FhirBackboneElementBase):
    """
    Claim.SupportingInfo
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: FhirPositiveInt,
        category: CodeableConcept[ClaimInformationCategoryCodesCode],
        code: Optional[CodeableConcept[ExceptionCodesCode]] = None,
        reason: Optional[CodeableConcept[MissingToothReasonCodesCode]] = None,
        timingDate: Optional[FhirDate] = None,
        timingPeriod: Optional[Period] = None,
        valueBoolean: Optional[FhirBoolean] = None,
        valueString: Optional[FhirString] = None,
        valueQuantity: Optional[Quantity] = None,
        valueAttachment: Optional[Attachment] = None,
        valueReference: Optional[Reference[Union[Resource]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param sequence: A number to uniquely identify supporting information entries.
            :param category: The general class of the information supplied: information; exception;
        accident, employment; onset, etc.
            :param code: System and code pertaining to the specific information regarding special
        conditions relating to the setting, treatment or patient  for which care is
        sought.
            :param reason: Provides the reason in the situation where a reason code is required in
        addition to the content.
            :param timingDate: None
            :param timingPeriod: None
            :param valueBoolean: None
            :param valueString: None
            :param valueQuantity: None
            :param valueAttachment: None
            :param valueReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            category=category,
            code=code,
            reason=reason,
            timingDate=timingDate,
            timingPeriod=timingPeriod,
            valueBoolean=valueBoolean,
            valueString=valueString,
            valueQuantity=valueQuantity,
            valueAttachment=valueAttachment,
            valueReference=valueReference,
        )
