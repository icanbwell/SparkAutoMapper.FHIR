from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.code import code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompartmentDefinitionResource(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: code,
        param: Optional[FhirList[FhirString]] = None,
        documentation: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: The name of a resource supported by the server.
            :param param: The name of a search parameter that represents the link to the compartment.
        More than one may be listed because a resource may be linked to a compartment
        in more than one way,.
            :param documentation: Additional documentation about the resource and compartment.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            param=param,
            documentation=documentation,
        )
