from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # linkId (string)
    # definition (uri)
    # code (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.questionnaire_question_codes import (
        QuestionnaireQuestionCodesCode,
    )

    # End Import for CodeableConcept for code
    # prefix (string)
    # text (string)
    # type_ (QuestionnaireItemType)
    from spark_auto_mapper_fhir.value_sets.questionnaire_item_type import (
        QuestionnaireItemTypeCode,
    )

    # enableWhen (Questionnaire.EnableWhen)
    from spark_auto_mapper_fhir.backbone_elements.questionnaire_enable_when import (
        QuestionnaireEnableWhen,
    )

    # enableBehavior (EnableWhenBehavior)
    from spark_auto_mapper_fhir.value_sets.enable_when_behavior import (
        EnableWhenBehaviorCode,
    )

    # required (boolean)
    # repeats (boolean)
    # readOnly (boolean)
    # maxLength (integer)
    # answerValueSet (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # answerOption (Questionnaire.AnswerOption)
    from spark_auto_mapper_fhir.backbone_elements.questionnaire_answer_option import (
        QuestionnaireAnswerOption,
    )

    # initial (Questionnaire.Initial)
    from spark_auto_mapper_fhir.backbone_elements.questionnaire_initial import (
        QuestionnaireInitial,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class QuestionnaireItem(FhirBackboneElementBase):
    """
    Questionnaire.Item
        A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        linkId: FhirString,
        definition: Optional[FhirUri] = None,
        code: Optional[FhirList[Coding[QuestionnaireQuestionCodesCode]]] = None,
        prefix: Optional[FhirString] = None,
        text: Optional[FhirString] = None,
        type_: QuestionnaireItemTypeCode,
        enableWhen: Optional[FhirList[QuestionnaireEnableWhen]] = None,
        enableBehavior: Optional[EnableWhenBehaviorCode] = None,
        required: Optional[FhirBoolean] = None,
        repeats: Optional[FhirBoolean] = None,
        readOnly: Optional[FhirBoolean] = None,
        maxLength: Optional[FhirInteger] = None,
        answerValueSet: Optional[FhirCanonical] = None,
        answerOption: Optional[FhirList[QuestionnaireAnswerOption]] = None,
        initial: Optional[FhirList[QuestionnaireInitial]] = None,
        item: Optional[FhirList[QuestionnaireItem]] = None,
    ) -> None:
        """
            A structured set of questions intended to guide the collection of answers from
        end-users. Questionnaires provide detailed control over order, presentation,
        phraseology and grouping to allow coherent, consistent data collection.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param linkId: An identifier that is unique within the Questionnaire allowing linkage to the
        equivalent item in a QuestionnaireResponse resource.
            :param definition: This element is a URI that refers to an [[[ElementDefinition]]] that provides
        information about this item, including information that might otherwise be
        included in the instance of the Questionnaire resource. A detailed description
        of the construction of the URI is shown in Comments, below. If this element is
        present then the following element values MAY be derived from the Element
        Definition if the corresponding elements of this Questionnaire resource
        instance have no value:

        * code (ElementDefinition.code)
        * type (ElementDefinition.type)
        * required (ElementDefinition.min)
        * repeats (ElementDefinition.max)
        * maxLength (ElementDefinition.maxLength)
        * answerValueSet (ElementDefinition.binding)
        * options (ElementDefinition.binding).
            :param code: A terminology code that corresponds to this group or question (e.g. a code
        from LOINC, which defines many questions and answers).
            :param prefix: A short label for a particular group, question or set of display text within
        the questionnaire used for reference by the individual completing the
        questionnaire.
            :param text: The name of a section, the text of a question or text content for a display
        item.
            :param type_: The type of questionnaire item this is - whether text for display, a grouping
        of other items or a particular type of data to be captured (string, integer,
        coded choice, etc.).
            :param enableWhen: A constraint indicating that this item should only be enabled (displayed/allow
        answers to be captured) when the specified condition is true.
            :param enableBehavior: Controls how multiple enableWhen values are interpreted -  whether all or any
        must be true.
            :param required: An indication, if true, that the item must be present in a "completed"
        QuestionnaireResponse.  If false, the item may be skipped when answering the
        questionnaire.
            :param repeats: An indication, if true, that the item may occur multiple times in the
        response, collecting multiple answers for questions or multiple sets of
        answers for groups.
            :param readOnly: An indication, when true, that the value cannot be changed by a human
        respondent to the Questionnaire.
            :param maxLength: The maximum number of characters that are permitted in the answer to be
        considered a "valid" QuestionnaireResponse.
            :param answerValueSet: A reference to a value set containing a list of codes representing permitted
        answers for a "choice" or "open-choice" question.
            :param answerOption: One of the permitted answers for a "choice" or "open-choice" question.
            :param initial: One or more values that should be pre-populated in the answer when initially
        rendering the questionnaire for user input.
            :param item: Text, questions and other groups to be nested beneath a question or group.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            linkId=linkId,
            definition=definition,
            code=code,
            prefix=prefix,
            text=text,
            type_=type_,
            enableWhen=enableWhen,
            enableBehavior=enableBehavior,
            required=required,
            repeats=repeats,
            readOnly=readOnly,
            maxLength=maxLength,
            answerValueSet=answerValueSet,
            answerOption=answerOption,
            initial=initial,
            item=item,
        )
