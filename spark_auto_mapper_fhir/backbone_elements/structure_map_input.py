from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # name (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # type_ (string)
    # mode (StructureMapInputMode)
    from spark_auto_mapper_fhir.value_sets.structure_map_input_mode import (
        StructureMapInputModeCode,
    )

    # documentation (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapInput(FhirBackboneElementBase):
    """
    StructureMap.Input
        A Map of relationships between 2 structures that can be used to transform data.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: id,
        type_: Optional[FhirString] = None,
        mode: StructureMapInputModeCode,
        documentation: Optional[FhirString] = None,
    ) -> None:
        """
            A Map of relationships between 2 structures that can be used to transform
        data.

            :param id_: id of resource
            :param extension: extensions
            :param name: Name for this instance of data.
            :param type_: Type for this instance of data.
            :param mode: Mode for this instance of data.
            :param documentation: Documentation for this instance of data.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            type_=type_,
            mode=mode,
            documentation=documentation,
        )
