from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # title (string)
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.document_section_codes import (
        DocumentSectionCodesCode,
    )

    # End Import for CodeableConcept for code
    # author (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for author
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.organization import Organization

    # focus (Reference)
    # Imports for References for focus
    # text (Narrative)
    from spark_auto_mapper_fhir.complex_types.narrative import Narrative

    # mode (ListMode)
    from spark_auto_mapper_fhir.value_sets.list_mode import ListModeCode

    # orderedBy (CodeableConcept)
    # End Import for References for orderedBy
    # Import for CodeableConcept for orderedBy
    from spark_auto_mapper_fhir.value_sets.list_order_codes import ListOrderCodesCode

    # End Import for CodeableConcept for orderedBy
    # entry (Reference)
    # Imports for References for entry
    # emptyReason (CodeableConcept)
    # End Import for References for emptyReason
    # Import for CodeableConcept for emptyReason
    from spark_auto_mapper_fhir.value_sets.list_empty_reasons import (
        ListEmptyReasonsCode,
    )

    # End Import for CodeableConcept for emptyReason


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompositionSection(FhirBackboneElementBase):
    """
    Composition.Section
        A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        title: Optional[FhirString] = None,
        code: Optional[CodeableConcept[DocumentSectionCodesCode]] = None,
        author: Optional[
            FhirList[
                Reference[
                    Union[
                        Practitioner,
                        PractitionerRole,
                        Device,
                        Patient,
                        RelatedPerson,
                        Organization,
                    ]
                ]
            ]
        ] = None,
        focus: Optional[Reference[Resource]] = None,
        text: Optional[Narrative] = None,
        mode: Optional[ListModeCode] = None,
        orderedBy: Optional[CodeableConcept[ListOrderCodesCode]] = None,
        entry: Optional[FhirList[Reference[Resource]]] = None,
        emptyReason: Optional[CodeableConcept[ListEmptyReasonsCode]] = None,
        section: Optional[FhirList[CompositionSection]] = None,
    ) -> None:
        """
            A set of healthcare-related information that is assembled together into a
        single logical package that provides a single coherent statement of meaning,
        establishes its own context and that has clinical attestation with regard to
        who is making the statement. A Composition defines the structure and narrative
        content necessary for a document. However, a Composition alone does not
        constitute a document. Rather, the Composition must be the first entry in a
        Bundle where Bundle.type=document, and any other resources referenced from
        Composition must be included as subsequent entries in the Bundle (for example
        Patient, Practitioner, Encounter, etc.).

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param title: The label for this particular section.  This will be part of the rendered
        content for the document, and is often used to build a table of contents.
            :param code: A code identifying the kind of content contained within the section. This must
        be consistent with the section title.
            :param author: Identifies who is responsible for the information in this section, not
        necessarily who typed it in.
            :param focus: The actual focus of the section when it is not the subject of the composition,
        but instead represents something or someone associated with the subject such
        as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is
        specified, the focus is assumed to be focus of the parent section, or, for a
        section in the Composition itself, the subject of the composition. Sections
        with a focus SHALL only include resources where the logical subject (patient,
        subject, focus, etc.) matches the section focus, or the resources have no
        logical subject (few resources).
            :param text: A human-readable narrative that contains the attested content of the section,
        used to represent the content of the resource to a human. The narrative need
        not encode all the structured data, but is required to contain sufficient
        detail to make it "clinically safe" for a human to just read the narrative.
            :param mode: How the entry list was prepared - whether it is a working list that is
        suitable for being maintained on an ongoing basis, or if it represents a
        snapshot of a list of items from another source, or whether it is a prepared
        list where items may be marked as added, modified or deleted.
            :param orderedBy: Specifies the order applied to the items in the section entries.
            :param entry: A reference to the actual resource from which the narrative in the section is
        derived.
            :param emptyReason: If the section is empty, why the list is empty. An empty section typically has
        some text explaining the empty reason.
            :param section: A nested sub-section within this section.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            title=title,
            code=code,
            author=author,
            focus=focus,
            text=text,
            mode=mode,
            orderedBy=orderedBy,
            entry=entry,
            emptyReason=emptyReason,
            section=section,
        )
