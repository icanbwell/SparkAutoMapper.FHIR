from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # class_ (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for class_
    # Import for CodeableConcept for class_
    from spark_auto_mapper_fhir.value_sets.act_encounter_code import ActEncounterCode

    # End Import for CodeableConcept for class_
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EncounterClassHistory(FhirBackboneElementBase):
    """
    Encounter.ClassHistory
        An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        class_: Coding[ActEncounterCode],
        period: Period,
    ) -> None:
        """
            An interaction between a patient and healthcare provider(s) for the purpose of
        providing healthcare service(s) or assessing the health status of a patient.

            :param id_: id of resource
            :param extension: extensions
            :param class_: inpatient | outpatient | ambulatory | emergency +.
            :param period: The time that the episode was in the specified class.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            class_=class_,
            period=period,
        )
