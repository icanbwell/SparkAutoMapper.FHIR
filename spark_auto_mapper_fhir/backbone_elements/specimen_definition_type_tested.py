from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.specimen_contained_preference import SpecimenContainedPreference
    from spark_auto_mapper_fhir.backbone_elements.specimen_definition_container import SpecimenDefinitionContainer
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.specimen_definition_handling import SpecimenDefinitionHandling


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SpecimenDefinitionTypeTested(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        isDerived: Optional[boolean] = None,
        type_: Optional[CodeableConcept] = None,
        preference: SpecimenContainedPreference,
        container: Optional[SpecimenDefinitionContainer] = None,
        requirement: Optional[string] = None,
        retentionTime: Optional[Duration] = None,
        rejectionCriterion: Optional[FhirList[CodeableConcept]] = None,
        handling: Optional[FhirList[SpecimenDefinitionHandling]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param isDerived: Primary of secondary specimen.
        :param type_: The kind of specimen conditioned for testing expected by lab.
        :param preference: The preference for this type of conditioned specimen.
        :param container: The specimen's container.
        :param requirement: Requirements for delivery and special handling of this kind of conditioned
    specimen.
        :param retentionTime: The usual time that a specimen of this kind is retained after the ordered
    tests are completed, for the purpose of additional testing.
        :param rejectionCriterion: Criterion for rejection of the specimen in its container by the laboratory.
        :param handling: Set of instructions for preservation/transport of the specimen at a defined
    temperature interval, prior the testing process.
        """
        super().__init__(
            resourceType="SpecimenDefinitionTypeTested",
            id_=id_,
            meta=meta,
            extension=extension,
            isDerived=isDerived,
            type_=type_,
            preference=preference,
            container=container,
            requirement=requirement,
            retentionTime=retentionTime,
            rejectionCriterion=rejectionCriterion,
            handling=handling,
        )
