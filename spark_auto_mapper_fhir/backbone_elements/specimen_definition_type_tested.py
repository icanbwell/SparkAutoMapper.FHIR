from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.specimen_contained_preference import (
        SpecimenContainedPreference,
    )
    from spark_auto_mapper_fhir.backbone_elements.specimen_definition_container import (
        SpecimenDefinitionContainer,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for rejectionCriterion
    from spark_auto_mapper_fhir.value_sets.rejection_criterion import RejectionCriterion

    # End Import for CodeableConcept for rejectionCriterion
    from spark_auto_mapper_fhir.backbone_elements.specimen_definition_handling import (
        SpecimenDefinitionHandling,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SpecimenDefinitionTypeTested(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        isDerived: Optional[FhirBoolean] = None,
        type: Optional[CodeableConcept] = None,
        preference: SpecimenContainedPreference,
        container: Optional[SpecimenDefinitionContainer] = None,
        requirement: Optional[FhirString] = None,
        retentionTime: Optional[Duration] = None,
        rejectionCriterion: Optional[
            FhirList[CodeableConcept[RejectionCriterion]]
        ] = None,
        handling: Optional[FhirList[SpecimenDefinitionHandling]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param isDerived: Primary of secondary specimen.
            :param type: The kind of specimen conditioned for testing expected by lab.
            :param preference: The preference for this type of conditioned specimen.
            :param container: The specimen's container.
            :param requirement: Requirements for delivery and special handling of this kind of conditioned
        specimen.
            :param retentionTime: The usual time that a specimen of this kind is retained after the ordered
        tests are completed, for the purpose of additional testing.
            :param rejectionCriterion: Criterion for rejection of the specimen in its container by the laboratory.
            :param handling: Set of instructions for preservation/transport of the specimen at a defined
        temperature interval, prior the testing process.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            isDerived=isDerived,
            type=type,
            preference=preference,
            container=container,
            requirement=requirement,
            retentionTime=retentionTime,
            rejectionCriterion=rejectionCriterion,
            handling=handling,
        )
