from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # itemCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for itemCodeableConcept
    # Import for CodeableConcept for itemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for itemCodeableConcept
    # itemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for itemReference
    from spark_auto_mapper_fhir.resources.substance import Substance

    # isActive (boolean)
    # strength (Ratio)
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgeIngredient(FhirBackboneElementBase):
    """
    MedicationKnowledge.Ingredient
        Information about a medication that is used to support knowledge.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        itemCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        itemReference: Optional[Reference[Union[Substance]]] = None,
        isActive: Optional[FhirBoolean] = None,
        strength: Optional[Ratio] = None,
    ) -> None:
        """
            Information about a medication that is used to support knowledge.

            :param id_: id of resource
            :param extension: extensions
            :param itemCodeableConcept: None
            :param itemReference: None
            :param isActive: Indication of whether this ingredient affects the therapeutic action of the
        drug.
            :param strength: Specifies how many (or how much) of the items there are in this Medication.
        For example, 250 mg per tablet.  This is expressed as a ratio where the
        numerator is 250mg and the denominator is 1 tablet.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            itemCodeableConcept=itemCodeableConcept,
            itemReference=itemReference,
            isActive=isActive,
            strength=strength,
        )
