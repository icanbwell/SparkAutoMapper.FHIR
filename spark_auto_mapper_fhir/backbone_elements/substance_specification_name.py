from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_name import SubstanceSpecificationName
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_name import SubstanceSpecificationName
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_official import SubstanceSpecificationOfficial
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for source
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecificationName(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: string,
        type: Optional[CodeableConcept] = None,
        status: Optional[CodeableConcept] = None,
        preferred: Optional[boolean] = None,
        language: Optional[FhirList[CodeableConcept]] = None,
        domain: Optional[FhirList[CodeableConcept]] = None,
        jurisdiction: Optional[FhirList[CodeableConcept]] = None,
        synonym: Optional[FhirList[SubstanceSpecificationName]] = None,
        translation: Optional[FhirList[SubstanceSpecificationName]] = None,
        official: Optional[FhirList[SubstanceSpecificationOfficial]] = None,
        source: Optional[FhirList[Reference[Union[DocumentReference]]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param name: The actual name.
        :param type: Name type.
        :param status: The status of the name.
        :param preferred: If this is the preferred name for this substance.
        :param language: Language of the name.
        :param domain: The use context of this name for example if there is a different name a drug
    active ingredient as opposed to a food colour additive.
        :param jurisdiction: The jurisdiction where this name applies.
        :param synonym: A synonym of this name.
        :param translation: A translation for this name.
        :param official: Details of the official nature of this name.
        :param source: Supporting literature.
        """
        super().__init__(
            resourceType="SubstanceSpecificationName",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            type=type,
            status=status,
            preferred=preferred,
            language=language,
            domain=domain,
            jurisdiction=jurisdiction,
            synonym=synonym,
            translation=translation,
            official=official,
            source=source,
        )
