from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # type_ (TestReportParticipantType)
    from spark_auto_mapper_fhir.complex_types.test_report_participant_type import (
        TestReportParticipantType,
    )

    # uri (uri)
    from spark_auto_mapper_fhir.complex_types.uri import uri

    # display (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestReportParticipant(FhirBackboneElementBase):
    """
    TestReport.Participant
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: TestReportParticipantType,
        uri: uri,
        display: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: The type of participant.
        :param uri: The uri of the participant. An absolute URL is preferred.
        :param display: The display name of the participant.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            uri=uri,
            display=display,
        )
