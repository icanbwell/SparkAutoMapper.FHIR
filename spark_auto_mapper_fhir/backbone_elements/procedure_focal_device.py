from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # action (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for action
    # Import for CodeableConcept for action
    from spark_auto_mapper_fhir.value_sets.procedure_device_action_codes import (
        ProcedureDeviceActionCodesCode,
    )

    # End Import for CodeableConcept for action
    # manipulated (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for manipulated
    from spark_auto_mapper_fhir.resources.device import Device


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ProcedureFocalDevice(FhirBackboneElementBase):
    """
    Procedure.FocalDevice
        An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        action: Optional[CodeableConcept[ProcedureDeviceActionCodesCode]] = None,
        manipulated: Reference[Union[Device]],
    ) -> None:
        """
            An action that is or was performed on or for a patient. This can be a physical
        intervention like an operation, or less invasive like long term services,
        counseling, or hypnotherapy.

            :param id_: id of resource
            :param extension: extensions
            :param action: The kind of change that happened to the device during the procedure.
            :param manipulated: The device that was manipulated (changed) during the procedure.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            action=action,
            manipulated=manipulated,
        )
