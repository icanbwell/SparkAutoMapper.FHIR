from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # measure (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for measure
    # Import for CodeableConcept for measure
    from spark_auto_mapper_fhir.value_sets.loinc_codes import LOINCCodesCode

    # End Import for CodeableConcept for measure
    # detailQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # detailRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # detailCodeableConcept (CodeableConcept)
    # End Import for References for detailCodeableConcept
    # Import for CodeableConcept for detailCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for detailCodeableConcept
    # due (Duration)
    from spark_auto_mapper_fhir.complex_types.duration import Duration


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PlanDefinitionTarget(FhirBackboneElementBase):
    """
    PlanDefinition.Target
        This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        measure: Optional[CodeableConcept[LOINCCodesCode]] = None,
        detailQuantity: Optional[Quantity] = None,
        detailRange: Optional[Range] = None,
        detailCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        due: Optional[Duration] = None,
    ) -> None:
        """
            This resource allows for the definition of various types of plans as a
        sharable, consumable, and executable artifact. The resource is general enough
        to support the description of a broad range of clinical artifacts such as
        clinical decision support rules, order sets and protocols.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param measure: The parameter whose value is to be tracked, e.g. body weight, blood pressure,
        or hemoglobin A1c level.
            :param detailQuantity: None
            :param detailRange: None
            :param detailCodeableConcept: None
            :param due: Indicates the timeframe after the start of the goal in which the goal should
        be met.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            measure=measure,
            detailQuantity=detailQuantity,
            detailRange=detailRange,
            detailCodeableConcept=detailCodeableConcept,
            due=due,
        )
