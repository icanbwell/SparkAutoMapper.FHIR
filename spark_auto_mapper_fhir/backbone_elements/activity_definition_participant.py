from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.action_participant_type import (
        ActionParticipantType,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ActivityDefinitionParticipant(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: ActionParticipantType,
        role: Optional[CodeableConcept] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type: The type of participant in the action.
        :param role: The role the participant should play in performing the described action.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type=type,
            role=role,
        )
