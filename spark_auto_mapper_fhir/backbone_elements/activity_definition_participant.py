from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (ActionParticipantType)
    from spark_auto_mapper_fhir.value_sets.action_participant_type import (
        ActionParticipantTypeCode,
    )

    # role (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for role
    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.action_participant_role import (
        ActionParticipantRoleCode,
    )

    # End Import for CodeableConcept for role


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ActivityDefinitionParticipant(FhirBackboneElementBase):
    """
    ActivityDefinition.Participant
        This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: ActionParticipantTypeCode,
        role: Optional[CodeableConcept[ActionParticipantRoleCode]] = None,
    ) -> None:
        """
            This resource allows for the definition of some activity to be performed,
        independent of a particular patient, practitioner, or other performance
        context.

            :param id_: id of resource
            :param extension: extensions
            :param type_: The type of participant in the action.
            :param role: The role the participant should play in performing the described action.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            role=role,
        )
