from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # strength (BindingStrength)
    from spark_auto_mapper_fhir.value_sets.binding_strength import BindingStrengthCode

    # valueSet (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationDefinitionBinding(FhirBackboneElementBase):
    """
    OperationDefinition.Binding
        A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        strength: BindingStrengthCode,
        valueSet: FhirCanonical,
    ) -> None:
        """
            A formal computable definition of an operation (on the RESTful interface) or a
        named query (using the search interaction).

            :param id_: id of resource
            :param extension: extensions
            :param strength: Indicates the degree of conformance expectations associated with this binding
        - that is, the degree to which the provided value set must be adhered to in
        the instances.
            :param valueSet: Points to the value set or external definition (e.g. implicit value set) that
        identifies the set of codes to be used.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            strength=strength,
            valueSet=valueSet,
        )
