from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # assessment (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for assessment
    # Import for CodeableConcept for assessment
    from spark_auto_mapper_fhir.value_sets.adverse_event_causality_assessment import (
        AdverseEventCausalityAssessmentCode,
    )

    # End Import for CodeableConcept for assessment
    # productRelatedness (string)
    # author (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for author
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # method (CodeableConcept)
    # End Import for References for method
    # Import for CodeableConcept for method
    from spark_auto_mapper_fhir.value_sets.adverse_event_causality_method import (
        AdverseEventCausalityMethodCode,
    )

    # End Import for CodeableConcept for method


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AdverseEventCausality(FhirBackboneElementBase):
    """
    AdverseEvent.Causality
        Actual or  potential/avoided event causing unintended physical injury resulting from or contributed to by medical care, a research study or other healthcare setting factors that requires additional monitoring, treatment, or hospitalization, or that results in death.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        assessment: Optional[
            CodeableConcept[AdverseEventCausalityAssessmentCode]
        ] = None,
        productRelatedness: Optional[FhirString] = None,
        author: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        method: Optional[CodeableConcept[AdverseEventCausalityMethodCode]] = None,
    ) -> None:
        """
            Actual or  potential/avoided event causing unintended physical injury
        resulting from or contributed to by medical care, a research study or other
        healthcare setting factors that requires additional monitoring, treatment, or
        hospitalization, or that results in death.

            :param id_: id of resource
            :param extension: extensions
            :param assessment: Assessment of if the entity caused the event.
            :param productRelatedness: AdverseEvent.suspectEntity.causalityProductRelatedness.
            :param author: AdverseEvent.suspectEntity.causalityAuthor.
            :param method: ProbabilityScale | Bayesian | Checklist.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            assessment=assessment,
            productRelatedness=productRelatedness,
            author=author,
            method=method,
        )
