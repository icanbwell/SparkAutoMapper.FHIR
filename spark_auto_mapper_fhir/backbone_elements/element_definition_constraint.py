from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # key (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # requirements (string)
    # severity (ConstraintSeverity)
    from spark_auto_mapper_fhir.value_sets.constraint_severity import (
        ConstraintSeverityCode,
    )

    # human (string)
    # expression (string)
    # xpath (string)
    # source (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionConstraint(FhirBackboneElementBase):
    """
    ElementDefinition.Constraint
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        key: id,
        requirements: Optional[FhirString] = None,
        severity: ConstraintSeverityCode,
        human: FhirString,
        expression: Optional[FhirString] = None,
        xpath: Optional[FhirString] = None,
        source: Optional[FhirCanonical] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param key: Allows identification of which elements have their cardinalities impacted by
        the constraint.  Will not be referenced for constraints that do not affect
        cardinality.
            :param requirements: Description of why this constraint is necessary or appropriate.
            :param severity: Identifies the impact constraint violation has on the conformance of the
        instance.
            :param human: Text that can be used to describe the constraint in messages identifying that
        the constraint has been violated.
            :param expression: A [FHIRPath](fhirpath.html) expression of constraint that can be executed to
        see if this constraint is met.
            :param xpath: An XPath expression of constraint that can be executed to see if this
        constraint is met.
            :param source: A reference to the original source of the constraint, for traceability
        purposes.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            key=key,
            requirements=requirements,
            severity=severity,
            human=human,
            expression=expression,
            xpath=xpath,
            source=source,
        )
