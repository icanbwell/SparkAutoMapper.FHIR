from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for dataAbsentReason
    from spark_auto_mapper_fhir.value_sets.dataabsentreason import Dataabsentreason

    # End Import for CodeableConcept for dataAbsentReason
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.observation_reference_range import (
        ObservationReferenceRange,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ObservationComponent(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept,
        dataAbsentReason: Optional[CodeableConcept[Dataabsentreason]] = None,
        interpretation: Optional[FhirList[CodeableConcept]] = None,
        referenceRange: Optional[FhirList[ObservationReferenceRange]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: Describes what was observed. Sometimes this is called the observation "code".
            :param dataAbsentReason: Provides a reason why the expected value in the element
        Observation.component.value[x] is missing.
            :param interpretation: A categorical assessment of an observation value.  For example, high, low,
        normal.
            :param referenceRange: Guidance on how to interpret the value by comparison to a normal or
        recommended range.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            dataAbsentReason=dataAbsentReason,
            interpretation=interpretation,
            referenceRange=referenceRange,
        )
