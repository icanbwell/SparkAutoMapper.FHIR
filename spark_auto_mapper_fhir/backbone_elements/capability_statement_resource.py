from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # type_ (ResourceType)
    from spark_auto_mapper_fhir.value_sets.resource_type import ResourceTypeCode

    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # supportedProfile (canonical)
    # documentation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # interaction (CapabilityStatement.Interaction)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_interaction import (
        CapabilityStatementInteraction,
    )

    # versioning (ResourceVersionPolicy)
    from spark_auto_mapper_fhir.value_sets.resource_version_policy import (
        ResourceVersionPolicyCode,
    )

    # readHistory (boolean)
    # updateCreate (boolean)
    # conditionalCreate (boolean)
    # conditionalRead (ConditionalReadStatus)
    from spark_auto_mapper_fhir.value_sets.conditional_read_status import (
        ConditionalReadStatusCode,
    )

    # conditionalUpdate (boolean)
    # conditionalDelete (ConditionalDeleteStatus)
    from spark_auto_mapper_fhir.value_sets.conditional_delete_status import (
        ConditionalDeleteStatusCode,
    )

    # referencePolicy (ReferenceHandlingPolicy)
    from spark_auto_mapper_fhir.value_sets.reference_handling_policy import (
        ReferenceHandlingPolicyCode,
    )

    # searchInclude (string)
    # searchRevInclude (string)
    # searchParam (CapabilityStatement.SearchParam)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_search_param import (
        CapabilityStatementSearchParam,
    )

    # operation (CapabilityStatement.Operation)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_operation import (
        CapabilityStatementOperation,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementResource(FhirBackboneElementBase):
    """
    CapabilityStatement.Resource
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        type_: ResourceTypeCode,
        profile: Optional[FhirCanonical] = None,
        supportedProfile: Optional[FhirList[FhirCanonical]] = None,
        documentation: Optional[FhirMarkdown] = None,
        interaction: Optional[FhirList[CapabilityStatementInteraction]] = None,
        versioning: Optional[ResourceVersionPolicyCode] = None,
        readHistory: Optional[FhirBoolean] = None,
        updateCreate: Optional[FhirBoolean] = None,
        conditionalCreate: Optional[FhirBoolean] = None,
        conditionalRead: Optional[ConditionalReadStatusCode] = None,
        conditionalUpdate: Optional[FhirBoolean] = None,
        conditionalDelete: Optional[ConditionalDeleteStatusCode] = None,
        referencePolicy: Optional[FhirList[ReferenceHandlingPolicyCode]] = None,
        searchInclude: Optional[FhirList[FhirString]] = None,
        searchRevInclude: Optional[FhirList[FhirString]] = None,
        searchParam: Optional[FhirList[CapabilityStatementSearchParam]] = None,
        operation: Optional[FhirList[CapabilityStatementOperation]] = None,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param type_: A type of resource exposed via the restful interface.
            :param profile: A specification of the profile that describes the solution's overall support
        for the resource, including any constraints on cardinality, bindings, lengths
        or other limitations. See further discussion in [Using
        Profiles](profiling.html#profile-uses).
            :param supportedProfile: A list of profiles that represent different use cases supported by the system.
        For a server, "supported by the system" means the system hosts/produces a set
        of resources that are conformant to a particular profile, and allows clients
        that use its services to search using this profile and to find appropriate
        data. For a client, it means the system will search by this profile and
        process data according to the guidance implicit in the profile. See further
        discussion in [Using Profiles](profiling.html#profile-uses).
            :param documentation: Additional information about the resource type used by the system.
            :param interaction: Identifies a restful operation supported by the solution.
            :param versioning: This field is set to no-version to specify that the system does not support
        (server) or use (client) versioning for this resource type. If this has some
        other value, the server must at least correctly track and populate the
        versionId meta-property on resources. If the value is 'versioned-update', then
        the server supports all the versioning features, including using e-tags for
        version integrity in the API.
            :param readHistory: A flag for whether the server is able to return past versions as part of the
        vRead operation.
            :param updateCreate: A flag to indicate that the server allows or needs to allow the client to
        create new identities on the server (that is, the client PUTs to a location
        where there is no existing resource). Allowing this operation means that the
        server allows the client to create new identities on the server.
            :param conditionalCreate: A flag that indicates that the server supports conditional create.
            :param conditionalRead: A code that indicates how the server supports conditional read.
            :param conditionalUpdate: A flag that indicates that the server supports conditional update.
            :param conditionalDelete: A code that indicates how the server supports conditional delete.
            :param referencePolicy: A set of flags that defines how references are supported.
            :param searchInclude: A list of _include values supported by the server.
            :param searchRevInclude: A list of _revinclude (reverse include) values supported by the server.
            :param searchParam: Search parameters for implementations to support and/or make use of - either
        references to ones defined in the specification, or additional ones defined
        for/by the implementation.
            :param operation: Definition of an operation or a named query together with its parameters and
        their meaning and type. Consult the definition of the operation for details
        about how to invoke the operation, and the parameters.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            type_=type_,
            profile=profile,
            supportedProfile=supportedProfile,
            documentation=documentation,
            interaction=interaction,
            versioning=versioning,
            readHistory=readHistory,
            updateCreate=updateCreate,
            conditionalCreate=conditionalCreate,
            conditionalRead=conditionalRead,
            conditionalUpdate=conditionalUpdate,
            conditionalDelete=conditionalDelete,
            referencePolicy=referencePolicy,
            searchInclude=searchInclude,
            searchRevInclude=searchRevInclude,
            searchParam=searchParam,
            operation=operation,
        )
