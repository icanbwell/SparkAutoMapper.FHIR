from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for individual
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EncounterParticipant(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[FhirList[CodeableConcept]] = None,
        period: Optional[Period] = None,
        individual: Optional[Reference[Union[Practitioner, PractitionerRole, RelatedPerson]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type_: Role of participant in encounter.
        :param period: The period of time that the specified participant participated in the
    encounter. These can overlap or be sub-sets of the overall encounter's period.
        :param individual: Persons involved in the encounter other than the patient.
        """
        super().__init__(
            resourceType="EncounterParticipant",
            id_=id_,
            meta=meta,
            extension=extension,
            type_=type_,
            period=period,
            individual=individual,
        )
