from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationDefinitionReferencedFrom(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        source: string,
        sourceId: Optional[string] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param source: The name of the parameter or dot-separated path of parameter names pointing to
        the resource parameter that is expected to contain a reference to this
        resource.
            :param sourceId: The id of the element in the referencing resource that is expected to resolve
        to this resource.
        """
        super().__init__(
            resourceType="OperationDefinitionReferencedFrom",
            id_=id_,
            meta=meta,
            extension=extension,
            source=source,
            sourceId=sourceId,
        )
