from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # description (string)
    # url (url)
    from spark_auto_mapper_fhir.fhir_types.url import FhirUrl


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesImplementation(FhirBackboneElementBase):
    """
    TerminologyCapabilities.Implementation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: FhirString,
        url: Optional[FhirUrl] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param description: Information about the specific installation that this terminology capability
        statement relates to.
            :param url: An absolute base URL for the implementation.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            url=url,
        )
