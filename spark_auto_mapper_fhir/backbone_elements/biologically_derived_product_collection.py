from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # collector (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for collector
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    # source (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for source
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BiologicallyDerivedProductCollection(FhirBackboneElementBase):
    """
    BiologicallyDerivedProduct.Collection
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        collector: Optional[Reference [Union[Practitioner, PractitionerRole]]] = None,
        source: Optional[Reference [Union[Patient, Organization]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param collector: Healthcare professional who is performing the collection.
        :param source: The patient or entity, such as a hospital or vendor in the case of a
    processed/manipulated/manufactured product, providing the product.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            collector=collector,
            source=source,
        )
