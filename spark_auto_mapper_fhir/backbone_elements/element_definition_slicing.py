from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # discriminator (ElementDefinition.Discriminator)
    from spark_auto_mapper_fhir.backbone_elements.element_definition_discriminator import (
        ElementDefinitionDiscriminator,
    )

    # description (string)
    # ordered (boolean)
    # rules (SlicingRules)
    from spark_auto_mapper_fhir.value_sets.slicing_rules import SlicingRulesCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionSlicing(FhirBackboneElementBase):
    """
    ElementDefinition.Slicing
        Captures constraints on each element within the resource, profile, or extension.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        discriminator: Optional[FhirList[ElementDefinitionDiscriminator]] = None,
        description: Optional[FhirString] = None,
        ordered: Optional[FhirBoolean] = None,
        rules: SlicingRulesCode,
    ) -> None:
        """
            Captures constraints on each element within the resource, profile, or
        extension.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param discriminator: Designates which child elements are used to discriminate between the slices
        when processing an instance. If one or more discriminators are provided, the
        value of the child elements in the instance data SHALL completely distinguish
        which slice the element in the resource matches based on the allowed values
        for those elements in each of the slices.
            :param description: A human-readable text description of how the slicing works. If there is no
        discriminator, this is required to be present to provide whatever information
        is possible about how the slices can be differentiated.
            :param ordered: If the matching elements have to occur in the same order as defined in the
        profile.
            :param rules: Whether additional slices are allowed or not. When the slices are ordered,
        profile authors can also say that additional slices are only allowed at the
        end.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            discriminator=discriminator,
            description=description,
            ordered=ordered,
            rules=rules,
        )
