from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # ratioType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for ratioType
    # Import for CodeableConcept for ratioType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for ratioType
    # startingMaterial (SubstancePolymer.StartingMaterial)
    from spark_auto_mapper_fhir.backbone_elements.substance_polymer_starting_material import (
        SubstancePolymerStartingMaterial,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstancePolymerMonomerSet(FhirBackboneElementBase):
    """
    SubstancePolymer.MonomerSet
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        ratioType: Optional[CodeableConcept[GenericTypeCode]] = None,
        startingMaterial: Optional[FhirList[SubstancePolymerStartingMaterial]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param ratioType: Todo.
        :param startingMaterial: Todo.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            ratioType=ratioType,
            startingMaterial=startingMaterial,
        )
