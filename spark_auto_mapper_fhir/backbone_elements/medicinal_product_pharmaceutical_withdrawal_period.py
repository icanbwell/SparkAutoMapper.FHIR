from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # tissue (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for tissue
    # Import for CodeableConcept for tissue
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for tissue
    # value (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # supportingInformation (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductPharmaceuticalWithdrawalPeriod(FhirBackboneElementBase):
    """
    MedicinalProductPharmaceutical.WithdrawalPeriod
        A pharmaceutical product described in terms of its composition and dose form.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        tissue: CodeableConcept[GenericTypeCode],
        value: Quantity,
        supportingInformation: Optional[FhirString] = None,
    ) -> None:
        """
            A pharmaceutical product described in terms of its composition and dose form.

            :param id_: id of resource
            :param extension: extensions
            :param tissue: Coded expression for the type of tissue for which the withdrawal period
        applues, e.g. meat, milk.
            :param value: A value for the time.
            :param supportingInformation: Extra information about the withdrawal period.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            tissue=tissue,
            value=value,
            supportingInformation=supportingInformation,
        )
