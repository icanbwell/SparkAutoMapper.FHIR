from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSourceMaterialFractionDescription(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        fraction: Optional[string] = None,
        materialType: Optional[CodeableConcept] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param fraction: This element is capturing information about the fraction of a plant part, or
        human plasma for fractionation.
            :param materialType: The specific type of the material constituting the component. For Herbal
        preparations the particulars of the extracts (liquid/dry) is described in
        Specified Substance Group 1.
        """
        super().__init__(
            resourceType="SubstanceSourceMaterialFractionDescription",
            id_=id_,
            meta=meta,
            extension=extension,
            fraction=fraction,
            materialType=materialType,
        )
