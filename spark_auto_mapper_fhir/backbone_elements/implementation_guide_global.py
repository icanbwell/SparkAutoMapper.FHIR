from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuideGlobal(FhirBackboneElementBase):
    """
    ImplementationGuide.Global
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: code,
        profile: FhirCanonical,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: The type of resource that all instances must conform to.
        :param profile: A reference to the profile that all instances must conform to.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            profile=profile,
        )
