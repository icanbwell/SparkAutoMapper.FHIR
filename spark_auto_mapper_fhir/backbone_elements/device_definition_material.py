from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # substance (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for substance
    # Import for CodeableConcept for substance
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for substance
    # alternate (boolean)
    # allergenicIndicator (boolean)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceDefinitionMaterial(FhirBackboneElementBase):
    """
    DeviceDefinition.Material
        The characteristics, operational status and capabilities of a medical-related component of a medical device.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        substance: CodeableConcept[GenericTypeCode],
        alternate: Optional[FhirBoolean] = None,
        allergenicIndicator: Optional[FhirBoolean] = None,
    ) -> None:
        """
            The characteristics, operational status and capabilities of a medical-related
        component of a medical device.

            :param id_: id of resource
            :param extension: extensions
            :param substance: The substance.
            :param alternate: Indicates an alternative material of the device.
            :param allergenicIndicator: Whether the substance is a known or suspected allergen.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            substance=substance,
            alternate=alternate,
            allergenicIndicator=allergenicIndicator,
        )
