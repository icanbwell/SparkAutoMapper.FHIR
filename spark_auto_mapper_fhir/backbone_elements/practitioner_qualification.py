from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.v2_0360_2_7 import V2_0360_2_7

    # End Import for CodeableConcept for code
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # issuer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for issuer
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PractitionerQualification(FhirBackboneElementBase):
    """
    Practitioner.Qualification
        A person who is directly or indirectly involved in the provisioning of healthcare.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        code: CodeableConcept[V2_0360_2_7],
        period: Optional[Period] = None,
        issuer: Optional[Reference[Union[Organization]]] = None,
    ) -> None:
        """
            A person who is directly or indirectly involved in the provisioning of
        healthcare.

            :param id_: id of resource
            :param extension: extensions
            :param identifier: An identifier that applies to this person's qualification in this role.
            :param code: Coded representation of the qualification.
            :param period: Period during which the qualification is valid.
            :param issuer: Organization that regulates and issues the qualification.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            code=code,
            period=period,
            issuer=issuer,
        )
