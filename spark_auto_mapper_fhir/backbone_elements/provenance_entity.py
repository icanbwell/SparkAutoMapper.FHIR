from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.provenance_entity_role import ProvenanceEntityRole
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for what
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.backbone_elements.provenance_agent import ProvenanceAgent


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ProvenanceEntity(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        role: ProvenanceEntityRole ,
        what: Reference [Union[Resource]],
        agent: Optional[FhirList[ProvenanceAgent ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param role: How the entity was used during the activity.
        :param what: Identity of the  Entity used. May be a logical or physical uri and maybe
    absolute or relative.
        :param agent: The entity is attributed to an agent to express the agent's responsibility for
    that entity, possibly along with other agents. This description can be
    understood as shorthand for saying that the agent was responsible for the
    activity which generated the entity.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            role=role,
            what=what,
            agent=agent,
        )
