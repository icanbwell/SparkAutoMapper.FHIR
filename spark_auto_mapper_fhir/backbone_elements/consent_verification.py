from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for verifiedWith
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.complex_types.date_time import dateTime


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConsentVerification(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        verified: boolean,
        verifiedWith: Optional[Reference[Union[Patient, RelatedPerson]]] = None,
        verificationDate: Optional[dateTime] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param verified: Has the instruction been verified.
        :param verifiedWith: Who verified the instruction (Patient, Relative or other Authorized Person).
        :param verificationDate: Date verification was collected.
        """
        super().__init__(
            resourceType="ConsentVerification",
            id_=id_,
            meta=meta,
            extension=extension,
            verified=verified,
            verifiedWith=verifiedWith,
            verificationDate=verificationDate,
        )
