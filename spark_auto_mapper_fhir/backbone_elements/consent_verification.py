from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # verified (boolean)
    # verifiedWith (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for verifiedWith
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # verificationDate (dateTime)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConsentVerification(FhirBackboneElementBase):
    """
    Consent.Verification
        A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        verified: FhirBoolean,
        verifiedWith: Optional[Reference[Union[Patient, RelatedPerson]]] = None,
        verificationDate: Optional[FhirDateTime] = None,
    ) -> None:
        """
            A record of a healthcare consumer’s  choices, which permits or denies
        identified recipient(s) or recipient role(s) to perform one or more actions
        within a given policy context, for specific purposes and periods of time.

            :param id_: id of resource
            :param extension: extensions
            :param verified: Has the instruction been verified.
            :param verifiedWith: Who verified the instruction (Patient, Relative or other Authorized Person).
            :param verificationDate: Date verification was collected.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            verified=verified,
            verifiedWith=verifiedWith,
            verificationDate=verificationDate,
        )
