from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # severity (IssueSeverity)
    from spark_auto_mapper_fhir.value_sets.issue_severity import IssueSeverityCode

    # code (IssueType)
    from spark_auto_mapper_fhir.value_sets.issue_type import IssueTypeCode

    # details (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for details
    # Import for CodeableConcept for details
    from spark_auto_mapper_fhir.value_sets.operation_outcome_codes import (
        OperationOutcomeCodesCode,
    )

    # End Import for CodeableConcept for details
    # diagnostics (string)
    # location (string)
    # expression (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationOutcomeIssue(FhirBackboneElementBase):
    """
    OperationOutcome.Issue
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        severity: IssueSeverityCode,
        code: IssueTypeCode,
        details: Optional[CodeableConcept[OperationOutcomeCodesCode]] = None,
        diagnostics: Optional[FhirString] = None,
        location: Optional[FhirList[FhirString]] = None,
        expression: Optional[FhirList[FhirString]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param severity: Indicates whether the issue indicates a variation from successful processing.
            :param code: Describes the type of the issue. The system that creates an OperationOutcome
        SHALL choose the most applicable code from the IssueType value set, and may
        additional provide its own code for the error in the details element.
            :param details: Additional details about the error. This may be a text description of the
        error or a system code that identifies the error.
            :param diagnostics: Additional diagnostic information about the issue.
            :param location: This element is deprecated because it is XML specific. It is replaced by
        issue.expression, which is format independent, and simpler to parse.

        For resource issues, this will be a simple XPath limited to element names,
        repetition indicators and the default child accessor that identifies one of
        the elements in the resource that caused this issue to be raised.  For HTTP
        errors, will be "http." + the parameter name.
            :param expression: A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names,
        repetition indicators and the default child accessor that identifies one of
        the elements in the resource that caused this issue to be raised.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            severity=severity,
            code=code,
            details=details,
            diagnostics=diagnostics,
            location=location,
            expression=expression,
        )
