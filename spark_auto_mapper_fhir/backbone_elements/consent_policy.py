from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # authority (uri)
    # uri (uri)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConsentPolicy(FhirBackboneElementBase):
    """
    Consent.Policy
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        authority: Optional[FhirUri] = None,
        uri: Optional[FhirUri] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param authority: Entity or Organization having regulatory jurisdiction or accountability for
        enforcing policies pertaining to Consent Directives.
            :param uri: The references to the policies that are included in this consent scope.
        Policies may be organizational, but are often defined jurisdictionally, or in
        law.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            authority=authority,
            uri=uri,
        )
