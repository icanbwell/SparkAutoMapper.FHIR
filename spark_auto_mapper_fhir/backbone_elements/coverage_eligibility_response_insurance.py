from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for coverage
    from spark_auto_mapper_fhir.resources.coverage import Coverage
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_response_item import (
        CoverageEligibilityResponseItem,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityResponseInsurance(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        coverage: Reference[Union[Coverage]],
        inforce: Optional[FhirBoolean] = None,
        benefitPeriod: Optional[Period] = None,
        item: Optional[FhirList[CoverageEligibilityResponseItem]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param coverage: Reference to the insurance card level information contained in the Coverage
        resource. The coverage issuing insurer will use these details to locate the
        patient's actual coverage within the insurer's information system.
            :param inforce: Flag indicating if the coverage provided is inforce currently if no service
        date(s) specified or for the whole duration of the service dates.
            :param benefitPeriod: The term of the benefits documented in this response.
            :param item: Benefits and optionally current balances, and authorization details by
        category or service.
        """
        super().__init__(
            resourceType="CoverageEligibilityResponseInsurance",
            id_=id_,
            meta=meta,
            extension=extension,
            coverage=coverage,
            inforce=inforce,
            benefitPeriod=benefitPeriod,
            item=item,
        )
