from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for typeReference
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.backbone_elements.contract_context import ContractContext
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.complex_types.period import Period
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.backbone_elements.contract_answer import ContractAnswer
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt
    from spark_auto_mapper_fhir.backbone_elements.contract_valued_item import ContractValuedItem


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractAsset(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        scope: Optional[CodeableConcept] = None,
        type: Optional[FhirList[CodeableConcept]] = None,
        typeReference: Optional[FhirList[Reference[Union[Resource]]]] = None,
        subtype: Optional[FhirList[CodeableConcept]] = None,
        relationship: Optional[Coding] = None,
        context: Optional[FhirList[ContractContext]] = None,
        condition: Optional[string] = None,
        periodType: Optional[FhirList[CodeableConcept]] = None,
        period: Optional[FhirList[Period]] = None,
        usePeriod: Optional[FhirList[Period]] = None,
        text: Optional[string] = None,
        linkId: Optional[FhirList[string]] = None,
        answer: Optional[FhirList[ContractAnswer]] = None,
        securityLabelNumber: Optional[FhirList[unsignedInt]] = None,
        valuedItem: Optional[FhirList[ContractValuedItem]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param scope: Differentiates the kind of the asset .
        :param type: Target entity type about which the term may be concerned.
        :param typeReference: Associated entities.
        :param subtype: May be a subtype or part of an offered asset.
        :param relationship: Specifies the applicability of the term to an asset resource instance, and
    instances it refers to orinstances that refer to it, and/or are owned by the
    offeree.
        :param context: Circumstance of the asset.
        :param condition: Description of the quality and completeness of the asset that imay be a factor
    in its valuation.
        :param periodType: Type of Asset availability for use or ownership.
        :param period: Asset relevant contractual time period.
        :param usePeriod: Time period of asset use.
        :param text: Clause or question text (Prose Object) concerning the asset in a linked form,
    such as a QuestionnaireResponse used in the formation of the contract.
        :param linkId: Id [identifier??] of the clause or question text about the asset in the
    referenced form or QuestionnaireResponse.
        :param answer: Response to assets.
        :param securityLabelNumber: Security labels that protects the asset.
        :param valuedItem: Contract Valued Item List.
        """
        super().__init__(
            resourceType="ContractAsset",
            id_=id_,
            meta=meta,
            extension=extension,
            scope=scope,
            type=type,
            typeReference=typeReference,
            subtype=subtype,
            relationship=relationship,
            context=context,
            condition=condition,
            periodType=periodType,
            period=period,
            usePeriod=usePeriod,
            text=text,
            linkId=linkId,
            answer=answer,
            securityLabelNumber=securityLabelNumber,
            valuedItem=valuedItem,
        )
