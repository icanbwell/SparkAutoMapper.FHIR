from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # scope (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for scope
    # Import for CodeableConcept for scope
    from spark_auto_mapper_fhir.value_sets.contract_resource_asset_scope_codes import (
        ContractResourceAssetScopeCodesCode,
    )

    # End Import for CodeableConcept for scope
    # type_ (CodeableConcept)
    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.contract_resource_asset_type_codes import (
        ContractResourceAssetTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # typeReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for typeReference
    # subtype (CodeableConcept)
    # End Import for References for subtype
    # Import for CodeableConcept for subtype
    from spark_auto_mapper_fhir.value_sets.contract_resource_asset_sub__type_codes import (
        ContractResourceAssetSub_TypeCodesCode,
    )

    # End Import for CodeableConcept for subtype
    # relationship (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for relationship
    # Import for CodeableConcept for relationship
    from spark_auto_mapper_fhir.value_sets.consent_content_class import (
        ConsentContentClassCode,
    )

    # End Import for CodeableConcept for relationship
    # context (Contract.Context)
    from spark_auto_mapper_fhir.backbone_elements.contract_context import (
        ContractContext,
    )

    # condition (string)
    # periodType (CodeableConcept)
    # End Import for References for periodType
    # Import for CodeableConcept for periodType
    from spark_auto_mapper_fhir.value_sets.contract_resource_asset_availiability_codes import (
        ContractResourceAssetAvailiabilityCodesCode,
    )

    # End Import for CodeableConcept for periodType
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # usePeriod (Period)
    # text (string)
    # linkId (string)
    # answer (Contract.Answer)
    from spark_auto_mapper_fhir.backbone_elements.contract_answer import ContractAnswer

    # securityLabelNumber (unsignedInt)
    from spark_auto_mapper_fhir.fhir_types.unsigned_int import FhirUnsignedInt

    # valuedItem (Contract.ValuedItem)
    from spark_auto_mapper_fhir.backbone_elements.contract_valued_item import (
        ContractValuedItem,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractAsset(FhirBackboneElementBase):
    """
    Contract.Asset
        Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        scope: Optional[CodeableConcept[ContractResourceAssetScopeCodesCode]] = None,
        type_: Optional[
            FhirList[CodeableConcept[ContractResourceAssetTypeCodesCode]]
        ] = None,
        typeReference: Optional[FhirList[Reference[Resource]]] = None,
        subtype: Optional[
            FhirList[CodeableConcept[ContractResourceAssetSub_TypeCodesCode]]
        ] = None,
        relationship: Optional[Coding[ConsentContentClassCode]] = None,
        context: Optional[FhirList[ContractContext]] = None,
        condition: Optional[FhirString] = None,
        periodType: Optional[
            FhirList[CodeableConcept[ContractResourceAssetAvailiabilityCodesCode]]
        ] = None,
        period: Optional[FhirList[Period]] = None,
        usePeriod: Optional[FhirList[Period]] = None,
        text: Optional[FhirString] = None,
        linkId: Optional[FhirList[FhirString]] = None,
        answer: Optional[FhirList[ContractAnswer]] = None,
        securityLabelNumber: Optional[FhirList[FhirUnsignedInt]] = None,
        valuedItem: Optional[FhirList[ContractValuedItem]] = None,
    ) -> None:
        """
            Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
        a policy or agreement.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param scope: Differentiates the kind of the asset .
            :param type_: Target entity type about which the term may be concerned.
            :param typeReference: Associated entities.
            :param subtype: May be a subtype or part of an offered asset.
            :param relationship: Specifies the applicability of the term to an asset resource instance, and
        instances it refers to orinstances that refer to it, and/or are owned by the
        offeree.
            :param context: Circumstance of the asset.
            :param condition: Description of the quality and completeness of the asset that imay be a factor
        in its valuation.
            :param periodType: Type of Asset availability for use or ownership.
            :param period: Asset relevant contractual time period.
            :param usePeriod: Time period of asset use.
            :param text: Clause or question text (Prose Object) concerning the asset in a linked form,
        such as a QuestionnaireResponse used in the formation of the contract.
            :param linkId: Id [identifier??] of the clause or question text about the asset in the
        referenced form or QuestionnaireResponse.
            :param answer: Response to assets.
            :param securityLabelNumber: Security labels that protects the asset.
            :param valuedItem: Contract Valued Item List.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            scope=scope,
            type_=type_,
            typeReference=typeReference,
            subtype=subtype,
            relationship=relationship,
            context=context,
            condition=condition,
            periodType=periodType,
            period=period,
            usePeriod=usePeriod,
            text=text,
            linkId=linkId,
            answer=answer,
            securityLabelNumber=securityLabelNumber,
            valuedItem=valuedItem,
        )
