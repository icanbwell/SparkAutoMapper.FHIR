from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # resourceId (string)
    # resourceType (ResourceType)
    from spark_auto_mapper_fhir.value_sets.resource_type import ResourceTypeCode

    # name (string)
    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # version (ExampleScenario.Version)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_version import (
        ExampleScenarioVersion,
    )

    # containedInstance (ExampleScenario.ContainedInstance)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_contained_instance import (
        ExampleScenarioContainedInstance,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExampleScenarioInstance(FhirBackboneElementBase):
    """
    ExampleScenario.Instance
        Example of workflow instance.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        resourceId: FhirString,
        resourceType: ResourceTypeCode,
        name: Optional[FhirString] = None,
        description: Optional[FhirMarkdown] = None,
        version: Optional[FhirList[ExampleScenarioVersion]] = None,
        containedInstance: Optional[FhirList[ExampleScenarioContainedInstance]] = None,
    ) -> None:
        """
            Example of workflow instance.

            :param id_: id of resource
            :param extension: extensions
            :param resourceId: The id of the resource for referencing.
            :param resourceType: The type of the resource.
            :param name: A short name for the resource instance.
            :param description: Human-friendly description of the resource instance.
            :param version: A specific version of the resource.
            :param containedInstance: Resources contained in the instance (e.g. the observations contained in a
        bundle).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            resourceId=resourceId,
            resourceType=resourceType,
            name=name,
            description=description,
            version=version,
            containedInstance=containedInstance,
        )
