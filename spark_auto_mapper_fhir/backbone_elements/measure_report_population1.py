from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.measure_population_type import (
        MeasurePopulationTypeCode,
    )

    # End Import for CodeableConcept for code
    # count (integer)
    # subjectResults (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subjectResults
    from spark_auto_mapper_fhir.resources.list import List_


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureReportPopulation1(FhirBackboneElementBase):
    """
    MeasureReport.Population1
        The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[CodeableConcept[MeasurePopulationTypeCode]] = None,
        count: Optional[FhirInteger] = None,
        subjectResults: Optional[Reference[Union[List_]]] = None,
    ) -> None:
        """
            The MeasureReport resource contains the results of the calculation of a
        measure; and optionally a reference to the resources involved in that
        calculation.

            :param id_: id of resource
            :param extension: extensions
            :param code: The type of the population.
            :param count: The number of members of the population in this stratum.
            :param subjectResults: This element refers to a List of subject level MeasureReport resources, one
        for each subject in this population in this stratum.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            count=count,
            subjectResults=subjectResults,
        )
