from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # title (string)
    # generation (GuidePageGeneration)
    from spark_auto_mapper_fhir.value_sets.guide_page_generation import (
        GuidePageGenerationCode,
    )

    # nameUrl (url)
    from spark_auto_mapper_fhir.complex_types.url import url

    # nameReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for nameReference
    from spark_auto_mapper_fhir.resources.binary import Binary


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuidePage(FhirBackboneElementBase):
    """
    ImplementationGuide.Page
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        title: FhirString,
        generation: GuidePageGenerationCode,
        page: Optional[FhirList[ImplementationGuidePage]] = None,
        nameUrl: Optional[url] = None,
        nameReference: Optional[Reference[Union[Binary]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param title: A short title used to represent this page in navigational structures such as
        table of contents, bread crumbs, etc.
            :param generation: A code that indicates how the page is generated.
            :param page: Nested Pages/Sections under this page.
            :param nameUrl: None
            :param nameReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            title=title,
            generation=generation,
            page=page,
            nameUrl=nameUrl,
            nameReference=nameReference,
        )
