from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.guide_page_generation import (
        GuidePageGeneration,
    )
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_page import (
        ImplementationGuidePage,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuidePage(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        title: FhirString,
        generation: GuidePageGeneration,
        page: Optional[FhirList[ImplementationGuidePage]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param title: A short title used to represent this page in navigational structures such as
        table of contents, bread crumbs, etc.
            :param generation: A code that indicates how the page is generated.
            :param page: Nested Pages/Sections under this page.
        """
        super().__init__(
            resourceType="ImplementationGuidePage",
            id_=id_,
            meta=meta,
            extension=extension,
            title=title,
            generation=generation,
            page=page,
        )
