from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.complex_types.search_param_type import SearchParamType
    from spark_auto_mapper_fhir.complex_types.markdown import markdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementSearchParam(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirString,
        definition: Optional[canonical] = None,
        type: SearchParamType,
        documentation: Optional[markdown] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param name: The name of the search parameter used in the interface.
            :param definition: An absolute URI that is a formal reference to where this parameter was first
        defined, so that a client can be confident of the meaning of the search
        parameter (a reference to [[[SearchParameter.url]]]). This element SHALL be
        populated if the search parameter refers to a SearchParameter defined by the
        FHIR core specification or externally defined IGs.
            :param type: The type of value a search parameter refers to, and how the content is
        interpreted.
            :param documentation: This allows documentation of any distinct behaviors about how the search
        parameter is used.  For example, text matching algorithms.
        """
        super().__init__(
            resourceType="CapabilityStatementSearchParam",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            definition=definition,
            type=type,
            documentation=documentation,
        )
