from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # type_ (qualityType)
    from spark_auto_mapper_fhir.value_sets.quality_type import QualityTypeCode

    # standardSequence (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for standardSequence
    # Import for CodeableConcept for standardSequence
    from spark_auto_mapper_fhir.value_sets.fda__standard_sequence import (
        FDA_StandardSequenceCode,
    )

    # End Import for CodeableConcept for standardSequence
    # start (integer)
    # end (integer)
    # score (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # method (CodeableConcept)
    # End Import for References for method
    # Import for CodeableConcept for method
    from spark_auto_mapper_fhir.value_sets.fda__method import FDA_MethodCode

    # End Import for CodeableConcept for method
    # truthTP (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # queryTP (decimal)
    # truthFN (decimal)
    # queryFP (decimal)
    # gtFP (decimal)
    # precision (decimal)
    # recall (decimal)
    # fScore (decimal)
    # roc (MolecularSequence.Roc)
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_roc import (
        MolecularSequenceRoc,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequenceQuality(FhirBackboneElementBase):
    """
    MolecularSequence.Quality
        Raw data describing a biological sequence.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        type_: QualityTypeCode,
        standardSequence: Optional[CodeableConcept[FDA_StandardSequenceCode]] = None,
        start: Optional[FhirInteger] = None,
        end: Optional[FhirInteger] = None,
        score: Optional[Quantity] = None,
        method: Optional[CodeableConcept[FDA_MethodCode]] = None,
        truthTP: Optional[FhirDecimal] = None,
        queryTP: Optional[FhirDecimal] = None,
        truthFN: Optional[FhirDecimal] = None,
        queryFP: Optional[FhirDecimal] = None,
        gtFP: Optional[FhirDecimal] = None,
        precision: Optional[FhirDecimal] = None,
        recall: Optional[FhirDecimal] = None,
        fScore: Optional[FhirDecimal] = None,
        roc: Optional[MolecularSequenceRoc] = None,
    ) -> None:
        """
            Raw data describing a biological sequence.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param type_: INDEL / SNP / Undefined variant.
            :param standardSequence: Gold standard sequence used for comparing against.
            :param start: Start position of the sequence. If the coordinate system is either 0-based or
        1-based, then start position is inclusive.
            :param end: End position of the sequence. If the coordinate system is 0-based then end is
        exclusive and does not include the last position. If the coordinate system is
        1-base, then end is inclusive and includes the last position.
            :param score: The score of an experimentally derived feature such as a p-value ([SO:0001685]
        (http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
            :param method: Which method is used to get sequence quality.
            :param truthTP: True positives, from the perspective of the truth data, i.e. the number of
        sites in the Truth Call Set for which there are paths through the Query Call
        Set that are consistent with all of the alleles at this site, and for which
        there is an accurate genotype call for the event.
            :param queryTP: True positives, from the perspective of the query data, i.e. the number of
        sites in the Query Call Set for which there are paths through the Truth Call
        Set that are consistent with all of the alleles at this site, and for which
        there is an accurate genotype call for the event.
            :param truthFN: False negatives, i.e. the number of sites in the Truth Call Set for which
        there is no path through the Query Call Set that is consistent with all of the
        alleles at this site, or sites for which there is an inaccurate genotype call
        for the event. Sites with correct variant but incorrect genotype are counted
        here.
            :param queryFP: False positives, i.e. the number of sites in the Query Call Set for which
        there is no path through the Truth Call Set that is consistent with this site.
        Sites with correct variant but incorrect genotype are counted here.
            :param gtFP: The number of false positives where the non-REF alleles in the Truth and Query
        Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or
        similar).
            :param precision: QUERY.TP / (QUERY.TP + QUERY.FP).
            :param recall: TRUTH.TP / (TRUTH.TP + TRUTH.FN).
            :param fScore: Harmonic mean of Recall and Precision, computed as: 2 * precision * recall /
        (precision + recall).
            :param roc: Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity
        tradeoff.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            type_=type_,
            standardSequence=standardSequence,
            start=start,
            end=end,
            score=score,
            method=method,
            truthTP=truthTP,
            queryTP=queryTP,
            truthFN=truthFN,
            queryFP=queryFP,
            gtFP=gtFP,
            precision=precision,
            recall=recall,
            fScore=fScore,
            roc=roc,
        )
