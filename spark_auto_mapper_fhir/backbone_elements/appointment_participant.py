from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.participant_type import ParticipantType

    # End Import for CodeableConcept for type
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for actor
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.complex_types.participant_required import (
        ParticipantRequired,
    )
    from spark_auto_mapper_fhir.complex_types.participation_status import (
        ParticipationStatus,
    )
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AppointmentParticipant(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: Optional[FhirList[CodeableConcept[ParticipantType]]] = None,
        actor: Optional[
            Reference[
                Union[
                    Patient,
                    Practitioner,
                    PractitionerRole,
                    RelatedPerson,
                    Device,
                    HealthcareService,
                    Location,
                ]
            ]
        ] = None,
        required: Optional[ParticipantRequired] = None,
        status: ParticipationStatus,
        period: Optional[Period] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type: Role of participant in the appointment.
            :param actor: A Person, Location/HealthcareService or Device that is participating in the
        appointment.
            :param required: Whether this participant is required to be present at the meeting. This covers
        a use-case where two doctors need to meet to discuss the results for a
        specific patient, and the patient is not required to be present.
            :param status: Participation status of the actor.
            :param period: Participation period of the actor.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type=type,
            actor=actor,
            required=required,
            status=status,
            period=period,
        )
