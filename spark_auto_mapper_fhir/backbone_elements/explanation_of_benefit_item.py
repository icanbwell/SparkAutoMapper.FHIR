from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for udi
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_adjudication import (
        ExplanationOfBenefitAdjudication,
    )
    from spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_detail import (
        ExplanationOfBenefitDetail,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitItem(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: positiveInt,
        careTeamSequence: Optional[FhirList[positiveInt]] = None,
        diagnosisSequence: Optional[FhirList[positiveInt]] = None,
        procedureSequence: Optional[FhirList[positiveInt]] = None,
        informationSequence: Optional[FhirList[positiveInt]] = None,
        revenue: Optional[CodeableConcept] = None,
        category: Optional[CodeableConcept] = None,
        productOrService: CodeableConcept,
        modifier: Optional[FhirList[CodeableConcept]] = None,
        programCode: Optional[FhirList[CodeableConcept]] = None,
        quantity: Optional[Quantity] = None,
        unitPrice: Optional[Money] = None,
        factor: Optional[decimal] = None,
        net: Optional[Money] = None,
        udi: Optional[FhirList[Reference[Union[Device]]]] = None,
        bodySite: Optional[CodeableConcept] = None,
        subSite: Optional[FhirList[CodeableConcept]] = None,
        encounter: Optional[FhirList[Reference[Union[Encounter]]]] = None,
        noteNumber: Optional[FhirList[positiveInt]] = None,
        adjudication: Optional[FhirList[ExplanationOfBenefitAdjudication]] = None,
        detail: Optional[FhirList[ExplanationOfBenefitDetail]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param sequence: A number to uniquely identify item entries.
            :param careTeamSequence: Care team members related to this service or product.
            :param diagnosisSequence: Diagnoses applicable for this service or product.
            :param procedureSequence: Procedures applicable for this service or product.
            :param informationSequence: Exceptions, special conditions and supporting information applicable for this
        service or product.
            :param revenue: The type of revenue or cost center providing the product and/or service.
            :param category: Code to identify the general type of benefits under which products and
        services are provided.
            :param productOrService: When the value is a group code then this item collects a set of related claim
        details, otherwise this contains the product, service, drug or other billing
        code for the item.
            :param modifier: Item typification or modifiers codes to convey additional context for the
        product or service.
            :param programCode: Identifies the program under which this may be recovered.
            :param quantity: The number of repetitions of a service or product.
            :param unitPrice: If the item is not a group then this is the fee for the product or service,
        otherwise this is the total of the fees for the details of the group.
            :param factor: A real number that represents a multiplier used in determining the overall
        value of services delivered and/or goods received. The concept of a Factor
        allows for a discount or surcharge multiplier to be applied to a monetary
        amount.
            :param net: The quantity times the unit price for an additional service or product or
        charge.
            :param udi: Unique Device Identifiers associated with this line item.
            :param bodySite: Physical service site on the patient (limb, tooth, etc.).
            :param subSite: A region or surface of the bodySite, e.g. limb region or tooth surface(s).
            :param encounter: A billed item may include goods or services provided in multiple encounters.
            :param noteNumber: The numbers associated with notes below which apply to the adjudication of
        this item.
            :param adjudication: If this item is a group then the values here are a summary of the adjudication
        of the detail items. If this item is a simple product or service then this is
        the result of the adjudication of this item.
            :param detail: Second-tier of goods and services.
        """
        super().__init__(
            resourceType="ExplanationOfBenefitItem",
            id_=id_,
            meta=meta,
            extension=extension,
            sequence=sequence,
            careTeamSequence=careTeamSequence,
            diagnosisSequence=diagnosisSequence,
            procedureSequence=procedureSequence,
            informationSequence=informationSequence,
            revenue=revenue,
            category=category,
            productOrService=productOrService,
            modifier=modifier,
            programCode=programCode,
            quantity=quantity,
            unitPrice=unitPrice,
            factor=factor,
            net=net,
            udi=udi,
            bodySite=bodySite,
            subSite=subSite,
            encounter=encounter,
            noteNumber=noteNumber,
            adjudication=adjudication,
            detail=detail,
        )
