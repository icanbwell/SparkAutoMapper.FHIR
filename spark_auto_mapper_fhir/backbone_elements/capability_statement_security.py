from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # cors (boolean)
    # service (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for service
    # Import for CodeableConcept for service
    from spark_auto_mapper_fhir.value_sets.restful_security_service import (
        RestfulSecurityServiceCode,
    )

    # End Import for CodeableConcept for service
    # description (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementSecurity(FhirBackboneElementBase):
    """
    CapabilityStatement.Security
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        cors: Optional[FhirBoolean] = None,
        service: Optional[FhirList[CodeableConcept[RestfulSecurityServiceCode]]] = None,
        description: Optional[FhirMarkdown] = None,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.

            :param id_: id of resource
            :param extension: extensions
            :param cors: Server adds CORS headers when responding to requests - this enables Javascript
        applications to use the server.
            :param service: Types of security services that are supported/required by the system.
            :param description: General description of how security works.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            cors=cors,
            service=service,
            description=description,
        )
