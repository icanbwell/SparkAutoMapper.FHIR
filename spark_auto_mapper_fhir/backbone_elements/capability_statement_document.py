from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # mode (DocumentMode)
    from spark_auto_mapper_fhir.value_sets.document_mode import DocumentModeCode

    # documentation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementDocument(FhirBackboneElementBase):
    """
    CapabilityStatement.Document
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        mode: DocumentModeCode,
        documentation: Optional[FhirMarkdown] = None,
        profile: FhirCanonical,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param mode: Mode of this document declaration - whether an application is a producer or
        consumer.
            :param documentation: A description of how the application supports or uses the specified document
        profile.  For example, when documents are created, what action is taken with
        consumed documents, etc.
            :param profile: A profile on the document Bundle that constrains which resources are present,
        and their contents.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            mode=mode,
            documentation=documentation,
            profile=profile,
        )
