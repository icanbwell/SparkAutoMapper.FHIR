from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # expiry (dateTime)
    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceInstance(FhirBackboneElementBase):
    """
    Substance.Instance
        A homogeneous material with a definite composition.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        expiry: Optional[FhirDateTime] = None,
        quantity: Optional[Quantity] = None,
    ) -> None:
        """
            A homogeneous material with a definite composition.

            :param id_: id of resource
            :param extension: extensions
            :param identifier: Identifier associated with the package/container (usually a label affixed
        directly).
            :param expiry: When the substance is no longer valid to use. For some substances, a single
        arbitrary date is used for expiry.
            :param quantity: The amount of the substance.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            expiry=expiry,
            quantity=quantity,
        )
