from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # result (TestReportActionResult)
    from spark_auto_mapper_fhir.value_sets.test_report_action_result import (
        TestReportActionResultCode,
    )

    # message (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # detail (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestReportAssert(FhirBackboneElementBase):
    """
    TestReport.Assert
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        result: TestReportActionResultCode,
        message: Optional[FhirMarkdown] = None,
        detail: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param result: The result of this assertion.
        :param message: An explanatory message associated with the result.
        :param detail: A link to further details on the result.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            result=result,
            message=message,
            detail=detail,
        )
