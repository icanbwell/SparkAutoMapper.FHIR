from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (ResourceType)
    from spark_auto_mapper_fhir.value_sets.resource_type import ResourceTypeCode

    # params (string)
    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # compartment (GraphDefinition.Compartment)
    from spark_auto_mapper_fhir.backbone_elements.graph_definition_compartment import (
        GraphDefinitionCompartment,
    )

    # link (GraphDefinition.Link)
    from spark_auto_mapper_fhir.backbone_elements.graph_definition_link import (
        GraphDefinitionLink,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GraphDefinitionTarget(FhirBackboneElementBase):
    """
    GraphDefinition.Target
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: ResourceTypeCode,
        params: Optional[FhirString] = None,
        profile: Optional[FhirCanonical] = None,
        compartment: Optional[FhirList[GraphDefinitionCompartment]] = None,
        link: Optional[FhirList[GraphDefinitionLink]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: Type of resource this link refers to.
        :param params: A set of parameters to look up.
        :param profile: Profile for the target resource.
        :param compartment: Compartment Consistency Rules.
        :param link: Additional links from target resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            params=params,
            profile=profile,
            compartment=compartment,
            link=link,
        )
