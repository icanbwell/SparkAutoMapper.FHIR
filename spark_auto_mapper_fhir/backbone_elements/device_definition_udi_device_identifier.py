from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.uri import uri
    from spark_auto_mapper_fhir.complex_types.uri import uri


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceDefinitionUdiDeviceIdentifier(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        deviceIdentifier: FhirString,
        issuer: uri,
        jurisdiction: uri,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param deviceIdentifier: The identifier that is to be associated with every Device that references this
        DeviceDefintiion for the issuer and jurisdication porvided in the
        DeviceDefinition.udiDeviceIdentifier.
            :param issuer: The organization that assigns the identifier algorithm.
            :param jurisdiction: The jurisdiction to which the deviceIdentifier applies.
        """
        super().__init__(
            resourceType="DeviceDefinitionUdiDeviceIdentifier",
            id_=id_,
            meta=meta,
            extension=extension,
            deviceIdentifier=deviceIdentifier,
            issuer=issuer,
            jurisdiction=jurisdiction,
        )
