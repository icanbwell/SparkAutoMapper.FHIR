from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # mode (ConceptMapGroupUnmappedMode)
    from spark_auto_mapper_fhir.value_sets.concept_map_group_unmapped_mode import (
        ConceptMapGroupUnmappedModeCode,
    )

    # code (generic_type)
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # display (string)
    # url (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapUnmapped(FhirBackboneElementBase):
    """
    ConceptMap.Unmapped
        A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        mode: ConceptMapGroupUnmappedModeCode,
        code: Optional[GenericTypeCode] = None,
        display: Optional[FhirString] = None,
        url: Optional[FhirCanonical] = None,
    ) -> None:
        """
            A statement of relationships from one set of concepts to one or more other
        concepts - either concepts in code systems, or data element/data element
        concepts, or classes in class models.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param mode: Defines which action to take if there is no match for the source concept in
        the target system designated for the group. One of 3 actions are possible: use
        the unmapped code (this is useful when doing a mapping between versions, and
        only a few codes have changed), use a fixed code (a default code), or
        alternatively, a reference to a different concept map can be provided (by
        canonical URL).
            :param code: The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped
        to a single fixed code.
            :param display: The display for the code. The display is only provided to help editors when
        editing the concept map.
            :param url: The canonical reference to an additional ConceptMap resource instance to use
        for mapping if this ConceptMap resource contains no matching mapping for the
        source concept.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            mode=mode,
            code=code,
            display=display,
            url=url,
        )
