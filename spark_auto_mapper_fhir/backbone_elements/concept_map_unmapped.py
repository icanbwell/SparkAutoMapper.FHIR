from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # mode (ConceptMapGroupUnmappedMode)
    from spark_auto_mapper_fhir.value_sets.concept_map_group_unmapped_mode import (
        ConceptMapGroupUnmappedModeCode,
    )

    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # display (string)
    # url (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapUnmapped(FhirBackboneElementBase):
    """
    ConceptMap.Unmapped
        A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        mode: ConceptMapGroupUnmappedModeCode,
        code: Optional[code] = None,
        display: Optional[FhirString] = None,
        url: Optional[FhirCanonical] = None,
    ) -> None:
        """
            A statement of relationships from one set of concepts to one or more other
        concepts - either concepts in code systems, or data element/data element
        concepts, or classes in class models.

            :param id_: id of resource
            :param extension: extensions
            :param mode: Defines which action to take if there is no match for the source concept in
        the target system designated for the group. One of 3 actions are possible: use
        the unmapped code (this is useful when doing a mapping between versions, and
        only a few codes have changed), use a fixed code (a default code), or
        alternatively, a reference to a different concept map can be provided (by
        canonical URL).
            :param code: The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped
        to a single fixed code.
            :param display: The display for the code. The display is only provided to help editors when
        editing the concept map.
            :param url: The canonical reference to an additional ConceptMap resource instance to use
        for mapping if this ConceptMap resource contains no matching mapping for the
        source concept.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            mode=mode,
            code=code,
            display=display,
            url=url,
        )
