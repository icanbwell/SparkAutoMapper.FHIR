from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_author import SubstanceSourceMaterialAuthor
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_hybrid import SubstanceSourceMaterialHybrid
    from spark_auto_mapper_fhir.backbone_elements.substance_source_material_organism_general import SubstanceSourceMaterialOrganismGeneral


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSourceMaterialOrganism(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        family: Optional[CodeableConcept] = None,
        genus: Optional[CodeableConcept] = None,
        species: Optional[CodeableConcept] = None,
        intraspecificType: Optional[CodeableConcept] = None,
        intraspecificDescription: Optional[string] = None,
        author: Optional[FhirList[SubstanceSourceMaterialAuthor]] = None,
        hybrid: Optional[SubstanceSourceMaterialHybrid] = None,
        organismGeneral: Optional[SubstanceSourceMaterialOrganismGeneral] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param family: The family of an organism shall be specified.
        :param genus: The genus of an organism shall be specified; refers to the Latin epithet of
    the genus element of the plant/animal scientific name; it is present in names
    for genera, species and infraspecies.
        :param species: The species of an organism shall be specified; refers to the Latin epithet of
    the species of the plant/animal; it is present in names for species and
    infraspecies.
        :param intraspecificType: The Intraspecific type of an organism shall be specified.
        :param intraspecificDescription: The intraspecific description of an organism shall be specified based on a
    controlled vocabulary. For Influenza Vaccine, the intraspecific description
    shall contain the syntax of the antigen in line with the WHO convention.
        :param author: 4.9.13.6.1 Author type (Conditional).
        :param hybrid: 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
        :param organismGeneral: 4.9.13.7.1 Kingdom (Conditional).
        """
        super().__init__(
            resourceType="SubstanceSourceMaterialOrganism",
            id_=id_,
            meta=meta,
            extension=extension,
            family=family,
            genus=genus,
            species=species,
            intraspecificType=intraspecificType,
            intraspecificDescription=intraspecificDescription,
            author=author,
            hybrid=hybrid,
            organismGeneral=organismGeneral,
        )
