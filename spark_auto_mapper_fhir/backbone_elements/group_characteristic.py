from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code
    # exclude (boolean)
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # valueCodeableConcept (CodeableConcept)
    # End Import for References for valueCodeableConcept
    # Import for CodeableConcept for valueCodeableConcept
    # End Import for CodeableConcept for valueCodeableConcept
    # valueBoolean (boolean)
    # valueQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # valueRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # valueReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for valueReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GroupCharacteristic(FhirBackboneElementBase):
    """
    Group.Characteristic
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept[GenericTypeCode],
        exclude: FhirBoolean,
        period: Optional[Period] = None,
        valueCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        valueBoolean: Optional[FhirBoolean] = None,
        valueQuantity: Optional[Quantity] = None,
        valueRange: Optional[Range] = None,
        valueReference: Optional[Reference[Union[Resource]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: A code that identifies the kind of trait being asserted.
            :param exclude: If true, indicates the characteristic is one that is NOT held by members of
        the group.
            :param period: The period over which the characteristic is tested; e.g. the patient had an
        operation during the month of June.
            :param valueCodeableConcept: None
            :param valueBoolean: None
            :param valueQuantity: None
            :param valueRange: None
            :param valueReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            exclude=exclude,
            period=period,
            valueCodeableConcept=valueCodeableConcept,
            valueBoolean=valueBoolean,
            valueQuantity=valueQuantity,
            valueRange=valueRange,
            valueReference=valueReference,
        )
