from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # uri (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # version (TerminologyCapabilities.Version)
    from spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_version import (
        TerminologyCapabilitiesVersion,
    )

    # subsumption (boolean)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesCodeSystem(FhirBackboneElementBase):
    """
    TerminologyCapabilities.CodeSystem
        A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        uri: Optional[FhirCanonical] = None,
        version: Optional[FhirList[TerminologyCapabilitiesVersion]] = None,
        subsumption: Optional[FhirBoolean] = None,
    ) -> None:
        """
            A TerminologyCapabilities resource documents a set of capabilities (behaviors)
        of a FHIR Terminology Server that may be used as a statement of actual server
        functionality or a statement of required or desired server implementation.

            :param id_: id of resource
            :param extension: extensions
            :param uri: URI for the Code System.
            :param version: For the code system, a list of versions that are supported by the server.
            :param subsumption: True if subsumption is supported for this version of the code system.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            uri=uri,
            version=version,
            subsumption=subsumption,
        )
