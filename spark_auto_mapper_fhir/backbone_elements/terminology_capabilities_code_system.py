from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_version import (
        TerminologyCapabilitiesVersion,
    )
    from spark_auto_mapper_fhir.complex_types.boolean import boolean


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesCodeSystem(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        uri: Optional[canonical] = None,
        version: Optional[FhirList[TerminologyCapabilitiesVersion]] = None,
        subsumption: Optional[boolean] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param uri: URI for the Code System.
        :param version: For the code system, a list of versions that are supported by the server.
        :param subsumption: True if subsumption is supported for this version of the code system.
        """
        super().__init__(
            resourceType="TerminologyCapabilitiesCodeSystem",
            id_=id_,
            meta=meta,
            extension=extension,
            uri=uri,
            version=version,
            subsumption=subsumption,
        )
