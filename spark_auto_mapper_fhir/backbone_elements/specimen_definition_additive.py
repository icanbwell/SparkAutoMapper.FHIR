from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # additiveCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for additiveCodeableConcept
    # Import for CodeableConcept for additiveCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for additiveCodeableConcept
    # additiveReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for additiveReference
    from spark_auto_mapper_fhir.resources.substance import Substance


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SpecimenDefinitionAdditive(FhirBackboneElementBase):
    """
    SpecimenDefinition.Additive
        A kind of specimen with associated set of requirements.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        additiveCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        additiveReference: Optional[Reference[Union[Substance]]] = None,
    ) -> None:
        """
        A kind of specimen with associated set of requirements.

        :param id_: id of resource
        :param extension: extensions
        :param additiveCodeableConcept: None
        :param additiveReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            additiveCodeableConcept=additiveCodeableConcept,
            additiveReference=additiveReference,
        )
