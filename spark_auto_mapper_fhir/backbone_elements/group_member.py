from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # entity (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for entity
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.group import Group

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # inactive (boolean)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GroupMember(FhirBackboneElementBase):
    """
    Group.Member
        Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        entity: Reference[
            Union[
                Patient,
                Practitioner,
                PractitionerRole,
                Device,
                Medication,
                Substance,
                Group,
            ]
        ],
        period: Optional[Period] = None,
        inactive: Optional[FhirBoolean] = None,
    ) -> None:
        """
            Represents a defined collection of entities that may be discussed or acted
        upon collectively but which are not expected to act collectively, and are not
        formally or legally recognized; i.e. a collection of entities that isn't an
        Organization.

            :param id_: id of resource
            :param extension: extensions
            :param entity: A reference to the entity that is a member of the group. Must be consistent
        with Group.type. If the entity is another group, then the type must be the
        same.
            :param period: The period that the member was in the group, if known.
            :param inactive: A flag to indicate that the member is no longer in the group, but previously
        may have been a member.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            entity=entity,
            period=period,
            inactive=inactive,
        )
