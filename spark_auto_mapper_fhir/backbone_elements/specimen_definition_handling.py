from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for temperatureQualifier
    from spark_auto_mapper_fhir.value_sets.handling_condition_set import HandlingConditionSet
    # End Import for CodeableConcept for temperatureQualifier
    from spark_auto_mapper_fhir.complex_types.range import Range
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SpecimenDefinitionHandling(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        temperatureQualifier: Optional[CodeableConcept[HandlingConditionSet] ] = None,
        temperatureRange: Optional[Range ] = None,
        maxDuration: Optional[Duration ] = None,
        instruction: Optional[FhirString ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param temperatureQualifier: It qualifies the interval of temperature, which characterizes an occurrence of
    handling. Conditions that are not related to temperature may be handled in the
    instruction element.
        :param temperatureRange: The temperature interval for this set of handling instructions.
        :param maxDuration: The maximum time interval of preservation of the specimen with these
    conditions.
        :param instruction: Additional textual instructions for the preservation or transport of the
    specimen. For instance, 'Protect from light exposure'.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            temperatureQualifier=temperatureQualifier,
            temperatureRange=temperatureRange,
            maxDuration=maxDuration,
            instruction=instruction,
        )
