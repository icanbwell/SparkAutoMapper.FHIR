from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # reason (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationRequestSubstitution(FhirBackboneElementBase):
    """
    MedicationRequest.Substitution
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        reason: Optional[CodeableConcept] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param reason: Indicates the reason for the substitution, or why substitution must or must
        not be performed.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            reason=reason,
        )
