from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # operation (TestScript.Operation)
    from spark_auto_mapper_fhir.backbone_elements.test_script_operation import (
        TestScriptOperation,
    )

    # assert_ (TestScript.Assert)
    from spark_auto_mapper_fhir.backbone_elements.test_script_assert import (
        TestScriptAssert,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptAction1(FhirBackboneElementBase):
    """
    TestScript.Action1
        A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        operation: Optional[TestScriptOperation] = None,
        assert_: Optional[TestScriptAssert] = None,
    ) -> None:
        """
            A structured set of tests against a FHIR server or client implementation to
        determine compliance against the FHIR specification.

            :param id_: id of resource
            :param extension: extensions
            :param operation: An operation would involve a REST request to a server.
            :param assert_: Evaluates the results of previous operations to determine if the server under
        test behaves appropriately.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            operation=operation,
            assert_=assert_,
        )
