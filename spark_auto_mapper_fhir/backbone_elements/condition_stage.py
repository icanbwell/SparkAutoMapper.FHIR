from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for summary
    from spark_auto_mapper_fhir.value_sets.condition_stage import ConditionStage

    # End Import for CodeableConcept for summary
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for assessment
    from spark_auto_mapper_fhir.resources.clinical_impression import ClinicalImpression
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.condition_stage_type import (
        ConditionStageType,
    )

    # End Import for CodeableConcept for type


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConditionStage(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        summary: Optional[CodeableConcept[ConditionStage]] = None,
        assessment: Optional[
            FhirList[
                Reference[Union[ClinicalImpression, DiagnosticReport, Observation]]
            ]
        ] = None,
        type: Optional[CodeableConcept[ConditionStageType]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param summary: A simple summary of the stage such as "Stage 3". The determination of the
        stage is disease-specific.
            :param assessment: Reference to a formal record of the evidence on which the staging assessment
        is based.
            :param type: The kind of staging, such as pathological or clinical staging.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            summary=summary,
            assessment=assessment,
            type=type,
        )
