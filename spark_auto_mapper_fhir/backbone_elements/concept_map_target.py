from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # display (string)
    # equivalence (ConceptMapEquivalence)
    from spark_auto_mapper_fhir.value_sets.concept_map_equivalence import (
        ConceptMapEquivalenceCode,
    )

    # comment (string)
    # dependsOn (ConceptMap.DependsOn)
    from spark_auto_mapper_fhir.backbone_elements.concept_map_depends_on import (
        ConceptMapDependsOn,
    )

    # product (ConceptMap.DependsOn)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapTarget(FhirBackboneElementBase):
    """
    ConceptMap.Target
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[code] = None,
        display: Optional[FhirString] = None,
        equivalence: ConceptMapEquivalenceCode,
        comment: Optional[FhirString] = None,
        dependsOn: Optional[FhirList[ConceptMapDependsOn]] = None,
        product: Optional[FhirList[ConceptMapDependsOn]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: Identity (code or path) or the element/item that the map refers to.
            :param display: The display for the code. The display is only provided to help editors when
        editing the concept map.
            :param equivalence: The equivalence between the source and target concepts (counting for the
        dependencies and products). The equivalence is read from target to source
        (e.g. the target is 'wider' than the source).
            :param comment: A description of status/issues in mapping that conveys additional information
        not represented in  the structured data.
            :param dependsOn: A set of additional dependencies for this mapping to hold. This mapping is
        only applicable if the specified element can be resolved, and it has the
        specified value.
            :param product: A set of additional outcomes from this mapping to other elements. To properly
        execute this mapping, the specified element must be mapped to some data
        element or source that is in context. The mapping may still be useful without
        a place for the additional data elements, but the equivalence cannot be relied
        on.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            display=display,
            equivalence=equivalence,
            comment=comment,
            dependsOn=dependsOn,
            product=product,
        )
