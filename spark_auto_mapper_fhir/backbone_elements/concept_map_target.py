from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # code (generic_type)
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # display (string)
    # equivalence (ConceptMapEquivalence)
    from spark_auto_mapper_fhir.value_sets.concept_map_equivalence import (
        ConceptMapEquivalenceCode,
    )

    # comment (string)
    # dependsOn (ConceptMap.DependsOn)
    from spark_auto_mapper_fhir.backbone_elements.concept_map_depends_on import (
        ConceptMapDependsOn,
    )

    # product (ConceptMap.DependsOn)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapTarget(FhirBackboneElementBase):
    """
    ConceptMap.Target
        A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[GenericTypeCode] = None,
        display: Optional[FhirString] = None,
        equivalence: ConceptMapEquivalenceCode,
        comment: Optional[FhirString] = None,
        dependsOn: Optional[FhirList[ConceptMapDependsOn]] = None,
        product: Optional[FhirList[ConceptMapDependsOn]] = None,
    ) -> None:
        """
            A statement of relationships from one set of concepts to one or more other
        concepts - either concepts in code systems, or data element/data element
        concepts, or classes in class models.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param code: Identity (code or path) or the element/item that the map refers to.
            :param display: The display for the code. The display is only provided to help editors when
        editing the concept map.
            :param equivalence: The equivalence between the source and target concepts (counting for the
        dependencies and products). The equivalence is read from target to source
        (e.g. the target is 'wider' than the source).
            :param comment: A description of status/issues in mapping that conveys additional information
        not represented in  the structured data.
            :param dependsOn: A set of additional dependencies for this mapping to hold. This mapping is
        only applicable if the specified element can be resolved, and it has the
        specified value.
            :param product: A set of additional outcomes from this mapping to other elements. To properly
        execute this mapping, the specified element must be mapped to some data
        element or source that is in context. The mapping may still be useful without
        a place for the additional data elements, but the equivalence cannot be relied
        on.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            code=code,
            display=display,
            equivalence=equivalence,
            comment=comment,
            dependsOn=dependsOn,
            product=product,
        )
