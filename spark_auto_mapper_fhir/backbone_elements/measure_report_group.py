from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.measure_report_population import (
        MeasureReportPopulation,
    )
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.backbone_elements.measure_report_stratifier import (
        MeasureReportStratifier,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureReportGroup(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[CodeableConcept] = None,
        population: Optional[FhirList[MeasureReportPopulation]] = None,
        measureScore: Optional[Quantity] = None,
        stratifier: Optional[FhirList[MeasureReportStratifier]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param code: The meaning of the population group as defined in the measure definition.
            :param population: The populations that make up the population group, one for each type of
        population appropriate for the measure.
            :param measureScore: The measure score for this population group, calculated as appropriate for the
        measure type and scoring method, and based on the contents of the populations
        defined in the group.
            :param stratifier: When a measure includes multiple stratifiers, there will be a stratifier group
        for each stratifier defined by the measure.
        """
        super().__init__(
            resourceType="MeasureReportGroup",
            id_=id_,
            meta=meta,
            extension=extension,
            code=code,
            population=population,
            measureScore=measureScore,
            stratifier=stratifier,
        )
