from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # modifier (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for modifier
    # Import for CodeableConcept for modifier
    from spark_auto_mapper_fhir.value_sets.nutrient_modifier_codes import (
        NutrientModifierCodesCode,
    )

    # End Import for CodeableConcept for modifier
    # amount (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class NutritionOrderNutrient(FhirBackboneElementBase):
    """
    NutritionOrder.Nutrient
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifier: Optional[CodeableConcept[NutrientModifierCodesCode]] = None,
        amount: Optional[Quantity] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param modifier: The nutrient that is being modified such as carbohydrate or sodium.
        :param amount: The quantity of the specified nutrient to include in diet.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifier=modifier,
            amount=amount,
        )
