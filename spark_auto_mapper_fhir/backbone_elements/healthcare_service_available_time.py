from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # daysOfWeek (DaysOfWeek)
    from spark_auto_mapper_fhir.value_sets.days_of_week import DaysOfWeekCode

    # allDay (boolean)
    # availableStartTime (time)
    from spark_auto_mapper_fhir.fhir_types.time import FhirTime

    # availableEndTime (time)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class HealthcareServiceAvailableTime(FhirBackboneElementBase):
    """
    HealthcareService.AvailableTime
        The details of a healthcare service available at a location.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        daysOfWeek: Optional[FhirList[DaysOfWeekCode]] = None,
        allDay: Optional[FhirBoolean] = None,
        availableStartTime: Optional[FhirTime] = None,
        availableEndTime: Optional[FhirTime] = None,
    ) -> None:
        """
            The details of a healthcare service available at a location.

            :param id_: id of resource
            :param extension: extensions
            :param daysOfWeek: Indicates which days of the week are available between the start and end
        Times.
            :param allDay: Is this always available? (hence times are irrelevant) e.g. 24 hour service.
            :param availableStartTime: The opening time of day. Note: If the AllDay flag is set, then this time is
        ignored.
            :param availableEndTime: The closing time of day. Note: If the AllDay flag is set, then this time is
        ignored.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            daysOfWeek=daysOfWeek,
            allDay=allDay,
            availableStartTime=availableStartTime,
            availableEndTime=availableEndTime,
        )
