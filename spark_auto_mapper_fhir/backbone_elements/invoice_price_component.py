from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # type_ (InvoicePriceComponentType)
    from spark_auto_mapper_fhir.complex_types.invoice_price_component_type import InvoicePriceComponentType
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # factor (decimal)
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    # amount (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InvoicePriceComponent(FhirBackboneElementBase):
    """
    Invoice.PriceComponent
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: InvoicePriceComponentType ,
        code: Optional[CodeableConcept ] = None,
        factor: Optional[decimal ] = None,
        amount: Optional[Money ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: This code identifies the type of the component.
        :param code: A code that identifies the component. Codes may be used to differentiate
    between kinds of taxes, surcharges, discounts etc.
        :param factor: The factor that has been applied on the base price for calculating this
    component.
        :param amount: The amount calculated for this component.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            code=code,
            factor=factor,
            amount=amount,
        )
