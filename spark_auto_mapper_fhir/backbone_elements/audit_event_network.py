from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # address (string)
    # type_ (AuditEventAgentNetworkType)
    from spark_auto_mapper_fhir.value_sets.audit_event_agent_network_type import (
        AuditEventAgentNetworkTypeCode,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AuditEventNetwork(FhirBackboneElementBase):
    """
    AuditEvent.Network
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        address: Optional[FhirString] = None,
        type_: Optional[AuditEventAgentNetworkTypeCode] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param address: An identifier for the network access point of the user device for the audit
        event.
            :param type_: An identifier for the type of network access point that originated the audit
        event.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            address=address,
            type_=type_,
        )
