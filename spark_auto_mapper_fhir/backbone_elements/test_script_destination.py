from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for profile
    from spark_auto_mapper_fhir.value_sets.testscriptprofiledestinationtype import (
        Testscriptprofiledestinationtype,
    )

    # End Import for CodeableConcept for profile


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptDestination(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        index: FhirInteger,
        profile: Coding[Testscriptprofiledestinationtype],
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param index: Abstract name given to a destination server in this test script.  The name is
        provided as a number starting at 1.
            :param profile: The type of destination profile the test system supports.
        """
        super().__init__(
            resourceType="TestScriptDestination",
            id_=id_,
            meta=meta,
            extension=extension,
            index=index,
            profile=profile,
        )
