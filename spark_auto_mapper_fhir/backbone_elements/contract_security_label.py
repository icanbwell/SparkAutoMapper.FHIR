from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # number (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt

    # classification (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for classification
    # Import for CodeableConcept for classification
    from spark_auto_mapper_fhir.value_sets.contract_resource_scope_codes import (
        ContractResourceScopeCodesCode,
    )

    # End Import for CodeableConcept for classification
    # category (Coding)
    # End Import for References for category
    # Import for CodeableConcept for category
    # End Import for CodeableConcept for category
    # control (Coding)
    # End Import for References for control
    # Import for CodeableConcept for control
    from spark_auto_mapper_fhir.value_sets.contract_resource_security_control_codes import (
        ContractResourceSecurityControlCodesCode,
    )

    # End Import for CodeableConcept for control


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractSecurityLabel(FhirBackboneElementBase):
    """
    Contract.SecurityLabel
        Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        number: Optional[FhirList[unsignedInt]] = None,
        classification: Coding[ContractResourceScopeCodesCode],
        category: Optional[FhirList[Coding[ContractResourceScopeCodesCode]]] = None,
        control: Optional[
            FhirList[Coding[ContractResourceSecurityControlCodesCode]]
        ] = None,
    ) -> None:
        """
            Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
        a policy or agreement.

            :param id_: id of resource
            :param extension: extensions
            :param number: Number used to link this term or term element to the applicable Security
        Label.
            :param classification: Security label privacy tag that species the level of confidentiality
        protection required for this term and/or term elements.
            :param category: Security label privacy tag that species the applicable privacy and security
        policies governing this term and/or term elements.
            :param control: Security label privacy tag that species the manner in which term and/or term
        elements are to be protected.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            number=number,
            classification=classification,
            category=category,
            control=control,
        )
