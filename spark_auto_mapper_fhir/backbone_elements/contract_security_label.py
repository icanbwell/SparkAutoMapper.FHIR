from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.coding import Coding


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractSecurityLabel(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        number: Optional[FhirList[unsignedInt]] = None,
        classification: Coding,
        category: Optional[FhirList[Coding]] = None,
        control: Optional[FhirList[Coding]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param number: Number used to link this term or term element to the applicable Security
    Label.
        :param classification: Security label privacy tag that species the level of confidentiality
    protection required for this term and/or term elements.
        :param category: Security label privacy tag that species the applicable privacy and security
    policies governing this term and/or term elements.
        :param control: Security label privacy tag that species the manner in which term and/or term
    elements are to be protected.
        """
        super().__init__(
            resourceType="ContractSecurityLabel",
            id_=id_,
            meta=meta,
            extension=extension,
            number=number,
            classification=classification,
            category=category,
            control=control,
        )
