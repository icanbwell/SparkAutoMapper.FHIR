from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # role (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for role
    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.security_role_type import (
        SecurityRoleTypeCode,
    )

    # End Import for CodeableConcept for role
    # reference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reference
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.group import Group
    from spark_auto_mapper_fhir.resources.care_team import CareTeam
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConsentActor(FhirBackboneElementBase):
    """
    Consent.Actor
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        role: CodeableConcept[SecurityRoleTypeCode],
        reference: Reference[
            Union[
                Device,
                Group,
                CareTeam,
                Organization,
                Patient,
                Practitioner,
                RelatedPerson,
                PractitionerRole,
            ]
        ],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param role: How the individual is involved in the resources content that is described in
        the exception.
            :param reference: The resource that identifies the actor. To identify actors by type, use group
        to identify a set of actors by some property they share (e.g. 'admitting
        officers').
        """
        super().__init__(
            id_=id_,
            extension=extension,
            role=role,
            reference=reference,
        )
