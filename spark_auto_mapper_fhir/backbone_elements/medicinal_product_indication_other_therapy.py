from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # therapyRelationshipType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for therapyRelationshipType
    # Import for CodeableConcept for therapyRelationshipType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for therapyRelationshipType
    # medicationCodeableConcept (CodeableConcept)
    # End Import for References for medicationCodeableConcept
    # Import for CodeableConcept for medicationCodeableConcept
    # End Import for CodeableConcept for medicationCodeableConcept
    # medicationReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for medicationReference
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.substance_specification import (
        SubstanceSpecification,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductIndicationOtherTherapy(FhirBackboneElementBase):
    """
    MedicinalProductIndication.OtherTherapy
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        therapyRelationshipType: CodeableConcept[GenericTypeCode],
        medicationCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        medicationReference: Optional[
            Reference[
                Union[MedicinalProduct, Medication, Substance, SubstanceSpecification]
            ]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param therapyRelationshipType: The type of relationship between the medicinal product indication or
        contraindication and another therapy.
            :param medicationCodeableConcept: None
            :param medicationReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            therapyRelationshipType=therapyRelationshipType,
            medicationCodeableConcept=medicationCodeableConcept,
            medicationReference=medicationReference,
        )
