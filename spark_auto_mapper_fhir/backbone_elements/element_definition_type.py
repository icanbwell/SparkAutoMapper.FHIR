from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # code (uri)
    # profile (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # targetProfile (canonical)
    # aggregation (AggregationMode)
    from spark_auto_mapper_fhir.value_sets.aggregation_mode import AggregationModeCode

    # versioning (ReferenceVersionRules)
    from spark_auto_mapper_fhir.value_sets.reference_version_rules import (
        ReferenceVersionRulesCode,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionType(FhirBackboneElementBase):
    """
    ElementDefinition.Type
        Captures constraints on each element within the resource, profile, or extension.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        code: FhirUri,
        profile: Optional[FhirList[FhirCanonical]] = None,
        targetProfile: Optional[FhirList[FhirCanonical]] = None,
        aggregation: Optional[FhirList[AggregationModeCode]] = None,
        versioning: Optional[ReferenceVersionRulesCode] = None,
    ) -> None:
        """
            Captures constraints on each element within the resource, profile, or
        extension.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param code: URL of Data type or Resource that is a(or the) type used for this element.
        References are URLs that are relative to
        http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
        http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed
        in logical models.
            :param profile: Identifies a profile structure or implementation Guide that applies to the
        datatype this element refers to. If any profiles are specified, then the
        content must conform to at least one of them. The URL can be a local reference
        - to a contained StructureDefinition, or a reference to another
        StructureDefinition or Implementation Guide by a canonical URL. When an
        implementation guide is specified, the type SHALL conform to at least one
        profile defined in the implementation guide.
            :param targetProfile: Used when the type is "Reference" or "canonical", and identifies a profile
        structure or implementation Guide that applies to the target of the reference
        this element refers to. If any profiles are specified, then the content must
        conform to at least one of them. The URL can be a local reference - to a
        contained StructureDefinition, or a reference to another StructureDefinition
        or Implementation Guide by a canonical URL. When an implementation guide is
        specified, the target resource SHALL conform to at least one profile defined
        in the implementation guide.
            :param aggregation: If the type is a reference to another resource, how the resource is or can be
        aggregated - is it a contained resource, or a reference, and if the context is
        a bundle, is it included in the bundle.
            :param versioning: Whether this reference needs to be version specific or version independent, or
        whether either can be used.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            code=code,
            profile=profile,
            targetProfile=targetProfile,
            aggregation=aggregation,
            versioning=versioning,
        )
