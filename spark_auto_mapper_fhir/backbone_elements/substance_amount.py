from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # amountType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for amountType
    # Import for CodeableConcept for amountType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for amountType
    # amountText (string)
    # referenceRange (SubstanceAmount.ReferenceRange)
    from spark_auto_mapper_fhir.backbone_elements.substance_amount_reference_range import (
        SubstanceAmountReferenceRange,
    )

    # amountQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # amountRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # amountString (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceAmount(FhirBackboneElementBase):
    """
    SubstanceAmount
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        amountType: Optional[CodeableConcept[GenericTypeCode]] = None,
        amountText: Optional[FhirString] = None,
        referenceRange: Optional[SubstanceAmountReferenceRange] = None,
        amountQuantity: Optional[Quantity] = None,
        amountRange: Optional[Range] = None,
        amountString: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param amountType: Most elements that require a quantitative value will also have a field called
        amount type. Amount type should always be specified because the actual value
        of the amount is often dependent on it. EXAMPLE: In capturing the actual
        relative amounts of substances or molecular fragments it is essential to
        indicate whether the amount refers to a mole ratio or weight ratio. For any
        given element an effort should be made to use same the amount type for all
        related definitional elements.
            :param amountText: A textual comment on a numeric value.
            :param referenceRange: Reference range of possible or expected values.
            :param amountQuantity: None
            :param amountRange: None
            :param amountString: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            amountType=amountType,
            amountText=amountText,
            referenceRange=referenceRange,
            amountQuantity=amountQuantity,
            amountRange=amountRange,
            amountString=amountString,
        )
