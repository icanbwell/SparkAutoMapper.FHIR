from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # amountQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # amountRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # amountString (string)
    # amountType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for amountType
    # Import for CodeableConcept for amountType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for amountType
    # amountText (string)
    # referenceRange (SubstanceAmount.ReferenceRange)
    from spark_auto_mapper_fhir.backbone_elements.substance_amount_reference_range import (
        SubstanceAmountReferenceRange,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceAmount(FhirBackboneElementBase):
    """
    SubstanceAmount
        Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
        If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        amountQuantity: Optional[Quantity] = None,
        amountRange: Optional[Range] = None,
        amountString: Optional[FhirString] = None,
        amountType: Optional[CodeableConcept[GenericTypeCode]] = None,
        amountText: Optional[FhirString] = None,
        referenceRange: Optional[SubstanceAmountReferenceRange] = None,
    ) -> None:
        """
            Chemical substances are a single substance type whose primary defining element
        is the molecular structure. Chemical substances shall be defined on the basis
        of their complete covalent molecular structure; the presence of a salt
        (counter-ion) and/or solvates (water, alcohols) is also captured. Purity,
        grade, physical form or particle size are not taken into account in the
        definition of a chemical substance or in the assignment of a Substance ID.
            If the element is present, it must have a value for at least one of the
        defined elements, an @id referenced from the Narrative, or extensions

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param amountQuantity: None
            :param amountRange: None
            :param amountString: None
            :param amountType: Most elements that require a quantitative value will also have a field called
        amount type. Amount type should always be specified because the actual value
        of the amount is often dependent on it. EXAMPLE: In capturing the actual
        relative amounts of substances or molecular fragments it is essential to
        indicate whether the amount refers to a mole ratio or weight ratio. For any
        given element an effort should be made to use same the amount type for all
        related definitional elements.
            :param amountText: A textual comment on a numeric value.
            :param referenceRange: Reference range of possible or expected values.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            amountQuantity=amountQuantity,
            amountRange=amountRange,
            amountString=amountString,
            amountType=amountType,
            amountText=amountText,
            referenceRange=referenceRange,
        )
