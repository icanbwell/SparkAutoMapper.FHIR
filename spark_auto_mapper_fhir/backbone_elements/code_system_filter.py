from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # description (string)
    # operator (FilterOperator)
    from spark_auto_mapper_fhir.value_sets.filter_operator import FilterOperatorCode

    # value (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CodeSystemFilter(FhirBackboneElementBase):
    """
    CodeSystem.Filter
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: code,
        description: Optional[FhirString] = None,
        operator: FhirList[FilterOperatorCode],
        value: FhirString,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: The code that identifies this filter when it is used as a filter in
        [[[ValueSet]]].compose.include.filter.
            :param description: A description of how or why the filter is used.
            :param operator: A list of operators that can be used with the filter.
            :param value: A description of what the value for the filter should be.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            description=description,
            operator=operator,
            value=value,
        )
