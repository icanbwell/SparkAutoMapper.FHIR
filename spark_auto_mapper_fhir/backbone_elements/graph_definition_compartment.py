from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # use (GraphCompartmentUse)
    from spark_auto_mapper_fhir.value_sets.graph_compartment_use import (
        GraphCompartmentUseCode,
    )

    # code (CompartmentType)
    from spark_auto_mapper_fhir.value_sets.compartment_type import CompartmentTypeCode

    # rule (GraphCompartmentRule)
    from spark_auto_mapper_fhir.value_sets.graph_compartment_rule import (
        GraphCompartmentRuleCode,
    )

    # expression (string)
    # description (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GraphDefinitionCompartment(FhirBackboneElementBase):
    """
    GraphDefinition.Compartment
        A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        use: GraphCompartmentUseCode,
        code: CompartmentTypeCode,
        rule: GraphCompartmentRuleCode,
        expression: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
    ) -> None:
        """
            A formal computable definition of a graph of resources - that is, a coherent
        set of resources that form a graph by following references. The Graph
        Definition resource defines a set and makes rules about the set.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param use: Defines how the compartment rule is used - whether it it is used to test
        whether resources are subject to the rule, or whether it is a rule that must
        be followed.
            :param code: Identifies the compartment.
            :param rule: identical | matching | different | no-rule | custom.
            :param expression: Custom rule, as a FHIRPath expression.
            :param description: Documentation for FHIRPath expression.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            use=use,
            code=code,
            rule=rule,
            expression=expression,
            description=description,
        )
