from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.graph_compartment_use import (
        GraphCompartmentUse,
    )
    from spark_auto_mapper_fhir.complex_types.compartment_type import CompartmentType
    from spark_auto_mapper_fhir.complex_types.graph_compartment_rule import (
        GraphCompartmentRule,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GraphDefinitionCompartment(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        use: GraphCompartmentUse,
        code: CompartmentType,
        rule: GraphCompartmentRule,
        expression: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param use: Defines how the compartment rule is used - whether it it is used to test
        whether resources are subject to the rule, or whether it is a rule that must
        be followed.
            :param code: Identifies the compartment.
            :param rule: identical | matching | different | no-rule | custom.
            :param expression: Custom rule, as a FHIRPath expression.
            :param description: Documentation for FHIRPath expression.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            use=use,
            code=code,
            rule=rule,
            expression=expression,
            description=description,
        )
