from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MessageDefinitionFocus(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: code,
        profile: Optional[canonical] = None,
        min: unsignedInt,
        max: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: The kind of resource that must be the focus for this message.
            :param profile: A profile that reflects constraints for the focal resource (and potentially
        for related resources).
            :param min: Identifies the minimum number of resources of this type that must be pointed
        to by a message in order for it to be valid against this MessageDefinition.
            :param max: Identifies the maximum number of resources of this type that must be pointed
        to by a message in order for it to be valid against this MessageDefinition.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            profile=profile,
            min=min,
            max=max,
        )
