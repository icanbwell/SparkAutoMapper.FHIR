from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # prefix (string)
    # title (string)
    # description (string)
    # textEquivalent (string)
    # priority (RequestPriority)
    from spark_auto_mapper_fhir.value_sets.request_priority import RequestPriorityCode

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code
    # reason (CodeableConcept)
    # End Import for References for reason
    # Import for CodeableConcept for reason
    # End Import for CodeableConcept for reason
    # documentation (RelatedArtifact)
    from spark_auto_mapper_fhir.complex_types.related_artifact import RelatedArtifact

    # goalId (id)
    # subjectCodeableConcept (CodeableConcept)
    # End Import for References for subjectCodeableConcept
    # Import for CodeableConcept for subjectCodeableConcept
    from spark_auto_mapper_fhir.value_sets.subject_type import SubjectTypeCode

    # End Import for CodeableConcept for subjectCodeableConcept
    # subjectReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for subjectReference
    from spark_auto_mapper_fhir.resources.group import Group

    # trigger (TriggerDefinition)
    from spark_auto_mapper_fhir.complex_types.trigger_definition import (
        TriggerDefinition,
    )

    # condition (PlanDefinition.Condition)
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_condition import (
        PlanDefinitionCondition,
    )

    # input (DataRequirement)
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement

    # output (DataRequirement)
    # relatedAction (PlanDefinition.RelatedAction)
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_related_action import (
        PlanDefinitionRelatedAction,
    )

    # timingDateTime (dateTime)
    # timingAge (Age)
    from spark_auto_mapper_fhir.complex_types.age import Age

    # timingPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # timingDuration (Duration)
    from spark_auto_mapper_fhir.complex_types.duration import Duration

    # timingRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # timingTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # participant (PlanDefinition.Participant)
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_participant import (
        PlanDefinitionParticipant,
    )

    # type_ (CodeableConcept)
    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.action_type import ActionTypeCode

    # End Import for CodeableConcept for type_
    # groupingBehavior (ActionGroupingBehavior)
    from spark_auto_mapper_fhir.value_sets.action_grouping_behavior import (
        ActionGroupingBehaviorCode,
    )

    # selectionBehavior (ActionSelectionBehavior)
    from spark_auto_mapper_fhir.value_sets.action_selection_behavior import (
        ActionSelectionBehaviorCode,
    )

    # requiredBehavior (ActionRequiredBehavior)
    from spark_auto_mapper_fhir.value_sets.action_required_behavior import (
        ActionRequiredBehaviorCode,
    )

    # precheckBehavior (ActionPrecheckBehavior)
    from spark_auto_mapper_fhir.value_sets.action_precheck_behavior import (
        ActionPrecheckBehaviorCode,
    )

    # cardinalityBehavior (ActionCardinalityBehavior)
    from spark_auto_mapper_fhir.value_sets.action_cardinality_behavior import (
        ActionCardinalityBehaviorCode,
    )

    # definitionCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # definitionUri (uri)
    # transform (canonical)
    # dynamicValue (PlanDefinition.DynamicValue)
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_dynamic_value import (
        PlanDefinitionDynamicValue,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PlanDefinitionAction(FhirBackboneElementBase):
    """
    PlanDefinition.Action
        This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        prefix: Optional[FhirString] = None,
        title: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        textEquivalent: Optional[FhirString] = None,
        priority: Optional[RequestPriorityCode] = None,
        code: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        reason: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        documentation: Optional[FhirList[RelatedArtifact]] = None,
        goalId: Optional[FhirList[FhirId]] = None,
        subjectCodeableConcept: Optional[CodeableConcept[SubjectTypeCode]] = None,
        subjectReference: Optional[Reference[Group]] = None,
        trigger: Optional[FhirList[TriggerDefinition]] = None,
        condition: Optional[FhirList[PlanDefinitionCondition]] = None,
        input: Optional[FhirList[DataRequirement]] = None,
        output: Optional[FhirList[DataRequirement]] = None,
        relatedAction: Optional[FhirList[PlanDefinitionRelatedAction]] = None,
        timingDateTime: Optional[FhirDateTime] = None,
        timingAge: Optional[Age] = None,
        timingPeriod: Optional[Period] = None,
        timingDuration: Optional[Duration] = None,
        timingRange: Optional[Range] = None,
        timingTiming: Optional[Timing] = None,
        participant: Optional[FhirList[PlanDefinitionParticipant]] = None,
        type_: Optional[CodeableConcept[ActionTypeCode]] = None,
        groupingBehavior: Optional[ActionGroupingBehaviorCode] = None,
        selectionBehavior: Optional[ActionSelectionBehaviorCode] = None,
        requiredBehavior: Optional[ActionRequiredBehaviorCode] = None,
        precheckBehavior: Optional[ActionPrecheckBehaviorCode] = None,
        cardinalityBehavior: Optional[ActionCardinalityBehaviorCode] = None,
        definitionCanonical: Optional[FhirCanonical] = None,
        definitionUri: Optional[FhirUri] = None,
        transform: Optional[FhirCanonical] = None,
        dynamicValue: Optional[FhirList[PlanDefinitionDynamicValue]] = None,
        action: Optional[FhirList[PlanDefinitionAction]] = None,
    ) -> None:
        """
            This resource allows for the definition of various types of plans as a
        sharable, consumable, and executable artifact. The resource is general enough
        to support the description of a broad range of clinical artifacts such as
        clinical decision support rules, order sets and protocols.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param prefix: A user-visible prefix for the action.
            :param title: The title of the action displayed to a user.
            :param description: A brief description of the action used to provide a summary to display to the
        user.
            :param textEquivalent: A text equivalent of the action to be performed. This provides a human-
        interpretable description of the action when the definition is consumed by a
        system that might not be capable of interpreting it dynamically.
            :param priority: Indicates how quickly the action should be addressed with respect to other
        actions.
            :param code: A code that provides meaning for the action or action group. For example, a
        section may have a LOINC code for the section of a documentation template.
            :param reason: A description of why this action is necessary or appropriate.
            :param documentation: Didactic or other informational resources associated with the action that can
        be provided to the CDS recipient. Information resources can include inline
        text commentary and links to web resources.
            :param goalId: Identifies goals that this action supports. The reference must be to a goal
        element defined within this plan definition.
            :param subjectCodeableConcept: None
            :param subjectReference: None
            :param trigger: A description of when the action should be triggered.
            :param condition: An expression that describes applicability criteria or start/stop conditions
        for the action.
            :param input: Defines input data requirements for the action.
            :param output: Defines the outputs of the action, if any.
            :param relatedAction: A relationship to another action such as "before" or "30-60 minutes after
        start of".
            :param timingDateTime: None
            :param timingAge: None
            :param timingPeriod: None
            :param timingDuration: None
            :param timingRange: None
            :param timingTiming: None
            :param participant: Indicates who should participate in performing the action described.
            :param type_: The type of action to perform (create, update, remove).
            :param groupingBehavior: Defines the grouping behavior for the action and its children.
            :param selectionBehavior: Defines the selection behavior for the action and its children.
            :param requiredBehavior: Defines the required behavior for the action.
            :param precheckBehavior: Defines whether the action should usually be preselected.
            :param cardinalityBehavior: Defines whether the action can be selected multiple times.
            :param definitionCanonical: None
            :param definitionUri: None
            :param transform: A reference to a StructureMap resource that defines a transform that can be
        executed to produce the intent resource using the ActivityDefinition instance
        as the input.
            :param dynamicValue: Customizations that should be applied to the statically defined resource. For
        example, if the dosage of a medication must be computed based on the patient's
        weight, a customization would be used to specify an expression that calculated
        the weight, and the path on the resource that would contain the result.
            :param action: Sub actions that are contained within the action. The behavior of this action
        determines the functionality of the sub-actions. For example, a selection
        behavior of at-most-one indicates that of the sub-actions, at most one may be
        chosen as part of realizing the action definition.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            prefix=prefix,
            title=title,
            description=description,
            textEquivalent=textEquivalent,
            priority=priority,
            code=code,
            reason=reason,
            documentation=documentation,
            goalId=goalId,
            subjectCodeableConcept=subjectCodeableConcept,
            subjectReference=subjectReference,
            trigger=trigger,
            condition=condition,
            input=input,
            output=output,
            relatedAction=relatedAction,
            timingDateTime=timingDateTime,
            timingAge=timingAge,
            timingPeriod=timingPeriod,
            timingDuration=timingDuration,
            timingRange=timingRange,
            timingTiming=timingTiming,
            participant=participant,
            type_=type_,
            groupingBehavior=groupingBehavior,
            selectionBehavior=selectionBehavior,
            requiredBehavior=requiredBehavior,
            precheckBehavior=precheckBehavior,
            cardinalityBehavior=cardinalityBehavior,
            definitionCanonical=definitionCanonical,
            definitionUri=definitionUri,
            transform=transform,
            dynamicValue=dynamicValue,
            action=action,
        )
