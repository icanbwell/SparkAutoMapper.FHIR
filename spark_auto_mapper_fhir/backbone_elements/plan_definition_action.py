from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.request_priority import RequestPriority
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.related_artifact import RelatedArtifact
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.trigger_definition import (
        TriggerDefinition,
    )
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_condition import (
        PlanDefinitionCondition,
    )
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement
    from spark_auto_mapper_fhir.complex_types.data_requirement import DataRequirement
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_related_action import (
        PlanDefinitionRelatedAction,
    )
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_participant import (
        PlanDefinitionParticipant,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.actiontype import Actiontype

    # End Import for CodeableConcept for type
    from spark_auto_mapper_fhir.complex_types.action_grouping_behavior import (
        ActionGroupingBehavior,
    )
    from spark_auto_mapper_fhir.complex_types.action_selection_behavior import (
        ActionSelectionBehavior,
    )
    from spark_auto_mapper_fhir.complex_types.action_required_behavior import (
        ActionRequiredBehavior,
    )
    from spark_auto_mapper_fhir.complex_types.action_precheck_behavior import (
        ActionPrecheckBehavior,
    )
    from spark_auto_mapper_fhir.complex_types.action_cardinality_behavior import (
        ActionCardinalityBehavior,
    )
    from spark_auto_mapper_fhir.complex_types.canonical import canonical
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_dynamic_value import (
        PlanDefinitionDynamicValue,
    )
    from spark_auto_mapper_fhir.backbone_elements.plan_definition_action import (
        PlanDefinitionAction,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PlanDefinitionAction(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        prefix: Optional[FhirString] = None,
        title: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        textEquivalent: Optional[FhirString] = None,
        priority: Optional[RequestPriority] = None,
        code: Optional[FhirList[CodeableConcept]] = None,
        reason: Optional[FhirList[CodeableConcept]] = None,
        documentation: Optional[FhirList[RelatedArtifact]] = None,
        goalId: Optional[FhirList[id]] = None,
        trigger: Optional[FhirList[TriggerDefinition]] = None,
        condition: Optional[FhirList[PlanDefinitionCondition]] = None,
        input: Optional[FhirList[DataRequirement]] = None,
        output: Optional[FhirList[DataRequirement]] = None,
        relatedAction: Optional[FhirList[PlanDefinitionRelatedAction]] = None,
        participant: Optional[FhirList[PlanDefinitionParticipant]] = None,
        type: Optional[CodeableConcept[Actiontype]] = None,
        groupingBehavior: Optional[ActionGroupingBehavior] = None,
        selectionBehavior: Optional[ActionSelectionBehavior] = None,
        requiredBehavior: Optional[ActionRequiredBehavior] = None,
        precheckBehavior: Optional[ActionPrecheckBehavior] = None,
        cardinalityBehavior: Optional[ActionCardinalityBehavior] = None,
        transform: Optional[canonical] = None,
        dynamicValue: Optional[FhirList[PlanDefinitionDynamicValue]] = None,
        action: Optional[FhirList[PlanDefinitionAction]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param prefix: A user-visible prefix for the action.
            :param title: The title of the action displayed to a user.
            :param description: A brief description of the action used to provide a summary to display to the
        user.
            :param textEquivalent: A text equivalent of the action to be performed. This provides a human-
        interpretable description of the action when the definition is consumed by a
        system that might not be capable of interpreting it dynamically.
            :param priority: Indicates how quickly the action should be addressed with respect to other
        actions.
            :param code: A code that provides meaning for the action or action group. For example, a
        section may have a LOINC code for the section of a documentation template.
            :param reason: A description of why this action is necessary or appropriate.
            :param documentation: Didactic or other informational resources associated with the action that can
        be provided to the CDS recipient. Information resources can include inline
        text commentary and links to web resources.
            :param goalId: Identifies goals that this action supports. The reference must be to a goal
        element defined within this plan definition.
            :param trigger: A description of when the action should be triggered.
            :param condition: An expression that describes applicability criteria or start/stop conditions
        for the action.
            :param input: Defines input data requirements for the action.
            :param output: Defines the outputs of the action, if any.
            :param relatedAction: A relationship to another action such as "before" or "30-60 minutes after
        start of".
            :param participant: Indicates who should participate in performing the action described.
            :param type: The type of action to perform (create, update, remove).
            :param groupingBehavior: Defines the grouping behavior for the action and its children.
            :param selectionBehavior: Defines the selection behavior for the action and its children.
            :param requiredBehavior: Defines the required behavior for the action.
            :param precheckBehavior: Defines whether the action should usually be preselected.
            :param cardinalityBehavior: Defines whether the action can be selected multiple times.
            :param transform: A reference to a StructureMap resource that defines a transform that can be
        executed to produce the intent resource using the ActivityDefinition instance
        as the input.
            :param dynamicValue: Customizations that should be applied to the statically defined resource. For
        example, if the dosage of a medication must be computed based on the patient's
        weight, a customization would be used to specify an expression that calculated
        the weight, and the path on the resource that would contain the result.
            :param action: Sub actions that are contained within the action. The behavior of this action
        determines the functionality of the sub-actions. For example, a selection
        behavior of at-most-one indicates that of the sub-actions, at most one may be
        chosen as part of realizing the action definition.
        """
        super().__init__(
            resourceType="PlanDefinitionAction",
            id_=id_,
            meta=meta,
            extension=extension,
            prefix=prefix,
            title=title,
            description=description,
            textEquivalent=textEquivalent,
            priority=priority,
            code=code,
            reason=reason,
            documentation=documentation,
            goalId=goalId,
            trigger=trigger,
            condition=condition,
            input=input,
            output=output,
            relatedAction=relatedAction,
            participant=participant,
            type=type,
            groupingBehavior=groupingBehavior,
            selectionBehavior=selectionBehavior,
            requiredBehavior=requiredBehavior,
            precheckBehavior=precheckBehavior,
            cardinalityBehavior=cardinalityBehavior,
            transform=transform,
            dynamicValue=dynamicValue,
            action=action,
        )
