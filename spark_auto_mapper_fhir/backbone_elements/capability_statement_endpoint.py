from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # protocol (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for protocol
    # Import for CodeableConcept for protocol
    from spark_auto_mapper_fhir.value_sets.message_transport import MessageTransportCode

    # End Import for CodeableConcept for protocol
    # address (url)
    from spark_auto_mapper_fhir.fhir_types.url import FhirUrl


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementEndpoint(FhirBackboneElementBase):
    """
    CapabilityStatement.Endpoint
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        protocol: Coding[MessageTransportCode],
        address: FhirUrl,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.

            :param id_: id of resource
            :param extension: extensions
            :param protocol: A list of the messaging transport protocol(s) identifiers, supported by this
        endpoint.
            :param address: The network address of the endpoint. For solutions that do not use network
        addresses for routing, it can be just an identifier.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            protocol=protocol,
            address=address,
        )
