from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.immunization_recommendation_date_criterion_codes import (
        ImmunizationRecommendationDateCriterionCodes,
    )

    # End Import for CodeableConcept for code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationRecommendationDateCriterion(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept[ImmunizationRecommendationDateCriterionCodes],
        value: FhirDateTime,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: Date classification of recommendation.  For example, earliest date to give,
        latest date to give, etc.
            :param value: The date whose meaning is specified by dateCriterion.code.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            value=value,
        )
