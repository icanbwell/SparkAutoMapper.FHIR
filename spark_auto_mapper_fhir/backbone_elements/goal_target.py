from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # measure (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for measure
    from spark_auto_mapper_fhir.value_sets.loinc_codes import LOINCCodesCode

    # End Import for CodeableConcept for measure


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GoalTarget(FhirBackboneElementBase):
    """
    Goal.Target
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        measure: Optional[CodeableConcept[LOINCCodesCode]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param measure: The parameter whose value is being tracked, e.g. body weight, blood pressure,
        or hemoglobin A1c level.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            measure=measure,
        )
