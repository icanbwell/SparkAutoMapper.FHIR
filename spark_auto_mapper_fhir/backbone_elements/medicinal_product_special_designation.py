from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # intendedUse (CodeableConcept)
    # End Import for References for intendedUse
    # Import for CodeableConcept for intendedUse
    # End Import for CodeableConcept for intendedUse
    # status (CodeableConcept)
    # End Import for References for status
    # Import for CodeableConcept for status
    # End Import for CodeableConcept for status
    # date (dateTime)
    # species (CodeableConcept)
    # End Import for References for species
    # Import for CodeableConcept for species
    # End Import for CodeableConcept for species
    # indicationCodeableConcept (CodeableConcept)
    # End Import for References for indicationCodeableConcept
    # Import for CodeableConcept for indicationCodeableConcept
    # End Import for CodeableConcept for indicationCodeableConcept
    # indicationReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for indicationReference
    from spark_auto_mapper_fhir.resources.medicinal_product_indication import (
        MedicinalProductIndication,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductSpecialDesignation(FhirBackboneElementBase):
    """
    MedicinalProduct.SpecialDesignation
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        intendedUse: Optional[CodeableConcept[GenericTypeCode]] = None,
        status: Optional[CodeableConcept[GenericTypeCode]] = None,
        date: Optional[FhirDateTime] = None,
        species: Optional[CodeableConcept[GenericTypeCode]] = None,
        indicationCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        indicationReference: Optional[
            Reference[Union[MedicinalProductIndication]]
        ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param identifier: Identifier for the designation, or procedure number.
        :param type_: The type of special designation, e.g. orphan drug, minor use.
        :param intendedUse: The intended use of the product, e.g. prevention, treatment.
        :param status: For example granted, pending, expired or withdrawn.
        :param date: Date when the designation was granted.
        :param species: Animal species for which this applies.
        :param indicationCodeableConcept: None
        :param indicationReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            type_=type_,
            intendedUse=intendedUse,
            status=status,
            date=date,
            species=species,
            indicationCodeableConcept=indicationCodeableConcept,
            indicationReference=indicationReference,
        )
