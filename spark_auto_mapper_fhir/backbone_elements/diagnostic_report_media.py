from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # comment (string)
    # link (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for link
    from spark_auto_mapper_fhir.resources.media import Media


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DiagnosticReportMedia(FhirBackboneElementBase):
    """
    DiagnosticReport.Media
        The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        comment: Optional[FhirString] = None,
        link: Reference[Union[Media]],
    ) -> None:
        """
            The findings and interpretation of diagnostic  tests performed on patients,
        groups of patients, devices, and locations, and/or specimens derived from
        these. The report includes clinical context such as requesting and provider
        information, and some mix of atomic results, images, textual and coded
        interpretations, and formatted representation of diagnostic reports.

            :param id_: id of resource
            :param extension: extensions
            :param comment: A comment about the image. Typically, this is used to provide an explanation
        for why the image is included, or to draw the viewer's attention to important
        features.
            :param link: Reference to the image source.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            comment=comment,
            link=link,
        )
