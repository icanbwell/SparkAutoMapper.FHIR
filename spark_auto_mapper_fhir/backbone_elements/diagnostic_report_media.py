from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for link
    from spark_auto_mapper_fhir.resources.media import Media


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DiagnosticReportMedia(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        comment: Optional[string] = None,
        link: Reference[Union[Media]],
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param comment: A comment about the image. Typically, this is used to provide an explanation
        for why the image is included, or to draw the viewer's attention to important
        features.
            :param link: Reference to the image source.
        """
        super().__init__(
            resourceType="DiagnosticReportMedia",
            id_=id_,
            meta=meta,
            extension=extension,
            comment=comment,
            link=link,
        )
