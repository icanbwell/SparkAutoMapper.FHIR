from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # itemReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for itemReference
    from spark_auto_mapper_fhir.resources.medicinal_product import MedicinalProduct
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance
    from spark_auto_mapper_fhir.resources.observation_definition import (
        ObservationDefinition,
    )

    # itemCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for itemCodeableConcept
    # Import for CodeableConcept for itemCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for itemCodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductInteractionInteractant(FhirBackboneElementBase):
    """
    MedicinalProductInteraction.Interactant
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        itemReference: Optional[
            Reference[
                Union[MedicinalProduct, Medication, Substance, ObservationDefinition]
            ]
        ] = None,
        itemCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param itemReference: None
        :param itemCodeableConcept: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            itemReference=itemReference,
            itemCodeableConcept=itemCodeableConcept,
        )
