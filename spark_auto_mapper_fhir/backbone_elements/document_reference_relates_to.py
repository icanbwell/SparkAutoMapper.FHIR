from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (DocumentRelationshipType)
    from spark_auto_mapper_fhir.value_sets.document_relationship_type import (
        DocumentRelationshipTypeCode,
    )

    # target (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for target
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DocumentReferenceRelatesTo(FhirBackboneElementBase):
    """
    DocumentReference.RelatesTo
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: DocumentRelationshipTypeCode,
        target: Reference[Union[DocumentReference]],
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param code: The type of relationship that this document has with anther document.
        :param target: The target document of this relationship.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            target=target,
        )
