from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # function (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for function
    # Import for CodeableConcept for function
    from spark_auto_mapper_fhir.value_sets.medication_administration_performer_function_codes import (
        MedicationAdministrationPerformerFunctionCodesCode,
    )

    # End Import for CodeableConcept for function
    # actor (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for actor
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.device import Device


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationAdministrationPerformer(FhirBackboneElementBase):
    """
    MedicationAdministration.Performer
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        function: Optional[
            CodeableConcept[MedicationAdministrationPerformerFunctionCodesCode]
        ] = None,
        actor: Reference[
            Union[Practitioner, PractitionerRole, Patient, RelatedPerson, Device]
        ],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param function: Distinguishes the type of involvement of the performer in the medication
        administration.
            :param actor: Indicates who or what performed the medication administration.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            function=function,
            actor=actor,
        )
