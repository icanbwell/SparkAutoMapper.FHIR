from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for what
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.auditevententityrole import (
        Auditevententityrole,
    )

    # End Import for CodeableConcept for role
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.coding import Coding
    from spark_auto_mapper_fhir.complex_types.base64_binary import base64Binary
    from spark_auto_mapper_fhir.backbone_elements.audit_event_detail import (
        AuditEventDetail,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AuditEventEntity(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        what: Optional[Reference[Union[Resource]]] = None,
        type: Optional[Coding] = None,
        role: Optional[Coding[Auditevententityrole]] = None,
        lifecycle: Optional[Coding] = None,
        securityLabel: Optional[FhirList[Coding]] = None,
        name: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        query: Optional[base64Binary] = None,
        detail: Optional[FhirList[AuditEventDetail]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param what: Identifies a specific instance of the entity. The reference should be version
        specific.
            :param type: The type of the object that was involved in this audit event.
            :param role: Code representing the role the entity played in the event being audited.
            :param lifecycle: Identifier for the data life-cycle stage for the entity.
            :param securityLabel: Security labels for the identified entity.
            :param name: A name of the entity in the audit event.
            :param description: Text that describes the entity in more detail.
            :param query: The query parameters for a query-type entities.
            :param detail: Tagged value pairs for conveying additional information about the entity.
        """
        super().__init__(
            resourceType="AuditEventEntity",
            id_=id_,
            meta=meta,
            extension=extension,
            what=what,
            type=type,
            role=role,
            lifecycle=lifecycle,
            securityLabel=securityLabel,
            name=name,
            description=description,
            query=query,
            detail=detail,
        )
