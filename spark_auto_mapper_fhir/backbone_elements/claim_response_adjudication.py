from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.adjudicationvaluecodes import (
        Adjudicationvaluecodes,
    )

    # End Import for CodeableConcept for category
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.value_sets.adjudicationreasoncodes import (
        Adjudicationreasoncodes,
    )

    # End Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.decimal import decimal


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimResponseAdjudication(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: CodeableConcept[Adjudicationvaluecodes],
        reason: Optional[CodeableConcept[Adjudicationreasoncodes]] = None,
        amount: Optional[Money] = None,
        value: Optional[decimal] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param category: A code to indicate the information type of this adjudication record.
        Information types may include the value submitted, maximum values or
        percentages allowed or payable under the plan, amounts that: the patient is
        responsible for in aggregate or pertaining to this item; amounts paid by other
        coverages; and, the benefit payable for this item.
            :param reason: A code supporting the understanding of the adjudication result and explaining
        variance from expected amount.
            :param amount: Monetary amount associated with the category.
            :param value: A non-monetary value associated with the category. Mutually exclusive to the
        amount element above.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            reason=reason,
            amount=amount,
            value=value,
        )
