from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.backbone_elements.code_system_designation import CodeSystemDesignation
    from spark_auto_mapper_fhir.backbone_elements.code_system_property1 import CodeSystemProperty1
    from spark_auto_mapper_fhir.backbone_elements.code_system_concept import CodeSystemConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CodeSystemConcept(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: code ,
        display: Optional[FhirString ] = None,
        definition: Optional[FhirString ] = None,
        designation: Optional[FhirList[CodeSystemDesignation ]] = None,
        property: Optional[FhirList[CodeSystemProperty1 ]] = None,
        concept: Optional[FhirList[CodeSystemConcept ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param code: A code - a text symbol - that uniquely identifies the concept within the code
    system.
        :param display: A human readable string that is the recommended default way to present this
    concept to a user.
        :param definition: The formal definition of the concept. The code system resource does not make
    formal definitions required, because of the prevalence of legacy systems.
    However, they are highly recommended, as without them there is no formal
    meaning associated with the concept.
        :param designation: Additional representations for the concept - other languages, aliases,
    specialized purposes, used for particular purposes, etc.
        :param property: A property value for this concept.
        :param concept: Defines children of a concept to produce a hierarchy of concepts. The nature
    of the relationships is variable (is-a/contains/categorizes) - see
    hierarchyMeaning.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            display=display,
            definition=definition,
            designation=designation,
            property=property,
            concept=concept,
        )
