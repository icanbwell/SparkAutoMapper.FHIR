from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for condition
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.procedure import Procedure
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EncounterDiagnosis(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        condition: Reference[Union[Condition, Procedure]],
        use: Optional[CodeableConcept] = None,
        rank: Optional[positiveInt] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param condition: Reason the encounter takes place, as specified using information from another
        resource. For admissions, this is the admission diagnosis. The indication will
        typically be a Condition (with other resources referenced in the
        evidence.detail), or a Procedure.
            :param use: Role that this diagnosis has within the encounter (e.g. admission, billing,
        discharge â€¦).
            :param rank: Ranking of the diagnosis (for each role type).
        """
        super().__init__(
            resourceType="EncounterDiagnosis",
            id_=id_,
            meta=meta,
            extension=extension,
            condition=condition,
            use=use,
            rank=rank,
        )
