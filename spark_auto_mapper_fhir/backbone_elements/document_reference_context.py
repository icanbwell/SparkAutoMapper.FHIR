from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # encounter (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for encounter
    from spark_auto_mapper_fhir.resources.encounter import Encounter
    from spark_auto_mapper_fhir.resources.episode_of_care import EpisodeOfCare

    # event (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for event
    # Import for CodeableConcept for event
    from spark_auto_mapper_fhir.value_sets.act_code import ActCode

    # End Import for CodeableConcept for event
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # facilityType (CodeableConcept)
    # End Import for References for facilityType
    # Import for CodeableConcept for facilityType
    from spark_auto_mapper_fhir.value_sets.facility_type_code_value_set import (
        FacilityTypeCodeValueSetCode,
    )

    # End Import for CodeableConcept for facilityType
    # practiceSetting (CodeableConcept)
    # End Import for References for practiceSetting
    # Import for CodeableConcept for practiceSetting
    from spark_auto_mapper_fhir.value_sets.practice_setting_code_value_set import (
        PracticeSettingCodeValueSetCode,
    )

    # End Import for CodeableConcept for practiceSetting
    # sourcePatientInfo (Reference)
    # Imports for References for sourcePatientInfo
    from spark_auto_mapper_fhir.resources.patient import Patient

    # related (Reference)
    # Imports for References for related


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DocumentReferenceContext(FhirBackboneElementBase):
    """
    DocumentReference.Context
        A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        encounter: Optional[
            FhirList[Reference[Union[Encounter, EpisodeOfCare]]]
        ] = None,
        event: Optional[FhirList[CodeableConcept[ActCode]]] = None,
        period: Optional[Period] = None,
        facilityType: Optional[CodeableConcept[FacilityTypeCodeValueSetCode]] = None,
        practiceSetting: Optional[
            CodeableConcept[PracticeSettingCodeValueSetCode]
        ] = None,
        sourcePatientInfo: Optional[Reference[Patient]] = None,
        related: Optional[FhirList[Reference[Resource]]] = None,
    ) -> None:
        """
            A reference to a document of any kind for any purpose. Provides metadata about
        the document so that the document can be discovered and managed. The scope of
        a document is any seralized object with a mime-type, so includes formal
        patient centric documents (CDA), cliical notes, scanned paper, and non-patient
        specific documents like policy text.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param encounter: Describes the clinical encounter or type of care that the document content is
        associated with.
            :param event: This list of codes represents the main clinical acts, such as a colonoscopy or
        an appendectomy, being documented. In some cases, the event is inherent in the
        type Code, such as a "History and Physical Report" in which the procedure
        being documented is necessarily a "History and Physical" act.
            :param period: The time period over which the service that is described by the document was
        provided.
            :param facilityType: The kind of facility where the patient was seen.
            :param practiceSetting: This property may convey specifics about the practice setting where the
        content was created, often reflecting the clinical specialty.
            :param sourcePatientInfo: The Patient Information as known when the document was published. May be a
        reference to a version specific, or contained.
            :param related: Related identifiers or resources associated with the DocumentReference.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            encounter=encounter,
            event=event,
            period=period,
            facilityType=facilityType,
            practiceSetting=practiceSetting,
            sourcePatientInfo=sourcePatientInfo,
            related=related,
        )
