from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RelatedPersonCommunication(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        language: CodeableConcept,
        preferred: Optional[boolean] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param language: The ISO-639-1 alpha 2 code in lower case for the language, optionally followed
        by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g.
        "en" for English, or "en-US" for American English versus "en-EN" for England
        English.
            :param preferred: Indicates whether or not the patient prefers this language (over other
        languages he masters up a certain level).
        """
        super().__init__(
            resourceType="RelatedPersonCommunication",
            id_=id_,
            meta=meta,
            extension=extension,
            language=language,
            preferred=preferred,
        )
