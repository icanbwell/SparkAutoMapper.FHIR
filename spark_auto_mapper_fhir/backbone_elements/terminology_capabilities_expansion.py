from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # hierarchical (boolean)
    # paging (boolean)
    # incomplete (boolean)
    # parameter (TerminologyCapabilities.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_parameter import (
        TerminologyCapabilitiesParameter,
    )

    # textFilter (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesExpansion(FhirBackboneElementBase):
    """
    TerminologyCapabilities.Expansion
        A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        hierarchical: Optional[FhirBoolean] = None,
        paging: Optional[FhirBoolean] = None,
        incomplete: Optional[FhirBoolean] = None,
        parameter: Optional[FhirList[TerminologyCapabilitiesParameter]] = None,
        textFilter: Optional[FhirMarkdown] = None,
    ) -> None:
        """
            A TerminologyCapabilities resource documents a set of capabilities (behaviors)
        of a FHIR Terminology Server that may be used as a statement of actual server
        functionality or a statement of required or desired server implementation.

            :param id_: id of resource
            :param extension: extensions
            :param hierarchical: Whether the server can return nested value sets.
            :param paging: Whether the server supports paging on expansion.
            :param incomplete: Allow request for incomplete expansions?
            :param parameter: Supported expansion parameter.
            :param textFilter: Documentation about text searching works.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            hierarchical=hierarchical,
            paging=paging,
            incomplete=incomplete,
            parameter=parameter,
            textFilter=textFilter,
        )
