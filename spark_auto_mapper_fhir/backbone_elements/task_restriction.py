from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # repetitions (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # recipient (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for recipient
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.group import Group
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TaskRestriction(FhirBackboneElementBase):
    """
    Task.Restriction
        A task to be performed.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        repetitions: Optional[FhirPositiveInt] = None,
        period: Optional[Period] = None,
        recipient: Optional[
            FhirList[
                Reference[
                    Union[
                        Patient,
                        Practitioner,
                        PractitionerRole,
                        RelatedPerson,
                        Group,
                        Organization,
                    ]
                ]
            ]
        ] = None,
    ) -> None:
        """
            A task to be performed.

            :param id_: id of resource
            :param extension: extensions
            :param repetitions: Indicates the number of times the requested action should occur.
            :param period: Over what time-period is fulfillment sought.
            :param recipient: For requests that are targeted to more than on potential recipient/target, for
        whom is fulfillment sought?
        """
        super().__init__(
            id_=id_,
            extension=extension,
            repetitions=repetitions,
            period=period,
            recipient=recipient,
        )
