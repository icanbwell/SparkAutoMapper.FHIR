from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # context (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # contextType (StructureMapContextType)
    from spark_auto_mapper_fhir.value_sets.structure_map_context_type import (
        StructureMapContextTypeCode,
    )

    # element (string)
    # variable (id)
    # listMode (StructureMapTargetListMode)
    from spark_auto_mapper_fhir.value_sets.structure_map_target_list_mode import (
        StructureMapTargetListModeCode,
    )

    # listRuleId (id)
    # transform (StructureMapTransform)
    from spark_auto_mapper_fhir.value_sets.structure_map_transform import (
        StructureMapTransformCode,
    )

    # parameter (StructureMap.Parameter)
    from spark_auto_mapper_fhir.backbone_elements.structure_map_parameter import (
        StructureMapParameter,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapTarget(FhirBackboneElementBase):
    """
    StructureMap.Target
        A Map of relationships between 2 structures that can be used to transform data.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        context: Optional[id] = None,
        contextType: Optional[StructureMapContextTypeCode] = None,
        element: Optional[FhirString] = None,
        variable: Optional[id] = None,
        listMode: Optional[FhirList[StructureMapTargetListModeCode]] = None,
        listRuleId: Optional[id] = None,
        transform: Optional[StructureMapTransformCode] = None,
        parameter: Optional[FhirList[StructureMapParameter]] = None,
    ) -> None:
        """
            A Map of relationships between 2 structures that can be used to transform
        data.

            :param id_: id of resource
            :param extension: extensions
            :param context: Type or variable this rule applies to.
            :param contextType: How to interpret the context.
            :param element: Field to create in the context.
            :param variable: Named context for field, if desired, and a field is specified.
            :param listMode: If field is a list, how to manage the list.
            :param listRuleId: Internal rule reference for shared list items.
            :param transform: How the data is copied / created.
            :param parameter: Parameters to the transform.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            context=context,
            contextType=contextType,
            element=element,
            variable=variable,
            listMode=listMode,
            listRuleId=listRuleId,
            transform=transform,
            parameter=parameter,
        )
