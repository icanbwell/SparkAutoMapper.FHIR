from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identity (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # language (Mime Types)
    from spark_auto_mapper_fhir.value_sets.mime_types import MimeTypesCode

    # map (string)
    # comment (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionMapping(FhirBackboneElementBase):
    """
    ElementDefinition.Mapping
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identity: id,
        language: Optional[MimeTypesCode] = None,
        map: FhirString,
        comment: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param identity: An internal reference to the definition of a mapping.
        :param language: Identifies the computable language in which mapping.map is expressed.
        :param map: Expresses what part of the target specification corresponds to this element.
        :param comment: Comments that provide information about the mapping or its use.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identity=identity,
            language=language,
            map=map,
            comment=comment,
        )
