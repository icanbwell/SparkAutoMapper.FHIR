from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # initialSelected (boolean)
    # valueInteger (integer)
    # valueDate (date)
    # valueTime (time)
    from spark_auto_mapper_fhir.fhir_types.time import FhirTime

    # valueString (string)
    # valueCoding (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for valueCoding
    # Import for CodeableConcept for valueCoding
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for valueCoding
    # valueReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for valueReference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class QuestionnaireAnswerOption(FhirBackboneElementBase):
    """
    Questionnaire.AnswerOption
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        initialSelected: Optional[FhirBoolean] = None,
        valueInteger: Optional[FhirInteger] = None,
        valueDate: Optional[FhirDate] = None,
        valueTime: Optional[FhirTime] = None,
        valueString: Optional[FhirString] = None,
        valueCoding: Optional[Coding[GenericTypeCode]] = None,
        valueReference: Optional[Reference[Union[Resource]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param initialSelected: Indicates whether the answer value is selected when the list of possible
        answers is initially shown.
            :param valueInteger: None
            :param valueDate: None
            :param valueTime: None
            :param valueString: None
            :param valueCoding: None
            :param valueReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            initialSelected=initialSelected,
            valueInteger=valueInteger,
            valueDate=valueDate,
            valueTime=valueTime,
            valueString=valueString,
            valueCoding=valueCoding,
            valueReference=valueReference,
        )
