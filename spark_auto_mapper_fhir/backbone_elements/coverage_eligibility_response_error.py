from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.adjudication_error_codes import (
        AdjudicationErrorCodesCode,
    )

    # End Import for CodeableConcept for code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityResponseError(FhirBackboneElementBase):
    """
    CoverageEligibilityResponse.Error
        This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept[AdjudicationErrorCodesCode],
    ) -> None:
        """
            This resource provides eligibility and plan details from the processing of an
        CoverageEligibilityRequest resource.

            :param id_: id of resource
            :param extension: extensions
            :param code: An error code,from a specified code system, which details why the eligibility
        check could not be performed.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
        )
