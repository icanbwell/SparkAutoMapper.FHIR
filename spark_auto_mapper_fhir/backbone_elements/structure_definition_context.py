from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (ExtensionContextType)
    from spark_auto_mapper_fhir.value_sets.extension_context_type import (
        ExtensionContextTypeCode,
    )

    # expression (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureDefinitionContext(FhirBackboneElementBase):
    """
    StructureDefinition.Context
        A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: ExtensionContextTypeCode,
        expression: FhirString,
    ) -> None:
        """
            A definition of a FHIR structure. This resource is used to describe the
        underlying resources, data types defined in FHIR, and also for describing
        extensions and constraints on resources and data types.

            :param id_: id of resource
            :param extension: extensions
            :param type_: Defines how to interpret the expression that defines what the context of the
        extension is.
            :param expression: An expression that defines where an extension can be used in resources.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            expression=expression,
        )
