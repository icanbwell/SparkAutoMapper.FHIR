from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # numberOfUnits (integer)
    # averageMolecularFormula (string)
    # repeatUnitAmountType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for repeatUnitAmountType
    # Import for CodeableConcept for repeatUnitAmountType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for repeatUnitAmountType
    # repeatUnit (SubstancePolymer.RepeatUnit)
    from spark_auto_mapper_fhir.backbone_elements.substance_polymer_repeat_unit import (
        SubstancePolymerRepeatUnit,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstancePolymerRepeat(FhirBackboneElementBase):
    """
    SubstancePolymer.Repeat
        Todo.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        numberOfUnits: Optional[FhirInteger] = None,
        averageMolecularFormula: Optional[FhirString] = None,
        repeatUnitAmountType: Optional[CodeableConcept[GenericTypeCode]] = None,
        repeatUnit: Optional[FhirList[SubstancePolymerRepeatUnit]] = None,
    ) -> None:
        """
        Todo.

        :param id_: id of resource
        :param extension: extensions
        :param numberOfUnits: Todo.
        :param averageMolecularFormula: Todo.
        :param repeatUnitAmountType: Todo.
        :param repeatUnit: Todo.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            numberOfUnits=numberOfUnits,
            averageMolecularFormula=averageMolecularFormula,
            repeatUnitAmountType=repeatUnitAmountType,
            repeatUnit=repeatUnit,
        )
