from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # coverage (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for coverage
    from spark_auto_mapper_fhir.resources.coverage import Coverage

    # priority (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AccountCoverage(FhirBackboneElementBase):
    """
    Account.Coverage
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        coverage: Reference[Union[Coverage]],
        priority: Optional[FhirPositiveInt] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param coverage: The party(s) that contribute to payment (or part of) of the charges applied to
        this account (including self-pay).

        A coverage may only be responsible for specific types of charges, and the
        sequence of the coverages in the account could be important when processing
        billing.
            :param priority: The priority of the coverage in the context of this account.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            coverage=coverage,
            priority=priority,
        )
