from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (DeviceMetricCalibrationType)
    from spark_auto_mapper_fhir.value_sets.device_metric_calibration_type import (
        DeviceMetricCalibrationTypeCode,
    )

    # state (DeviceMetricCalibrationState)
    from spark_auto_mapper_fhir.value_sets.device_metric_calibration_state import (
        DeviceMetricCalibrationStateCode,
    )

    # time (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceMetricCalibration(FhirBackboneElementBase):
    """
    DeviceMetric.Calibration
        Describes a measurement, calculation or setting capability of a medical device.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[DeviceMetricCalibrationTypeCode] = None,
        state: Optional[DeviceMetricCalibrationStateCode] = None,
        time: Optional[FhirInstant] = None,
    ) -> None:
        """
            Describes a measurement, calculation or setting capability of a medical
        device.

            :param id_: id of resource
            :param extension: extensions
            :param type_: Describes the type of the calibration method.
            :param state: Describes the state of the calibration.
            :param time: Describes the time last calibration has been performed.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            state=state,
            time=time,
        )
