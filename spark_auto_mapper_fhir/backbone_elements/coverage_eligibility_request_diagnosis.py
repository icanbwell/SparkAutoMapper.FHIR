from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # diagnosisCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for diagnosisCodeableConcept
    # Import for CodeableConcept for diagnosisCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for diagnosisCodeableConcept
    # diagnosisReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for diagnosisReference
    from spark_auto_mapper_fhir.resources.condition import Condition


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityRequestDiagnosis(FhirBackboneElementBase):
    """
    CoverageEligibilityRequest.Diagnosis
        The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        diagnosisCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        diagnosisReference: Optional[Reference[Union[Condition]]] = None,
    ) -> None:
        """
            The CoverageEligibilityRequest provides patient and insurance coverage
        information to an insurer for them to respond, in the form of an
        CoverageEligibilityResponse, with information regarding whether the stated
        coverage is valid and in-force and optionally to provide the insurance details
        of the policy.

            :param id_: id of resource
            :param extension: extensions
            :param diagnosisCodeableConcept: None
            :param diagnosisReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            diagnosisCodeableConcept=diagnosisCodeableConcept,
            diagnosisReference=diagnosisReference,
        )
