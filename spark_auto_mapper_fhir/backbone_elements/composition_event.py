from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.act_code import ActCode

    # End Import for CodeableConcept for code
    # period (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # detail (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for detail


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompositionEvent(FhirBackboneElementBase):
    """
    Composition.Event
        A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[FhirList[CodeableConcept[ActCode]]] = None,
        period: Optional[Period] = None,
        detail: Optional[FhirList[Reference[Union[Resource]]]] = None,
    ) -> None:
        """
            A set of healthcare-related information that is assembled together into a
        single logical package that provides a single coherent statement of meaning,
        establishes its own context and that has clinical attestation with regard to
        who is making the statement. A Composition defines the structure and narrative
        content necessary for a document. However, a Composition alone does not
        constitute a document. Rather, the Composition must be the first entry in a
        Bundle where Bundle.type=document, and any other resources referenced from
        Composition must be included as subsequent entries in the Bundle (for example
        Patient, Practitioner, Encounter, etc.).

            :param id_: id of resource
            :param extension: extensions
            :param code: This list of codes represents the main clinical acts, such as a colonoscopy or
        an appendectomy, being documented. In some cases, the event is inherent in the
        typeCode, such as a "History and Physical Report" in which the procedure being
        documented is necessarily a "History and Physical" act.
            :param period: The period of time covered by the documentation. There is no assertion that
        the documentation is a complete representation for this period, only that it
        documents events during this time.
            :param detail: The description and/or reference of the event(s) being documented. For
        example, this could be used to document such a colonoscopy or an appendectomy.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            period=period,
            detail=detail,
        )
