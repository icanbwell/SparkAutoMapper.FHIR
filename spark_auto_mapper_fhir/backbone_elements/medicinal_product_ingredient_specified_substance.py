from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # group (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # confidentiality (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # strength (MedicinalProductIngredient.Strength)
    from spark_auto_mapper_fhir.backbone_elements.medicinal_product_ingredient_strength import (
        MedicinalProductIngredientStrength,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductIngredientSpecifiedSubstance(FhirBackboneElementBase):
    """
    MedicinalProductIngredient.SpecifiedSubstance
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept,
        group: CodeableConcept,
        confidentiality: Optional[CodeableConcept] = None,
        strength: Optional[FhirList[MedicinalProductIngredientStrength]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: The specified substance.
            :param group: The group of specified substance, e.g. group 1 to 4.
            :param confidentiality: Confidentiality level of the specified substance as the ingredient.
            :param strength: Quantity of the substance or specified substance present in the manufactured
        item or pharmaceutical product.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            group=group,
            confidentiality=confidentiality,
            strength=strength,
        )
