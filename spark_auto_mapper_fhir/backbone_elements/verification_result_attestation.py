from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for who
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for onBehalfOf
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.date import date
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.signature import Signature
    from spark_auto_mapper_fhir.complex_types.signature import Signature


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResultAttestation(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        who: Optional[Reference[Union[Practitioner, PractitionerRole, Organization]]] = None,
        onBehalfOf: Optional[Reference[Union[Organization, Practitioner, PractitionerRole]]] = None,
        communicationMethod: Optional[CodeableConcept] = None,
        date: Optional[date] = None,
        sourceIdentityCertificate: Optional[string] = None,
        proxyIdentityCertificate: Optional[string] = None,
        proxySignature: Optional[Signature] = None,
        sourceSignature: Optional[Signature] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param who: The individual or organization attesting to information.
        :param onBehalfOf: When the who is asserting on behalf of another (organization or individual).
        :param communicationMethod: The method by which attested information was submitted/retrieved (manual; API;
    Push).
        :param date: The date the information was attested to.
        :param sourceIdentityCertificate: A digital identity certificate associated with the attestation source.
        :param proxyIdentityCertificate: A digital identity certificate associated with the proxy entity submitting
    attested information on behalf of the attestation source.
        :param proxySignature: Signed assertion by the proxy entity indicating that they have the right to
    submit attested information on behalf of the attestation source.
        :param sourceSignature: Signed assertion by the attestation source that they have attested to the
    information.
        """
        super().__init__(
            resourceType="VerificationResultAttestation",
            id_=id_,
            meta=meta,
            extension=extension,
            who=who,
            onBehalfOf=onBehalfOf,
            communicationMethod=communicationMethod,
            date=date,
            sourceIdentityCertificate=sourceIdentityCertificate,
            proxyIdentityCertificate=proxyIdentityCertificate,
            proxySignature=proxySignature,
            sourceSignature=sourceSignature,
        )
