from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # who (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for who
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization

    # onBehalfOf (Reference)
    # Imports for References for onBehalfOf
    # communicationMethod (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for communicationMethod
    # Import for CodeableConcept for communicationMethod
    from spark_auto_mapper_fhir.value_sets.verificationresult_communication_method import (
        Verificationresult_communication_methodCode,
    )

    # End Import for CodeableConcept for communicationMethod
    # date (date)
    # sourceIdentityCertificate (string)
    # proxyIdentityCertificate (string)
    # proxySignature (Signature)
    from spark_auto_mapper_fhir.complex_types.signature import Signature

    # sourceSignature (Signature)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResultAttestation(FhirBackboneElementBase):
    """
    VerificationResult.Attestation
        Describes validation requirements, source(s), status and dates for one or more elements.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        who: Optional[
            Reference[Union[Practitioner, PractitionerRole, Organization]]
        ] = None,
        onBehalfOf: Optional[
            Reference[Union[Organization, Practitioner, PractitionerRole]]
        ] = None,
        communicationMethod: Optional[
            CodeableConcept[Verificationresult_communication_methodCode]
        ] = None,
        date: Optional[FhirDate] = None,
        sourceIdentityCertificate: Optional[FhirString] = None,
        proxyIdentityCertificate: Optional[FhirString] = None,
        proxySignature: Optional[Signature] = None,
        sourceSignature: Optional[Signature] = None,
    ) -> None:
        """
            Describes validation requirements, source(s), status and dates for one or more
        elements.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param who: The individual or organization attesting to information.
            :param onBehalfOf: When the who is asserting on behalf of another (organization or individual).
            :param communicationMethod: The method by which attested information was submitted/retrieved (manual; API;
        Push).
            :param date: The date the information was attested to.
            :param sourceIdentityCertificate: A digital identity certificate associated with the attestation source.
            :param proxyIdentityCertificate: A digital identity certificate associated with the proxy entity submitting
        attested information on behalf of the attestation source.
            :param proxySignature: Signed assertion by the proxy entity indicating that they have the right to
        submit attested information on behalf of the attestation source.
            :param sourceSignature: Signed assertion by the attestation source that they have attested to the
        information.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            who=who,
            onBehalfOf=onBehalfOf,
            communicationMethod=communicationMethod,
            date=date,
            sourceIdentityCertificate=sourceIdentityCertificate,
            proxyIdentityCertificate=proxyIdentityCertificate,
            proxySignature=proxySignature,
            sourceSignature=sourceSignature,
        )
