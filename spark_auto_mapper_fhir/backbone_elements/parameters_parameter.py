from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.backbone_elements.parameters_parameter import (
        ParametersParameter,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ParametersParameter(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirString,
        resource: Optional[ResourceContainer] = None,
        part: Optional[FhirList[ParametersParameter]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param name: The name of the parameter (reference to the operation definition).
        :param resource: If the parameter is a whole resource.
        :param part: A named part of a multi-part parameter.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            resource=resource,
            part=part,
        )
