from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for category
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.benefit_category_codes import (
        BenefitCategoryCodesCode,
    )

    # End Import for CodeableConcept for category
    # productOrService (CodeableConcept)
    # End Import for References for productOrService
    # Import for CodeableConcept for productOrService
    from spark_auto_mapper_fhir.value_sets.uscls_codes import USCLSCodesCode

    # End Import for CodeableConcept for productOrService
    # modifier (CodeableConcept)
    # End Import for References for modifier
    # Import for CodeableConcept for modifier
    from spark_auto_mapper_fhir.value_sets.modifier_type_codes import (
        ModifierTypeCodesCode,
    )

    # End Import for CodeableConcept for modifier
    # provider (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for provider
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # excluded (boolean)
    # name (string)
    # description (string)
    # network (CodeableConcept)
    # End Import for References for network
    # Import for CodeableConcept for network
    from spark_auto_mapper_fhir.value_sets.network_type_codes import (
        NetworkTypeCodesCode,
    )

    # End Import for CodeableConcept for network
    # unit (CodeableConcept)
    # End Import for References for unit
    # Import for CodeableConcept for unit
    from spark_auto_mapper_fhir.value_sets.unit_type_codes import UnitTypeCodesCode

    # End Import for CodeableConcept for unit
    # term (CodeableConcept)
    # End Import for References for term
    # Import for CodeableConcept for term
    from spark_auto_mapper_fhir.value_sets.benefit_term_codes import (
        BenefitTermCodesCode,
    )

    # End Import for CodeableConcept for term
    # benefit (CoverageEligibilityResponse.Benefit)
    from spark_auto_mapper_fhir.backbone_elements.coverage_eligibility_response_benefit import (
        CoverageEligibilityResponseBenefit,
    )

    # authorizationRequired (boolean)
    # authorizationSupporting (CodeableConcept)
    # End Import for References for authorizationSupporting
    # Import for CodeableConcept for authorizationSupporting
    from spark_auto_mapper_fhir.value_sets.coverage_eligibility_response_auth_support_codes import (
        CoverageEligibilityResponseAuthSupportCodesCode,
    )

    # End Import for CodeableConcept for authorizationSupporting
    # authorizationUrl (uri)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityResponseItem(FhirBackboneElementBase):
    """
    CoverageEligibilityResponse.Item
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: Optional[CodeableConcept[BenefitCategoryCodesCode]] = None,
        productOrService: Optional[CodeableConcept[USCLSCodesCode]] = None,
        modifier: Optional[FhirList[CodeableConcept[ModifierTypeCodesCode]]] = None,
        provider: Optional[Reference[Union[Practitioner, PractitionerRole]]] = None,
        excluded: Optional[FhirBoolean] = None,
        name: Optional[FhirString] = None,
        description: Optional[FhirString] = None,
        network: Optional[CodeableConcept[NetworkTypeCodesCode]] = None,
        unit: Optional[CodeableConcept[UnitTypeCodesCode]] = None,
        term: Optional[CodeableConcept[BenefitTermCodesCode]] = None,
        benefit: Optional[FhirList[CoverageEligibilityResponseBenefit]] = None,
        authorizationRequired: Optional[FhirBoolean] = None,
        authorizationSupporting: Optional[
            FhirList[CodeableConcept[CoverageEligibilityResponseAuthSupportCodesCode]]
        ] = None,
        authorizationUrl: Optional[FhirUri] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param category: Code to identify the general type of benefits under which products and
        services are provided.
            :param productOrService: This contains the product, service, drug or other billing code for the item.
            :param modifier: Item typification or modifiers codes to convey additional context for the
        product or service.
            :param provider: The practitioner who is eligible for the provision of the product or service.
            :param excluded: True if the indicated class of service is excluded from the plan, missing or
        False indicates the product or service is included in the coverage.
            :param name: A short name or tag for the benefit.
            :param description: A richer description of the benefit or services covered.
            :param network: Is a flag to indicate whether the benefits refer to in-network providers or
        out-of-network providers.
            :param unit: Indicates if the benefits apply to an individual or to the family.
            :param term: The term or period of the values such as 'maximum lifetime benefit' or
        'maximum annual visits'.
            :param benefit: Benefits used to date.
            :param authorizationRequired: A boolean flag indicating whether a preauthorization is required prior to
        actual service delivery.
            :param authorizationSupporting: Codes or comments regarding information or actions associated with the
        preauthorization.
            :param authorizationUrl: A web location for obtaining requirements or descriptive information regarding
        the preauthorization.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            productOrService=productOrService,
            modifier=modifier,
            provider=provider,
            excluded=excluded,
            name=name,
            description=description,
            network=network,
            unit=unit,
            term=term,
            benefit=benefit,
            authorizationRequired=authorizationRequired,
            authorizationSupporting=authorizationSupporting,
            authorizationUrl=authorizationUrl,
        )
