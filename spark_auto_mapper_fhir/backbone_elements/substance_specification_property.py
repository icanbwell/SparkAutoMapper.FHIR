from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # category (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for category
    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for category
    # code (CodeableConcept)
    # End Import for References for code
    # Import for CodeableConcept for code
    # End Import for CodeableConcept for code
    # parameters (string)
    # definingSubstanceReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for definingSubstanceReference
    from spark_auto_mapper_fhir.resources.substance_specification import (
        SubstanceSpecification,
    )
    from spark_auto_mapper_fhir.resources.substance import Substance

    # definingSubstanceCodeableConcept (CodeableConcept)
    # End Import for References for definingSubstanceCodeableConcept
    # Import for CodeableConcept for definingSubstanceCodeableConcept
    # End Import for CodeableConcept for definingSubstanceCodeableConcept
    # amountQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # amountString (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecificationProperty(FhirBackboneElementBase):
    """
    SubstanceSpecification.Property
        The detailed description of a substance, typically at a level beyond what is used for prescribing.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        category: Optional[CodeableConcept[GenericTypeCode]] = None,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
        parameters: Optional[FhirString] = None,
        definingSubstanceReference: Optional[
            Reference[Union[SubstanceSpecification, Substance]]
        ] = None,
        definingSubstanceCodeableConcept: Optional[
            CodeableConcept[GenericTypeCode]
        ] = None,
        amountQuantity: Optional[Quantity] = None,
        amountString: Optional[FhirString] = None,
    ) -> None:
        """
            The detailed description of a substance, typically at a level beyond what is
        used for prescribing.

            :param id_: id of resource
            :param extension: extensions
            :param category: A category for this property, e.g. Physical, Chemical, Enzymatic.
            :param code: Property type e.g. viscosity, pH, isoelectric point.
            :param parameters: Parameters that were used in the measurement of a property (e.g. for
        viscosity: measured at 20C with a pH of 7.1).
            :param definingSubstanceReference: None
            :param definingSubstanceCodeableConcept: None
            :param amountQuantity: None
            :param amountString: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            category=category,
            code=code,
            parameters=parameters,
            definingSubstanceReference=definingSubstanceReference,
            definingSubstanceCodeableConcept=definingSubstanceCodeableConcept,
            amountQuantity=amountQuantity,
            amountString=amountString,
        )
