from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for category
    from spark_auto_mapper_fhir.value_sets.claim_information_category_codes import (
        ClaimInformationCategoryCodes,
    )

    # End Import for CodeableConcept for category
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.exception_codes import ExceptionCodes

    # End Import for CodeableConcept for code
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.value_sets.missing_tooth_reason_codes import (
        MissingToothReasonCodes,
    )

    # End Import for CodeableConcept for reason


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitSupportingInfo(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: positiveInt,
        category: CodeableConcept[ClaimInformationCategoryCodes],
        code: Optional[CodeableConcept[ExceptionCodes]] = None,
        reason: Optional[Coding[MissingToothReasonCodes]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param sequence: A number to uniquely identify supporting information entries.
            :param category: The general class of the information supplied: information; exception;
        accident, employment; onset, etc.
            :param code: System and code pertaining to the specific information regarding special
        conditions relating to the setting, treatment or patient  for which care is
        sought.
            :param reason: Provides the reason in the situation where a reason code is required in
        addition to the content.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            category=category,
            code=code,
            reason=reason,
        )
