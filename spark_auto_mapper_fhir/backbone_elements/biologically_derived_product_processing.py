from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for procedure
    from spark_auto_mapper_fhir.value_sets.procedure_codes_snomedct_ import ProcedureCodes_SNOMEDCT_
    # End Import for CodeableConcept for procedure
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for additive
    from spark_auto_mapper_fhir.resources.substance import Substance


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BiologicallyDerivedProductProcessing(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[FhirString ] = None,
        procedure: Optional[CodeableConcept[ProcedureCodes_SNOMEDCT_] ] = None,
        additive: Optional[Reference [Union[Substance]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param description: Description of of processing.
        :param procedure: Procesing code.
        :param additive: Substance added during processing.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            procedure=procedure,
            additive=additive,
        )
