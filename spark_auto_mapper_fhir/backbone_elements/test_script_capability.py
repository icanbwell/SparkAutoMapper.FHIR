from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # required (boolean)
    # validated (boolean)
    # description (string)
    # origin (integer)
    # destination (integer)
    # link (uri)
    # capabilities (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptCapability(FhirBackboneElementBase):
    """
    TestScript.Capability
        A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        required: FhirBoolean,
        validated: FhirBoolean,
        description: Optional[FhirString] = None,
        origin: Optional[FhirList[FhirInteger]] = None,
        destination: Optional[FhirInteger] = None,
        link: Optional[FhirList[FhirUri]] = None,
        capabilities: FhirCanonical,
    ) -> None:
        """
            A structured set of tests against a FHIR server or client implementation to
        determine compliance against the FHIR specification.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param required: Whether or not the test execution will require the given capabilities of the
        server in order for this test script to execute.
            :param validated: Whether or not the test execution will validate the given capabilities of the
        server in order for this test script to execute.
            :param description: Description of the capabilities that this test script is requiring the server
        to support.
            :param origin: Which origin server these requirements apply to.
            :param destination: Which server these requirements apply to.
            :param link: Links to the FHIR specification that describes this interaction and the
        resources involved in more detail.
            :param capabilities: Minimum capabilities required of server for test script to execute
        successfully.   If server does not meet at a minimum the referenced capability
        statement, then all tests in this script are skipped.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            required=required,
            validated=validated,
            description=description,
            origin=origin,
            destination=destination,
            link=link,
            capabilities=capabilities,
        )
