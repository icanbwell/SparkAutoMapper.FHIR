from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.uri import uri
    from spark_auto_mapper_fhir.complex_types.canonical import canonical


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TestScriptCapability(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        required: boolean,
        validated: boolean,
        description: Optional[string] = None,
        origin: Optional[FhirList[integer]] = None,
        destination: Optional[integer] = None,
        link: Optional[FhirList[uri]] = None,
        capabilities: canonical,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param required: Whether or not the test execution will require the given capabilities of the
    server in order for this test script to execute.
        :param validated: Whether or not the test execution will validate the given capabilities of the
    server in order for this test script to execute.
        :param description: Description of the capabilities that this test script is requiring the server
    to support.
        :param origin: Which origin server these requirements apply to.
        :param destination: Which server these requirements apply to.
        :param link: Links to the FHIR specification that describes this interaction and the
    resources involved in more detail.
        :param capabilities: Minimum capabilities required of server for test script to execute
    successfully.   If server does not meet at a minimum the referenced capability
    statement, then all tests in this script are skipped.
        """
        super().__init__(
            resourceType="TestScriptCapability",
            id_=id_,
            meta=meta,
            extension=extension,
            required=required,
            validated=validated,
            description=description,
            origin=origin,
            destination=destination,
            link=link,
            capabilities=capabilities,
        )
