from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_filter import TerminologyCapabilitiesFilter
    from spark_auto_mapper_fhir.complex_types.code import code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesVersion(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[FhirString ] = None,
        isDefault: Optional[FhirBoolean ] = None,
        compositional: Optional[FhirBoolean ] = None,
        language: Optional[FhirList[code ]] = None,
        filter: Optional[FhirList[TerminologyCapabilitiesFilter ]] = None,
        property: Optional[FhirList[code ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param code: For version-less code systems, there should be a single version with no
    identifier.
        :param isDefault: If this is the default version for this code system.
        :param compositional: If the compositional grammar defined by the code system is supported.
        :param language: Language Displays supported.
        :param filter: Filter Properties supported.
        :param property: Properties supported for $lookup.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            isDefault=isDefault,
            compositional=compositional,
            language=language,
            filter=filter,
            property=property,
        )
