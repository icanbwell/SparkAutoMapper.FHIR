from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (string)
    # isDefault (boolean)
    # compositional (boolean)
    # language (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # filter (TerminologyCapabilities.Filter)
    from spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_filter import (
        TerminologyCapabilitiesFilter,
    )

    # property (code)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesVersion(FhirBackboneElementBase):
    """
    TerminologyCapabilities.Version
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[FhirString] = None,
        isDefault: Optional[FhirBoolean] = None,
        compositional: Optional[FhirBoolean] = None,
        language: Optional[FhirList[code]] = None,
        filter: Optional[FhirList[TerminologyCapabilitiesFilter]] = None,
        property: Optional[FhirList[code]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: For version-less code systems, there should be a single version with no
        identifier.
            :param isDefault: If this is the default version for this code system.
            :param compositional: If the compositional grammar defined by the code system is supported.
            :param language: Language Displays supported.
            :param filter: Filter Properties supported.
            :param property: Properties supported for $lookup.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            isDefault=isDefault,
            compositional=compositional,
            language=language,
            filter=filter,
            property=property,
        )
