from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # part (string)
    # type_ (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductNamePart(FhirBackboneElementBase):
    """
    MedicinalProduct.NamePart
        Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        part: FhirString,
        type_: Coding[GenericTypeCode],
    ) -> None:
        """
            Detailed definition of a medicinal product, typically for uses other than
        direct patient care (e.g. regulatory use).

            :param id_: id of resource
            :param extension: extensions
            :param part: A fragment of a product name.
            :param type_: Idenifying type for this part of the name (e.g. strength part).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            part=part,
            type_=type_,
        )
