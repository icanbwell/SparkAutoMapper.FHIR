from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # amount (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # base (VisionBase)
    from spark_auto_mapper_fhir.value_sets.vision_base import VisionBaseCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VisionPrescriptionPrism(FhirBackboneElementBase):
    """
    VisionPrescription.Prism
        An authorization for the provision of glasses and/or contact lenses to a patient.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        amount: FhirDecimal,
        base: VisionBaseCode,
    ) -> None:
        """
            An authorization for the provision of glasses and/or contact lenses to a
        patient.

            :param id_: id of resource
            :param extension: extensions
            :param amount: Amount of prism to compensate for eye alignment in fractional units.
            :param base: The relative base, or reference lens edge, for the prism.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            amount=amount,
            base=base,
        )
