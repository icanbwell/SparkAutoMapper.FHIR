from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # meaning (ConsentDataMeaning)
    from spark_auto_mapper_fhir.value_sets.consent_data_meaning import (
        ConsentDataMeaningCode,
    )

    # reference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reference


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConsentData(FhirBackboneElementBase):
    """
    Consent.Data
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        meaning: ConsentDataMeaningCode,
        reference: Reference[Union[Resource]],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param meaning: How the resource reference is interpreted when testing consent restrictions.
            :param reference: A reference to a specific resource that defines which resources are covered by
        this consent.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            meaning=meaning,
            reference=reference,
        )
