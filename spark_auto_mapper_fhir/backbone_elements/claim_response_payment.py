from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.example_payment_type_codes import (
        ExamplePaymentTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # adjustment (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # adjustmentReason (CodeableConcept)
    # End Import for References for adjustmentReason
    # Import for CodeableConcept for adjustmentReason
    from spark_auto_mapper_fhir.value_sets.payment_adjustment_reason_codes import (
        PaymentAdjustmentReasonCodesCode,
    )

    # End Import for CodeableConcept for adjustmentReason
    # date (date)
    # amount (Money)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimResponsePayment(FhirBackboneElementBase):
    """
    ClaimResponse.Payment
        This resource provides the adjudication details from the processing of a Claim resource.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: CodeableConcept[ExamplePaymentTypeCodesCode],
        adjustment: Optional[Money] = None,
        adjustmentReason: Optional[
            CodeableConcept[PaymentAdjustmentReasonCodesCode]
        ] = None,
        date: Optional[FhirDate] = None,
        amount: Money,
        identifier: Optional[Identifier] = None,
    ) -> None:
        """
            This resource provides the adjudication details from the processing of a Claim
        resource.

            :param id_: id of resource
            :param extension: extensions
            :param type_: Whether this represents partial or complete payment of the benefits payable.
            :param adjustment: Total amount of all adjustments to this payment included in this transaction
        which are not related to this claim's adjudication.
            :param adjustmentReason: Reason for the payment adjustment.
            :param date: Estimated date the payment will be issued or the actual issue date of payment.
            :param amount: Benefits payable less any payment adjustment.
            :param identifier: Issuer's unique identifier for the payment instrument.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            adjustment=adjustment,
            adjustmentReason=adjustmentReason,
            date=date,
            amount=amount,
            identifier=identifier,
        )
