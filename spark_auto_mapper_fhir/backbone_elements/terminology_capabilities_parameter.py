from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # name (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # documentation (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class TerminologyCapabilitiesParameter(FhirBackboneElementBase):
    """
    TerminologyCapabilities.Parameter
        A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: code,
        documentation: Optional[FhirString] = None,
    ) -> None:
        """
            A TerminologyCapabilities resource documents a set of capabilities (behaviors)
        of a FHIR Terminology Server that may be used as a statement of actual server
        functionality or a statement of required or desired server implementation.

            :param id_: id of resource
            :param extension: extensions
            :param name: Expansion Parameter name.
            :param documentation: Description of support for parameter.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            documentation=documentation,
        )
