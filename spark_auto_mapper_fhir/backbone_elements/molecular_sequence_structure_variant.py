from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_outer import (
        MolecularSequenceOuter,
    )
    from spark_auto_mapper_fhir.backbone_elements.molecular_sequence_inner import (
        MolecularSequenceInner,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequenceStructureVariant(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        variantType: Optional[CodeableConcept] = None,
        exact: Optional[boolean] = None,
        length: Optional[integer] = None,
        outer: Optional[MolecularSequenceOuter] = None,
        inner: Optional[MolecularSequenceInner] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param variantType: Information about chromosome structure variation DNA change type.
            :param exact: Used to indicate if the outer and inner start-end values have the same
        meaning.
            :param length: Length of the variant chromosome.
            :param outer: Structural variant outer.
            :param inner: Structural variant inner.
        """
        super().__init__(
            resourceType="MolecularSequenceStructureVariant",
            id_=id_,
            meta=meta,
            extension=extension,
            variantType=variantType,
            exact=exact,
            length=length,
            outer=outer,
            inner=inner,
        )
