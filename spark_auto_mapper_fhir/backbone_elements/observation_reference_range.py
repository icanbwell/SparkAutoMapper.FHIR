from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.observation_reference_range_meaning_codes import ObservationReferenceRangeMeaningCodes
    # End Import for CodeableConcept for type
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for appliesTo
    from spark_auto_mapper_fhir.value_sets.observation_reference_range_applies_to_codes import ObservationReferenceRangeAppliesToCodes
    # End Import for CodeableConcept for appliesTo
    from spark_auto_mapper_fhir.complex_types.range import Range
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ObservationReferenceRange(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        low: Optional[Quantity ] = None,
        high: Optional[Quantity ] = None,
        type: Optional[CodeableConcept[ObservationReferenceRangeMeaningCodes] ] = None,
        appliesTo: Optional[FhirList[CodeableConcept[ObservationReferenceRangeAppliesToCodes] ]] = None,
        age: Optional[Range ] = None,
        text: Optional[FhirString ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param low: The value of the low bound of the reference range.  The low bound of the
    reference range endpoint is inclusive of the value (e.g.  reference range is
    >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless
    (e.g. reference range is <=2.3).
        :param high: The value of the high bound of the reference range.  The high bound of the
    reference range endpoint is inclusive of the value (e.g.  reference range is
    >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless
    (e.g. reference range is >= 2.3).
        :param type: Codes to indicate the what part of the targeted reference population it
    applies to. For example, the normal or therapeutic range.
        :param appliesTo: Codes to indicate the target population this reference range applies to.  For
    example, a reference range may be based on the normal population or a
    particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of
    the target populations.  For example, to represent a target population of
    African American females, both a code of female and a code for African
    American would be used.
        :param age: The age at which this reference range is applicable. This is a neonatal age
    (e.g. number of weeks at term) if the meaning says so.
        :param text: Text based reference range in an observation which may be used when a
    quantitative range is not appropriate for an observation.  An example would be
    a reference value of "Negative" or a list or table of "normals".
        """
        super().__init__(
            id_=id_,
            extension=extension,
            low=low,
            high=high,
            type=type,
            appliesTo=appliesTo,
            age=age,
            text=text,
        )
