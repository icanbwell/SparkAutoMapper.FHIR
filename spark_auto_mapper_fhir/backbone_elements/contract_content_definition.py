from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for publisher
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.date_time import dateTime
    from spark_auto_mapper_fhir.complex_types.contract_resource_publication_status_codes import ContractResourcePublicationStatusCodes
    from spark_auto_mapper_fhir.complex_types.markdown import markdown


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractContentDefinition(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: CodeableConcept,
        subType: Optional[CodeableConcept] = None,
        publisher: Optional[Reference[Union[Practitioner, PractitionerRole, Organization]]] = None,
        publicationDate: Optional[dateTime] = None,
        publicationStatus: ContractResourcePublicationStatusCodes,
        copyright: Optional[markdown] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type: Precusory content structure and use, i.e., a boilerplate, template,
    application for a contract such as an insurance policy or benefits under a
    program, e.g., workers compensation.
        :param subType: Detailed Precusory content type.
        :param publisher: The  individual or organization that published the Contract precursor content.
        :param publicationDate: The date (and optionally time) when the contract was published. The date must
    change when the business version changes and it must change if the status code
    changes. In addition, it should change when the substantive content of the
    contract changes.
        :param publicationStatus: amended | appended | cancelled | disputed | entered-in-error | executable |
    executed | negotiable | offered | policy | rejected | renewed | revoked |
    resolved | terminated.
        :param copyright: A copyright statement relating to Contract precursor content. Copyright
    statements are generally legal restrictions on the use and publishing of the
    Contract precursor content.
        """
        super().__init__(
            resourceType="ContractContentDefinition",
            id_=id_,
            meta=meta,
            extension=extension,
            type=type,
            subType=subType,
            publisher=publisher,
            publicationDate=publicationDate,
            publicationStatus=publicationStatus,
            copyright=copyright,
        )
