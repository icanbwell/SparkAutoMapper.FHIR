from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # source (uri)
    # sourceVersion (string)
    # target (uri)
    # targetVersion (string)
    # element (ConceptMap.Element)
    from spark_auto_mapper_fhir.backbone_elements.concept_map_element import (
        ConceptMapElement,
    )

    # unmapped (ConceptMap.Unmapped)
    from spark_auto_mapper_fhir.backbone_elements.concept_map_unmapped import (
        ConceptMapUnmapped,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapGroup(FhirBackboneElementBase):
    """
    ConceptMap.Group
        A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        source: Optional[FhirUri] = None,
        sourceVersion: Optional[FhirString] = None,
        target: Optional[FhirUri] = None,
        targetVersion: Optional[FhirString] = None,
        element: FhirList[ConceptMapElement],
        unmapped: Optional[ConceptMapUnmapped] = None,
    ) -> None:
        """
            A statement of relationships from one set of concepts to one or more other
        concepts - either concepts in code systems, or data element/data element
        concepts, or classes in class models.

            :param id_: id of resource
            :param extension: extensions
            :param source: An absolute URI that identifies the source system where the concepts to be
        mapped are defined.
            :param sourceVersion: The specific version of the code system, as determined by the code system
        authority.
            :param target: An absolute URI that identifies the target system that the concepts will be
        mapped to.
            :param targetVersion: The specific version of the code system, as determined by the code system
        authority.
            :param element: Mappings for an individual concept in the source to one or more concepts in
        the target.
            :param unmapped: What to do when there is no mapping for the source concept. "Unmapped" does
        not include codes that are unmatched, and the unmapped element is ignored in a
        code is specified to have equivalence = unmatched.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            source=source,
            sourceVersion=sourceVersion,
            target=target,
            targetVersion=targetVersion,
            element=element,
            unmapped=unmapped,
        )
