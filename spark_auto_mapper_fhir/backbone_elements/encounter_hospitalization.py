from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # preAdmissionIdentifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # origin (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for origin
    from spark_auto_mapper_fhir.resources.location import Location
    from spark_auto_mapper_fhir.resources.organization import Organization

    # admitSource (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for admitSource
    # Import for CodeableConcept for admitSource
    from spark_auto_mapper_fhir.value_sets.admit_source import AdmitSourceCode

    # End Import for CodeableConcept for admitSource
    # reAdmission (CodeableConcept)
    # End Import for References for reAdmission
    # Import for CodeableConcept for reAdmission
    from spark_auto_mapper_fhir.value_sets.v2_0092 import V2_0092

    # End Import for CodeableConcept for reAdmission
    # dietPreference (CodeableConcept)
    # End Import for References for dietPreference
    # Import for CodeableConcept for dietPreference
    from spark_auto_mapper_fhir.value_sets.diet import DietCode

    # End Import for CodeableConcept for dietPreference
    # specialCourtesy (CodeableConcept)
    # End Import for References for specialCourtesy
    # Import for CodeableConcept for specialCourtesy
    from spark_auto_mapper_fhir.value_sets.special_courtesy import SpecialCourtesyCode

    # End Import for CodeableConcept for specialCourtesy
    # specialArrangement (CodeableConcept)
    # End Import for References for specialArrangement
    # Import for CodeableConcept for specialArrangement
    from spark_auto_mapper_fhir.value_sets.special_arrangements import (
        SpecialArrangementsCode,
    )

    # End Import for CodeableConcept for specialArrangement
    # destination (Reference)
    # Imports for References for destination
    # dischargeDisposition (CodeableConcept)
    # End Import for References for dischargeDisposition
    # Import for CodeableConcept for dischargeDisposition
    from spark_auto_mapper_fhir.value_sets.discharge_disposition import (
        DischargeDispositionCode,
    )

    # End Import for CodeableConcept for dischargeDisposition


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EncounterHospitalization(FhirBackboneElementBase):
    """
    Encounter.Hospitalization
        An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        preAdmissionIdentifier: Optional[Identifier] = None,
        origin: Optional[Reference[Union[Location, Organization]]] = None,
        admitSource: Optional[CodeableConcept[AdmitSourceCode]] = None,
        reAdmission: Optional[CodeableConcept[V2_0092]] = None,
        dietPreference: Optional[FhirList[CodeableConcept[DietCode]]] = None,
        specialCourtesy: Optional[
            FhirList[CodeableConcept[SpecialCourtesyCode]]
        ] = None,
        specialArrangement: Optional[
            FhirList[CodeableConcept[SpecialArrangementsCode]]
        ] = None,
        destination: Optional[Reference[Union[Location, Organization]]] = None,
        dischargeDisposition: Optional[
            CodeableConcept[DischargeDispositionCode]
        ] = None,
    ) -> None:
        """
            An interaction between a patient and healthcare provider(s) for the purpose of
        providing healthcare service(s) or assessing the health status of a patient.

            :param id_: id of resource
            :param extension: extensions
            :param preAdmissionIdentifier: Pre-admission identifier.
            :param origin: The location/organization from which the patient came before admission.
            :param admitSource: From where patient was admitted (physician referral, transfer).
            :param reAdmission: Whether this hospitalization is a readmission and why if known.
            :param dietPreference: Diet preferences reported by the patient.
            :param specialCourtesy: Special courtesies (VIP, board member).
            :param specialArrangement: Any special requests that have been made for this hospitalization encounter,
        such as the provision of specific equipment or other things.
            :param destination: Location/organization to which the patient is discharged.
            :param dischargeDisposition: Category or kind of location after discharge.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            preAdmissionIdentifier=preAdmissionIdentifier,
            origin=origin,
            admitSource=admitSource,
            reAdmission=reAdmission,
            dietPreference=dietPreference,
            specialCourtesy=specialCourtesy,
            specialArrangement=specialArrangement,
            destination=destination,
            dischargeDisposition=dischargeDisposition,
        )
