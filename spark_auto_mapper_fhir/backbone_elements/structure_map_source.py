from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.id import id
    from spark_auto_mapper_fhir.complex_types.structure_map_source_list_mode import (
        StructureMapSourceListMode,
    )
    from spark_auto_mapper_fhir.complex_types.id import id


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapSource(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        context: id,
        min: Optional[FhirInteger] = None,
        max: Optional[FhirString] = None,
        type: Optional[FhirString] = None,
        element: Optional[FhirString] = None,
        listMode: Optional[StructureMapSourceListMode] = None,
        variable: Optional[id] = None,
        condition: Optional[FhirString] = None,
        check: Optional[FhirString] = None,
        logMessage: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param context: Type or variable this rule applies to.
            :param min: Specified minimum cardinality for the element. This is optional; if present,
        it acts an implicit check on the input content.
            :param max: Specified maximum cardinality for the element - a number or a "*". This is
        optional; if present, it acts an implicit check on the input content (* just
        serves as documentation; it's the default value).
            :param type: Specified type for the element. This works as a condition on the mapping - use
        for polymorphic elements.
            :param element: Optional field for this source.
            :param listMode: How to handle the list mode for this element.
            :param variable: Named context for field, if a field is specified.
            :param condition: FHIRPath expression  - must be true or the rule does not apply.
            :param check: FHIRPath expression  - must be true or the mapping engine throws an error
        instead of completing.
            :param logMessage: A FHIRPath expression which specifies a message to put in the transform log
        when content matching the source rule is found.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            context=context,
            min=min,
            max=max,
            type=type,
            element=element,
            listMode=listMode,
            variable=variable,
            condition=condition,
            check=check,
            logMessage=logMessage,
        )
