from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.measure_population_type import MeasurePopulationTypeCode
    # End Import for CodeableConcept for code
    # count (integer)
    from spark_auto_mapper_fhir.complex_types.integer import integer
    # subjectResults (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for subjectResults
    from spark_auto_mapper_fhir.resources.list import List


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureReportPopulation(FhirBackboneElementBase):
    """
    MeasureReport.Population
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[CodeableConcept[MeasurePopulationTypeCode] ] = None,
        count: Optional[FhirInteger ] = None,
        subjectResults: Optional[Reference [Union[List]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param code: The type of the population.
        :param count: The number of members of the population.
        :param subjectResults: This element refers to a List of subject level MeasureReport resources, one
    for each subject in this population.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            count=count,
            subjectResults=subjectResults,
        )
