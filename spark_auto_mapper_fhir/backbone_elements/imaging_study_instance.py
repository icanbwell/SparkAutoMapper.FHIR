from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # uid (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # sopClass (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for sopClass
    # Import for CodeableConcept for sopClass
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for sopClass
    # number (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt

    # title (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImagingStudyInstance(FhirBackboneElementBase):
    """
    ImagingStudy.Instance
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        uid: id,
        sopClass: Coding[GenericTypeCode],
        number: Optional[unsignedInt] = None,
        title: Optional[FhirString] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param uid: The DICOM SOP Instance UID for this image or other DICOM content.
        :param sopClass: DICOM instance  type.
        :param number: The number of instance in the series.
        :param title: The description of the instance.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            uid=uid,
            sopClass=sopClass,
            number=number,
            title=title,
        )
