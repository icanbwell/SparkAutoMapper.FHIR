from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # requirement (string)
    # limit (InsurancePlan.Limit)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_limit import (
        InsurancePlanLimit,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanBenefit(FhirBackboneElementBase):
    """
    InsurancePlan.Benefit
        Details of a Health Insurance product/plan provided by an organization.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: CodeableConcept[GenericTypeCode],
        requirement: Optional[FhirString] = None,
        limit: Optional[FhirList[InsurancePlanLimit]] = None,
    ) -> None:
        """
        Details of a Health Insurance product/plan provided by an organization.

        :param id_: id of resource
        :param extension: extensions
        :param type_: Type of benefit (primary care; speciality care; inpatient; outpatient).
        :param requirement: The referral requirements to have access/coverage for this benefit.
        :param limit: The specific limits on the benefit.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            requirement=requirement,
            limit=limit,
        )
