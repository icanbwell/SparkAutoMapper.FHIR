from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # value (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for value
    # Import for CodeableConcept for value
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for value
    # component (MeasureReport.Component)
    from spark_auto_mapper_fhir.backbone_elements.measure_report_component import (
        MeasureReportComponent,
    )

    # population (MeasureReport.Population1)
    from spark_auto_mapper_fhir.backbone_elements.measure_report_population1 import (
        MeasureReportPopulation1,
    )

    # measureScore (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureReportStratum(FhirBackboneElementBase):
    """
    MeasureReport.Stratum
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        value: Optional[CodeableConcept[GenericTypeCode]] = None,
        component: Optional[FhirList[MeasureReportComponent]] = None,
        population: Optional[FhirList[MeasureReportPopulation1]] = None,
        measureScore: Optional[Quantity] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param value: The value for this stratum, expressed as a CodeableConcept. When defining
        stratifiers on complex values, the value must be rendered such that the value
        for each stratum within the stratifier is unique.
            :param component: A stratifier component value.
            :param population: The populations that make up the stratum, one for each type of population
        appropriate to the measure.
            :param measureScore: The measure score for this stratum, calculated as appropriate for the measure
        type and scoring method, and based on only the members of this stratum.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            value=value,
            component=component,
            population=population,
            measureScore=measureScore,
        )
