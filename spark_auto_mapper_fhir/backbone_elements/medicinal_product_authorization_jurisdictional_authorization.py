from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # country (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for country
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for country
    # jurisdiction (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for jurisdiction
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for jurisdiction
    # legalStatusOfSupply (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for legalStatusOfSupply
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for legalStatusOfSupply
    # validityPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductAuthorizationJurisdictionalAuthorization(FhirBackboneElementBase):
    """
    MedicinalProductAuthorization.JurisdictionalAuthorization
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        country: Optional[CodeableConcept[GenericTypeCode]] = None,
        jurisdiction: Optional[FhirList[CodeableConcept[GenericTypeCode]]] = None,
        legalStatusOfSupply: Optional[CodeableConcept[GenericTypeCode]] = None,
        validityPeriod: Optional[Period] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param identifier: The assigned number for the marketing authorization.
        :param country: Country of authorization.
        :param jurisdiction: Jurisdiction within a country.
        :param legalStatusOfSupply: The legal status of supply in a jurisdiction or region.
        :param validityPeriod: The start and expected end date of the authorization.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            country=country,
            jurisdiction=jurisdiction,
            legalStatusOfSupply=legalStatusOfSupply,
            validityPeriod=validityPeriod,
        )
