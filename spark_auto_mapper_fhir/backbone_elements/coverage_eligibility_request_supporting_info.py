from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for information
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.boolean import boolean


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageEligibilityRequestSupportingInfo(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: positiveInt ,
        information: Reference [Union[Resource]],
        appliesToAll: Optional[FhirBoolean ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param sequence: A number to uniquely identify supporting information entries.
        :param information: Additional data or information such as resources, documents, images etc.
    including references to the data or the actual inclusion of the data.
        :param appliesToAll: The supporting materials are applicable for all detail items, product/servce
    categories and specific billing codes.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            information=information,
            appliesToAll=appliesToAll,
        )
