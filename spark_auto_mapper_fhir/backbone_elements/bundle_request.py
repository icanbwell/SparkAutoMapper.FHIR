from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # method (HTTPVerb)
    from spark_auto_mapper_fhir.value_sets.http_verb import HTTPVerbCode

    # url (uri)
    # ifNoneMatch (string)
    # ifModifiedSince (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # ifMatch (string)
    # ifNoneExist (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BundleRequest(FhirBackboneElementBase):
    """
    Bundle.Request
        A container for a collection of resources.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        method: HTTPVerbCode,
        url: FhirUri,
        ifNoneMatch: Optional[FhirString] = None,
        ifModifiedSince: Optional[FhirInstant] = None,
        ifMatch: Optional[FhirString] = None,
        ifNoneExist: Optional[FhirString] = None,
    ) -> None:
        """
            A container for a collection of resources.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param method: In a transaction or batch, this is the HTTP action to be executed for this
        entry. In a history bundle, this indicates the HTTP action that occurred.
            :param url: The URL for this entry, relative to the root (the address to which the request
        is posted).
            :param ifNoneMatch: If the ETag values match, return a 304 Not Modified status. See the API
        documentation for ["Conditional Read"](http.html#cread).
            :param ifModifiedSince: Only perform the operation if the last updated date matches. See the API
        documentation for ["Conditional Read"](http.html#cread).
            :param ifMatch: Only perform the operation if the Etag value matches. For more information,
        see the API section ["Managing Resource Contention"](http.html#concurrency).
            :param ifNoneExist: Instruct the server not to perform the create if a specified resource already
        exists. For further information, see the API documentation for ["Conditional
        Create"](http.html#ccreate). This is just the query portion of the URL - what
        follows the "?" (not including the "?").
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            method=method,
            url=url,
            ifNoneMatch=ifNoneMatch,
            ifModifiedSince=ifModifiedSince,
            ifMatch=ifMatch,
            ifNoneExist=ifNoneExist,
        )
