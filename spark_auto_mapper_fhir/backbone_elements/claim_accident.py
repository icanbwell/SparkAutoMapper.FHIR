from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # date (date)
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.act_incident_code import ActIncidentCode

    # End Import for CodeableConcept for type_
    # locationAddress (Address)
    from spark_auto_mapper_fhir.complex_types.address import Address

    # locationReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for locationReference
    from spark_auto_mapper_fhir.resources.location import Location


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimAccident(FhirBackboneElementBase):
    """
    Claim.Accident
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        date: FhirDate,
        type_: Optional[CodeableConcept[ActIncidentCode]] = None,
        locationAddress: Optional[Address] = None,
        locationReference: Optional[Reference[Union[Location]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param date: Date of an accident event  related to the products and services contained in
        the claim.
            :param type_: The type or context of the accident event for the purposes of selection of
        potential insurance coverages and determination of coordination between
        insurers.
            :param locationAddress: None
            :param locationReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            date=date,
            type_=type_,
            locationAddress=locationAddress,
            locationReference=locationReference,
        )
