from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # status (string)
    # location (uri)
    # etag (string)
    # lastModified (instant)
    from spark_auto_mapper_fhir.fhir_types.instant import FhirInstant

    # outcome (ResourceContainer)
    from spark_auto_mapper_fhir.complex_types.resource_container import (
        ResourceContainer,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BundleResponse(FhirBackboneElementBase):
    """
    Bundle.Response
        A container for a collection of resources.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        status: FhirString,
        location: Optional[FhirUri] = None,
        etag: Optional[FhirString] = None,
        lastModified: Optional[FhirInstant] = None,
        outcome: Optional[ResourceContainer] = None,
    ) -> None:
        """
            A container for a collection of resources.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param status: The status code returned by processing this entry. The status SHALL start with
        a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description
        associated with the status code.
            :param location: The location header created by processing this operation, populated if the
        operation returns a location.
            :param etag: The Etag for the resource, if the operation for the entry produced a versioned
        resource (see [Resource Metadata and Versioning](http.html#versioning) and
        [Managing Resource Contention](http.html#concurrency)).
            :param lastModified: The date/time that the resource was modified on the server.
            :param outcome: An OperationOutcome containing hints and warnings produced as part of
        processing this entry in a batch or transaction.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            status=status,
            location=location,
            etag=etag,
            lastModified=lastModified,
            outcome=outcome,
        )
