from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.device_name_type import DeviceNameType


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceDeviceName(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirString,
        type: DeviceNameType,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param name: The name of the device.
            :param type: The type of deviceName.
        UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName
        | ModelName.
        """
        super().__init__(
            resourceType="DeviceDeviceName",
            id_=id_,
            meta=meta,
            extension=extension,
            name=name,
            type=type,
        )
