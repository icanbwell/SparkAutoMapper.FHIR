from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # coverageArea (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for coverageArea
    from spark_auto_mapper_fhir.resources.location import Location

    # network (Reference)
    # Imports for References for network
    from spark_auto_mapper_fhir.resources.organization import Organization

    # generalCost (InsurancePlan.GeneralCost)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_general_cost import (
        InsurancePlanGeneralCost,
    )

    # specificCost (InsurancePlan.SpecificCost)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_specific_cost import (
        InsurancePlanSpecificCost,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanPlan(FhirBackboneElementBase):
    """
    InsurancePlan.Plan
        Details of a Health Insurance product/plan provided by an organization.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        coverageArea: Optional[FhirList[Reference[Location]]] = None,
        network: Optional[FhirList[Reference[Organization]]] = None,
        generalCost: Optional[FhirList[InsurancePlanGeneralCost]] = None,
        specificCost: Optional[FhirList[InsurancePlanSpecificCost]] = None,
    ) -> None:
        """
            Details of a Health Insurance product/plan provided by an organization.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param identifier: Business identifiers assigned to this health insurance plan which remain
        constant as the resource is updated and propagates from server to server.
            :param type_: Type of plan. For example, "Platinum" or "High Deductable".
            :param coverageArea: The geographic region in which a health insurance plan's benefits apply.
            :param network: Reference to the network that providing the type of coverage.
            :param generalCost: Overall costs associated with the plan.
            :param specificCost: Costs associated with the coverage provided by the product.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            identifier=identifier,
            type_=type_,
            coverageArea=coverageArea,
            network=network,
            generalCost=generalCost,
            specificCost=specificCost,
        )
