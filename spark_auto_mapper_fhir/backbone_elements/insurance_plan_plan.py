from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # coverageArea (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for coverageArea
    from spark_auto_mapper_fhir.resources.location import Location

    # network (Reference)
    # Imports for References for network
    from spark_auto_mapper_fhir.resources.organization import Organization

    # generalCost (InsurancePlan.GeneralCost)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_general_cost import (
        InsurancePlanGeneralCost,
    )

    # specificCost (InsurancePlan.SpecificCost)
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_specific_cost import (
        InsurancePlanSpecificCost,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanPlan(FhirBackboneElementBase):
    """
    InsurancePlan.Plan
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[FhirList[Identifier]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        coverageArea: Optional[FhirList[Reference[Union[Location]]]] = None,
        network: Optional[FhirList[Reference[Union[Organization]]]] = None,
        generalCost: Optional[FhirList[InsurancePlanGeneralCost]] = None,
        specificCost: Optional[FhirList[InsurancePlanSpecificCost]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param identifier: Business identifiers assigned to this health insurance plan which remain
        constant as the resource is updated and propagates from server to server.
            :param type_: Type of plan. For example, "Platinum" or "High Deductable".
            :param coverageArea: The geographic region in which a health insurance plan's benefits apply.
            :param network: Reference to the network that providing the type of coverage.
            :param generalCost: Overall costs associated with the plan.
            :param specificCost: Costs associated with the coverage provided by the product.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            type_=type_,
            coverageArea=coverageArea,
            network=network,
            generalCost=generalCost,
            specificCost=specificCost,
        )
