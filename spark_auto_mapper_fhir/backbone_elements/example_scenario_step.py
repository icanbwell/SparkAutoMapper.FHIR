from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # process (ExampleScenario.Process)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_process import (
        ExampleScenarioProcess,
    )

    # pause (boolean)
    # operation (ExampleScenario.Operation)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_operation import (
        ExampleScenarioOperation,
    )

    # alternative (ExampleScenario.Alternative)
    from spark_auto_mapper_fhir.backbone_elements.example_scenario_alternative import (
        ExampleScenarioAlternative,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExampleScenarioStep(FhirBackboneElementBase):
    """
    ExampleScenario.Step
        Example of workflow instance.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        process: Optional[FhirList[ExampleScenarioProcess]] = None,
        pause: Optional[FhirBoolean] = None,
        operation: Optional[ExampleScenarioOperation] = None,
        alternative: Optional[FhirList[ExampleScenarioAlternative]] = None,
    ) -> None:
        """
            Example of workflow instance.

            :param id_: id of resource
            :param extension: extensions
            :param process: Nested process.
            :param pause: If there is a pause in the flow.
            :param operation: Each interaction or action.
            :param alternative: Indicates an alternative step that can be taken instead of the operations on
        the base step in exceptional/atypical circumstances.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            process=process,
            pause=pause,
            operation=operation,
            alternative=alternative,
        )
