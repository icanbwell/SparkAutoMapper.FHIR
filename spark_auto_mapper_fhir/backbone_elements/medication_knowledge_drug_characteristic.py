from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.medication_knowledge_characteristic_codes import (
        MedicationKnowledgeCharacteristicCodesCode,
    )

    # End Import for CodeableConcept for type_
    # valueCodeableConcept (CodeableConcept)
    # End Import for References for valueCodeableConcept
    # Import for CodeableConcept for valueCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for valueCodeableConcept
    # valueString (string)
    # valueQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # valueBase64Binary (base64Binary)
    from spark_auto_mapper_fhir.complex_types.base64_binary import base64Binary


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgeDrugCharacteristic(FhirBackboneElementBase):
    """
    MedicationKnowledge.DrugCharacteristic
        Information about a medication that is used to support knowledge.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[
            CodeableConcept[MedicationKnowledgeCharacteristicCodesCode]
        ] = None,
        valueCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        valueString: Optional[FhirString] = None,
        valueQuantity: Optional[Quantity] = None,
        valueBase64Binary: Optional[base64Binary] = None,
    ) -> None:
        """
            Information about a medication that is used to support knowledge.

            :param id_: id of resource
            :param extension: extensions
            :param type_: A code specifying which characteristic of the medicine is being described (for
        example, colour, shape, imprint).
            :param valueCodeableConcept: None
            :param valueString: None
            :param valueQuantity: None
            :param valueBase64Binary: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            valueCodeableConcept=valueCodeableConcept,
            valueString=valueString,
            valueQuantity=valueQuantity,
            valueBase64Binary=valueBase64Binary,
        )
