from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationIngredient(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        isActive: Optional[boolean] = None,
        strength: Optional[Ratio] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param isActive: Indication of whether this ingredient affects the therapeutic action of the
        drug.
            :param strength: Specifies how many (or how much) of the items there are in this Medication.
        For example, 250 mg per tablet.  This is expressed as a ratio where the
        numerator is 250mg and the denominator is 1 tablet.
        """
        super().__init__(
            resourceType="MedicationIngredient",
            id_=id_,
            meta=meta,
            extension=extension,
            isActive=isActive,
            strength=strength,
        )
