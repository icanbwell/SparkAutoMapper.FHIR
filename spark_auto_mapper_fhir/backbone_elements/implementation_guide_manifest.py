from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.url import url
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_resource1 import ImplementationGuideResource1
    from spark_auto_mapper_fhir.backbone_elements.implementation_guide_page1 import ImplementationGuidePage1
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuideManifest(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        rendering: Optional[url ] = None,
        resource: FhirList[ImplementationGuideResource1 ],
        page: Optional[FhirList[ImplementationGuidePage1 ]] = None,
        image: Optional[FhirList[FhirString ]] = None,
        other: Optional[FhirList[FhirString ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param rendering: A pointer to official web page, PDF or other rendering of the implementation
    guide.
        :param resource: A resource that is part of the implementation guide. Conformance resources
    (value set, structure definition, capability statements etc.) are obvious
    candidates for inclusion, but any kind of resource can be included as an
    example resource.
        :param page: Information about a page within the IG.
        :param image: Indicates a relative path to an image that exists within the IG.
        :param other: Indicates the relative path of an additional non-page, non-image file that is
    part of the IG - e.g. zip, jar and similar files that could be the target of a
    hyperlink in a derived IG.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            rendering=rendering,
            resource=resource,
            page=page,
            image=image,
            other=other,
        )
