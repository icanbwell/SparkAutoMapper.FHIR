from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # Import for CodeableConcept for type
    from spark_auto_mapper_fhir.value_sets.contractsignertypecodes import (
        Contractsignertypecodes,
    )

    # End Import for CodeableConcept for type
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for party
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.complex_types.signature import Signature


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractSigner(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: Coding[Contractsignertypecodes],
        party: Reference[
            Union[Organization, Patient, Practitioner, PractitionerRole, RelatedPerson]
        ],
        signature: FhirList[Signature],
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type: Role of this Contract signer, e.g. notary, grantee.
        :param party: Party which is a signator to this Contract.
        :param signature: Legally binding Contract DSIG signature contents in Base64.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type=type,
            party=party,
            signature=signature,
        )
