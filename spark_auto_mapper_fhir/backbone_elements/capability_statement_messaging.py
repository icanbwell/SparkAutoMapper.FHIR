from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # endpoint (CapabilityStatement.Endpoint)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_endpoint import (
        CapabilityStatementEndpoint,
    )

    # reliableCache (unsignedInt)
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt

    # documentation (markdown)
    from spark_auto_mapper_fhir.fhir_types.markdown import FhirMarkdown

    # supportedMessage (CapabilityStatement.SupportedMessage)
    from spark_auto_mapper_fhir.backbone_elements.capability_statement_supported_message import (
        CapabilityStatementSupportedMessage,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CapabilityStatementMessaging(FhirBackboneElementBase):
    """
    CapabilityStatement.Messaging
        A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        endpoint: Optional[FhirList[CapabilityStatementEndpoint]] = None,
        reliableCache: Optional[unsignedInt] = None,
        documentation: Optional[FhirMarkdown] = None,
        supportedMessage: Optional[
            FhirList[CapabilityStatementSupportedMessage]
        ] = None,
    ) -> None:
        """
            A Capability Statement documents a set of capabilities (behaviors) of a FHIR
        Server for a particular version of FHIR that may be used as a statement of
        actual server functionality or a statement of required or desired server
        implementation.

            :param id_: id of resource
            :param extension: extensions
            :param endpoint: An endpoint (network accessible address) to which messages and/or replies are
        to be sent.
            :param reliableCache: Length if the receiver's reliable messaging cache in minutes (if a receiver)
        or how long the cache length on the receiver should be (if a sender).
            :param documentation: Documentation about the system's messaging capabilities for this endpoint not
        otherwise documented by the capability statement.  For example, the process
        for becoming an authorized messaging exchange partner.
            :param supportedMessage: References to message definitions for messages this system can send or
        receive.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            endpoint=endpoint,
            reliableCache=reliableCache,
            documentation=documentation,
            supportedMessage=supportedMessage,
        )
