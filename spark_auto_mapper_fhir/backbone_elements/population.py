from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # gender (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for gender
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for gender
    # race (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for race
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for race
    # physiologicalCondition (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for physiologicalCondition
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for physiologicalCondition


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class Population(FhirBackboneElementBase):
    """
    Population
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        gender: Optional[CodeableConcept[GenericTypeCode]] = None,
        race: Optional[CodeableConcept[GenericTypeCode]] = None,
        physiologicalCondition: Optional[CodeableConcept[GenericTypeCode]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param gender: The gender of the specific population.
            :param race: Race of the specific population.
            :param physiologicalCondition: The existing physiological conditions of the specific population to which this
        applies.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            gender=gender,
            race=race,
            physiologicalCondition=physiologicalCondition,
        )
