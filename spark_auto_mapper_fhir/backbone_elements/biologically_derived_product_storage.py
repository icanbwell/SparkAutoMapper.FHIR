from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # description (string)
    # temperature (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # scale (BiologicallyDerivedProductStorageScale)
    from spark_auto_mapper_fhir.value_sets.biologically_derived_product_storage_scale import (
        BiologicallyDerivedProductStorageScaleCode,
    )

    # duration (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class BiologicallyDerivedProductStorage(FhirBackboneElementBase):
    """
    BiologicallyDerivedProduct.Storage
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[FhirString] = None,
        temperature: Optional[FhirDecimal] = None,
        scale: Optional[BiologicallyDerivedProductStorageScaleCode] = None,
        duration: Optional[Period] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param description: Description of storage.
        :param temperature: Storage temperature.
        :param scale: Temperature scale used.
        :param duration: Storage timeperiod.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            temperature=temperature,
            scale=scale,
            duration=duration,
        )
