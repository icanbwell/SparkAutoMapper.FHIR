from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # start (integer)
    # end (integer)
    # observedAllele (string)
    # referenceAllele (string)
    # cigar (string)
    # variantPointer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for variantPointer
    from spark_auto_mapper_fhir.resources.observation import Observation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequenceVariant(FhirBackboneElementBase):
    """
    MolecularSequence.Variant
        Raw data describing a biological sequence.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        start: Optional[FhirInteger] = None,
        end: Optional[FhirInteger] = None,
        observedAllele: Optional[FhirString] = None,
        referenceAllele: Optional[FhirString] = None,
        cigar: Optional[FhirString] = None,
        variantPointer: Optional[Reference[Union[Observation]]] = None,
    ) -> None:
        """
            Raw data describing a biological sequence.

            :param id_: id of resource
            :param extension: extensions
            :param start: Start position of the variant on the  reference sequence. If the coordinate
        system is either 0-based or 1-based, then start position is inclusive.
            :param end: End position of the variant on the reference sequence. If the coordinate
        system is 0-based then end is exclusive and does not include the last
        position. If the coordinate system is 1-base, then end is inclusive and
        includes the last position.
            :param observedAllele: An allele is one of a set of coexisting sequence variants of a gene ([SO:00010
        23](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
        Nucleotide(s)/amino acids from start position of sequence to stop position of
        sequence on the positive (+) strand of the observed  sequence. When the
        sequence  type is DNA, it should be the sequence on the positive (+) strand.
        This will lay in the range between variant.start and variant.end.
            :param referenceAllele: An allele is one of a set of coexisting sequence variants of a gene ([SO:00010
        23](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).
        Nucleotide(s)/amino acids from start position of sequence to stop position of
        sequence on the positive (+) strand of the reference sequence. When the
        sequence  type is DNA, it should be the sequence on the positive (+) strand.
        This will lay in the range between variant.start and variant.end.
            :param cigar: Extended CIGAR string for aligning the sequence with reference bases. See
        detailed documentation [here](http://support.illumina.com/help/SequencingAnaly
        sisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_Ext
        endedCIGARFormat.htm).
            :param variantPointer: A pointer to an Observation containing variant information.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            start=start,
            end=end,
            observedAllele=observedAllele,
            referenceAllele=referenceAllele,
            cigar=cigar,
            variantPointer=variantPointer,
        )
