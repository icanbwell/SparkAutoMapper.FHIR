from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # wasSubstituted (boolean)
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # reason (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    # responsibleParty (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for responsibleParty
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationDispenseSubstitution(FhirBackboneElementBase):
    """
    MedicationDispense.Substitution
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        wasSubstituted: FhirBoolean ,
        type_: Optional[CodeableConcept ] = None,
        reason: Optional[FhirList[CodeableConcept ]] = None,
        responsibleParty: Optional[FhirList[Reference [Union[Practitioner, PractitionerRole]]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param wasSubstituted: True if the dispenser dispensed a different drug or product from what was
    prescribed.
        :param type_: A code signifying whether a different drug was dispensed from what was
    prescribed.
        :param reason: Indicates the reason for the substitution (or lack of substitution) from what
    was prescribed.
        :param responsibleParty: The person or organization that has primary responsibility for the
    substitution.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            wasSubstituted=wasSubstituted,
            type_=type_,
            reason=reason,
            responsibleParty=responsibleParty,
        )
