from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # wasSubstituted (boolean)
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.act_substance_admin_substitution_code import (
        ActSubstanceAdminSubstitutionCode,
    )

    # End Import for CodeableConcept for type_
    # reason (CodeableConcept)
    # End Import for References for reason
    # Import for CodeableConcept for reason
    from spark_auto_mapper_fhir.value_sets.substance_admin_substitution_reason import (
        SubstanceAdminSubstitutionReason,
    )

    # End Import for CodeableConcept for reason
    # responsibleParty (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for responsibleParty
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationDispenseSubstitution(FhirBackboneElementBase):
    """
    MedicationDispense.Substitution
        Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        wasSubstituted: FhirBoolean,
        type_: Optional[CodeableConcept[ActSubstanceAdminSubstitutionCode]] = None,
        reason: Optional[
            FhirList[CodeableConcept[SubstanceAdminSubstitutionReason]]
        ] = None,
        responsibleParty: Optional[
            FhirList[Reference[Union[Practitioner, PractitionerRole]]]
        ] = None,
    ) -> None:
        """
            Indicates that a medication product is to be or has been dispensed for a named
        person/patient.  This includes a description of the medication product
        (supply) provided and the instructions for administering the medication.  The
        medication dispense is the result of a pharmacy system responding to a
        medication order.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param wasSubstituted: True if the dispenser dispensed a different drug or product from what was
        prescribed.
            :param type_: A code signifying whether a different drug was dispensed from what was
        prescribed.
            :param reason: Indicates the reason for the substitution (or lack of substitution) from what
        was prescribed.
            :param responsibleParty: The person or organization that has primary responsibility for the
        substitution.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            wasSubstituted=wasSubstituted,
            type_=type_,
            reason=reason,
            responsibleParty=responsibleParty,
        )
