from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for network
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.backbone_elements.insurance_plan_benefit import InsurancePlanBenefit


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanCoverage(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: CodeableConcept,
        network: Optional[FhirList[Reference[Union[Organization]]]] = None,
        benefit: FhirList[InsurancePlanBenefit],
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type_: Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision;
    Drug; Short Term; Long Term Care; Hospice; Home Health).
        :param network: Reference to the network that providing the type of coverage.
        :param benefit: Specific benefits under this type of coverage.
        """
        super().__init__(
            resourceType="InsurancePlanCoverage",
            id_=id_,
            meta=meta,
            extension=extension,
            type_=type_,
            network=network,
            benefit=benefit,
        )
