from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # systemType (string)
    # version (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DeviceDefinitionSpecialization(FhirBackboneElementBase):
    """
    DeviceDefinition.Specialization
        The characteristics, operational status and capabilities of a medical-related component of a medical device.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        systemType: FhirString,
        version: Optional[FhirString] = None,
    ) -> None:
        """
            The characteristics, operational status and capabilities of a medical-related
        component of a medical device.

            :param id_: id of resource
            :param extension: extensions
            :param systemType: The standard that is used to operate and communicate.
            :param version: The version of the standard that is used to operate and communicate.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            systemType=systemType,
            version=version,
        )
