from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # entityCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for entityCodeableConcept
    # Import for CodeableConcept for entityCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for entityCodeableConcept
    # entityReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for entityReference
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # effectiveTime (dateTime)
    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # unitPrice (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # factor (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # points (decimal)
    # net (Money)
    # payment (string)
    # paymentDate (dateTime)
    # responsible (Reference)
    # Imports for References for responsible
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # recipient (Reference)
    # Imports for References for recipient
    # linkId (string)
    # securityLabelNumber (unsignedInt)
    from spark_auto_mapper_fhir.fhir_types.unsigned_int import FhirUnsignedInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractValuedItem(FhirBackboneElementBase):
    """
    Contract.ValuedItem
        Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        entityCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        entityReference: Optional[Reference[Resource]] = None,
        identifier: Optional[Identifier] = None,
        effectiveTime: Optional[FhirDateTime] = None,
        quantity: Optional[Quantity] = None,
        unitPrice: Optional[Money] = None,
        factor: Optional[FhirDecimal] = None,
        points: Optional[FhirDecimal] = None,
        net: Optional[Money] = None,
        payment: Optional[FhirString] = None,
        paymentDate: Optional[FhirDateTime] = None,
        responsible: Optional[
            Reference[
                Union[
                    Organization, Patient, Practitioner, PractitionerRole, RelatedPerson
                ]
            ]
        ] = None,
        recipient: Optional[
            Reference[
                Union[
                    Organization, Patient, Practitioner, PractitionerRole, RelatedPerson
                ]
            ]
        ] = None,
        linkId: Optional[FhirList[FhirString]] = None,
        securityLabelNumber: Optional[FhirList[FhirUnsignedInt]] = None,
    ) -> None:
        """
            Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
        a policy or agreement.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param entityCodeableConcept: None
            :param entityReference: None
            :param identifier: Identifies a Contract Valued Item instance.
            :param effectiveTime: Indicates the time during which this Contract ValuedItem information is
        effective.
            :param quantity: Specifies the units by which the Contract Valued Item is measured or counted,
        and quantifies the countable or measurable Contract Valued Item instances.
            :param unitPrice: A Contract Valued Item unit valuation measure.
            :param factor: A real number that represents a multiplier used in determining the overall
        value of the Contract Valued Item delivered. The concept of a Factor allows
        for a discount or surcharge multiplier to be applied to a monetary amount.
            :param points: An amount that expresses the weighting (based on difficulty, cost and/or
        resource intensiveness) associated with the Contract Valued Item delivered.
        The concept of Points allows for assignment of point values for a Contract
        Valued Item, such that a monetary amount can be assigned to each point.
            :param net: Expresses the product of the Contract Valued Item unitQuantity and the
        unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per
        Point) * factor Number  * points = net Amount. Quantity, factor and points are
        assumed to be 1 if not supplied.
            :param payment: Terms of valuation.
            :param paymentDate: When payment is due.
            :param responsible: Who will make payment.
            :param recipient: Who will receive payment.
            :param linkId: Id  of the clause or question text related to the context of this valuedItem
        in the referenced form or QuestionnaireResponse.
            :param securityLabelNumber: A set of security labels that define which terms are controlled by this
        condition.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            entityCodeableConcept=entityCodeableConcept,
            entityReference=entityReference,
            identifier=identifier,
            effectiveTime=effectiveTime,
            quantity=quantity,
            unitPrice=unitPrice,
            factor=factor,
            points=points,
            net=net,
            payment=payment,
            paymentDate=paymentDate,
            responsible=responsible,
            recipient=recipient,
            linkId=linkId,
            securityLabelNumber=securityLabelNumber,
        )
