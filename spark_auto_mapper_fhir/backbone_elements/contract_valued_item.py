from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.money import Money
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for responsible
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for recipient
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.complex_types.unsigned_int import unsignedInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractValuedItem(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        effectiveTime: Optional[FhirDateTime] = None,
        quantity: Optional[Quantity] = None,
        unitPrice: Optional[Money] = None,
        factor: Optional[decimal] = None,
        points: Optional[decimal] = None,
        net: Optional[Money] = None,
        payment: Optional[FhirString] = None,
        paymentDate: Optional[FhirDateTime] = None,
        responsible: Optional[
            Reference[
                Union[
                    Organization, Patient, Practitioner, PractitionerRole, RelatedPerson
                ]
            ]
        ] = None,
        recipient: Optional[
            Reference[
                Union[
                    Organization, Patient, Practitioner, PractitionerRole, RelatedPerson
                ]
            ]
        ] = None,
        linkId: Optional[FhirList[FhirString]] = None,
        securityLabelNumber: Optional[FhirList[unsignedInt]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param identifier: Identifies a Contract Valued Item instance.
            :param effectiveTime: Indicates the time during which this Contract ValuedItem information is
        effective.
            :param quantity: Specifies the units by which the Contract Valued Item is measured or counted,
        and quantifies the countable or measurable Contract Valued Item instances.
            :param unitPrice: A Contract Valued Item unit valuation measure.
            :param factor: A real number that represents a multiplier used in determining the overall
        value of the Contract Valued Item delivered. The concept of a Factor allows
        for a discount or surcharge multiplier to be applied to a monetary amount.
            :param points: An amount that expresses the weighting (based on difficulty, cost and/or
        resource intensiveness) associated with the Contract Valued Item delivered.
        The concept of Points allows for assignment of point values for a Contract
        Valued Item, such that a monetary amount can be assigned to each point.
            :param net: Expresses the product of the Contract Valued Item unitQuantity and the
        unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per
        Point) * factor Number  * points = net Amount. Quantity, factor and points are
        assumed to be 1 if not supplied.
            :param payment: Terms of valuation.
            :param paymentDate: When payment is due.
            :param responsible: Who will make payment.
            :param recipient: Who will receive payment.
            :param linkId: Id  of the clause or question text related to the context of this valuedItem
        in the referenced form or QuestionnaireResponse.
            :param securityLabelNumber: A set of security labels that define which terms are controlled by this
        condition.
        """
        super().__init__(
            resourceType="ContractValuedItem",
            id_=id_,
            meta=meta,
            extension=extension,
            identifier=identifier,
            effectiveTime=effectiveTime,
            quantity=quantity,
            unitPrice=unitPrice,
            factor=factor,
            points=points,
            net=net,
            payment=payment,
            paymentDate=paymentDate,
            responsible=responsible,
            recipient=recipient,
            linkId=linkId,
            securityLabelNumber=securityLabelNumber,
        )
