from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.backbone_elements.substance_specification_molecular_weight import (
        SubstanceSpecificationMolecularWeight,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSpecificationIsotope(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        name: Optional[CodeableConcept] = None,
        substitution: Optional[CodeableConcept] = None,
        halfLife: Optional[Quantity] = None,
        molecularWeight: Optional[SubstanceSpecificationMolecularWeight] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param identifier: Substance identifier for each non-natural or radioisotope.
            :param name: Substance name for each non-natural or radioisotope.
            :param substitution: The type of isotopic substitution present in a single substance.
            :param halfLife: Half life - for a non-natural nuclide.
            :param molecularWeight: The molecular weight or weight range (for proteins, polymers or nucleic
        acids).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            name=name,
            substitution=substitution,
            halfLife=halfLife,
            molecularWeight=molecularWeight,
        )
