from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # number (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # type_ (NoteType)
    from spark_auto_mapper_fhir.value_sets.note_type import NoteTypeCode

    # text (string)
    # language (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for language
    # Import for CodeableConcept for language
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # End Import for CodeableConcept for language


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitProcessNote(FhirBackboneElementBase):
    """
    ExplanationOfBenefit.ProcessNote
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        number: Optional[FhirPositiveInt] = None,
        type_: Optional[NoteTypeCode] = None,
        text: Optional[FhirString] = None,
        language: Optional[CodeableConcept[CommonLanguagesCode]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param number: A number to uniquely identify a note entry.
        :param type_: The business purpose of the note text.
        :param text: The explanation or description associated with the processing.
        :param language: A code to define the language used in the text of the note.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            number=number,
            type_=type_,
            text=text,
            language=language,
        )
