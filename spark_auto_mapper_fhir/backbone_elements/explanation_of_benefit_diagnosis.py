from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # sequence (positiveInt)
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # onAdmission (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for onAdmission
    from spark_auto_mapper_fhir.value_sets.example_diagnosis_on_admission_codes import (
        ExampleDiagnosisOnAdmissionCodesCode,
    )

    # End Import for CodeableConcept for onAdmission
    # packageCode (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for packageCode
    from spark_auto_mapper_fhir.value_sets.example_diagnosis_related_group_codes import (
        ExampleDiagnosisRelatedGroupCodesCode,
    )

    # End Import for CodeableConcept for packageCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ExplanationOfBenefitDiagnosis(FhirBackboneElementBase):
    """
    ExplanationOfBenefit.Diagnosis
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        sequence: positiveInt,
        type_: Optional[FhirList[CodeableConcept]] = None,
        onAdmission: Optional[
            CodeableConcept[ExampleDiagnosisOnAdmissionCodesCode]
        ] = None,
        packageCode: Optional[
            CodeableConcept[ExampleDiagnosisRelatedGroupCodesCode]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param sequence: A number to uniquely identify diagnosis entries.
            :param type_: When the condition was observed or the relative ranking.
            :param onAdmission: Indication of whether the diagnosis was present on admission to a facility.
            :param packageCode: A package billing code or bundle code used to group products and services to a
        particular health condition (such as heart attack) which is based on a
        predetermined grouping code system.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            sequence=sequence,
            type_=type_,
            onAdmission=onAdmission,
            packageCode=packageCode,
        )
