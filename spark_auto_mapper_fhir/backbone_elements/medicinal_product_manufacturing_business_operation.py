from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # operationType (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for operationType
    # Import for CodeableConcept for operationType
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for operationType
    # authorisationReferenceNumber (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # effectiveDate (dateTime)
    # confidentialityIndicator (CodeableConcept)
    # End Import for References for confidentialityIndicator
    # Import for CodeableConcept for confidentialityIndicator
    # End Import for CodeableConcept for confidentialityIndicator
    # manufacturer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for manufacturer
    from spark_auto_mapper_fhir.resources.organization import Organization

    # regulator (Reference)
    # Imports for References for regulator


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductManufacturingBusinessOperation(FhirBackboneElementBase):
    """
    MedicinalProduct.ManufacturingBusinessOperation
        Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        operationType: Optional[CodeableConcept[GenericTypeCode]] = None,
        authorisationReferenceNumber: Optional[Identifier] = None,
        effectiveDate: Optional[FhirDateTime] = None,
        confidentialityIndicator: Optional[CodeableConcept[GenericTypeCode]] = None,
        manufacturer: Optional[FhirList[Reference[Organization]]] = None,
        regulator: Optional[Reference[Organization]] = None,
    ) -> None:
        """
            Detailed definition of a medicinal product, typically for uses other than
        direct patient care (e.g. regulatory use).

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param operationType: The type of manufacturing operation.
            :param authorisationReferenceNumber: Regulatory authorization reference number.
            :param effectiveDate: Regulatory authorization date.
            :param confidentialityIndicator: To indicate if this proces is commercially confidential.
            :param manufacturer: The manufacturer or establishment associated with the process.
            :param regulator: A regulator which oversees the operation.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            operationType=operationType,
            authorisationReferenceNumber=authorisationReferenceNumber,
            effectiveDate=effectiveDate,
            confidentialityIndicator=confidentialityIndicator,
            manufacturer=manufacturer,
            regulator=regulator,
        )
