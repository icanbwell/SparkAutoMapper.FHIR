from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier
    from spark_auto_mapper_fhir.complex_types.date_time import dateTime
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for manufacturer
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for regulator
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicinalProductManufacturingBusinessOperation(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        operationType: Optional[CodeableConcept ] = None,
        authorisationReferenceNumber: Optional[Identifier ] = None,
        effectiveDate: Optional[FhirDateTime ] = None,
        confidentialityIndicator: Optional[CodeableConcept ] = None,
        manufacturer: Optional[FhirList[Reference [Union[Organization]]]] = None,
        regulator: Optional[Reference [Union[Organization]]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param operationType: The type of manufacturing operation.
        :param authorisationReferenceNumber: Regulatory authorization reference number.
        :param effectiveDate: Regulatory authorization date.
        :param confidentialityIndicator: To indicate if this proces is commercially confidential.
        :param manufacturer: The manufacturer or establishment associated with the process.
        :param regulator: A regulator which oversees the operation.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            operationType=operationType,
            authorisationReferenceNumber=authorisationReferenceNumber,
            effectiveDate=effectiveDate,
            confidentialityIndicator=confidentialityIndicator,
            manufacturer=manufacturer,
            regulator=regulator,
        )
