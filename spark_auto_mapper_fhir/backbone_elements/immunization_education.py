from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.uri import uri


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationEducation(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        documentType: Optional[FhirString] = None,
        reference: Optional[uri] = None,
        publicationDate: Optional[FhirDateTime] = None,
        presentationDate: Optional[FhirDateTime] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param documentType: Identifier of the material presented to the patient.
            :param reference: Reference pointer to the educational material given to the patient if the
        information was on line.
            :param publicationDate: Date the educational material was published.
            :param presentationDate: Date the educational material was given to the patient.
        """
        super().__init__(
            resourceType="ImmunizationEducation",
            id_=id_,
            meta=meta,
            extension=extension,
            documentType=documentType,
            reference=reference,
            publicationDate=publicationDate,
            presentationDate=presentationDate,
        )
