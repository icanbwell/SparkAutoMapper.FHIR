from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code
    # usage (CodeableConcept)
    # End Import for References for usage
    # Import for CodeableConcept for usage
    from spark_auto_mapper_fhir.value_sets.measure_data_usage import (
        MeasureDataUsageCode,
    )

    # End Import for CodeableConcept for usage
    # description (string)
    # criteria (Expression)
    from spark_auto_mapper_fhir.complex_types.expression import Expression


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MeasureSupplementalData(FhirBackboneElementBase):
    """
    Measure.SupplementalData
        The Measure resource provides the definition of a quality measure.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
        usage: Optional[FhirList[CodeableConcept[MeasureDataUsageCode]]] = None,
        description: Optional[FhirString] = None,
        criteria: Expression,
    ) -> None:
        """
            The Measure resource provides the definition of a quality measure.

            :param id_: id of resource
            :param extension: extensions
            :param code: Indicates a meaning for the supplemental data. This can be as simple as a
        unique identifier, or it can establish meaning in a broader context by drawing
        from a terminology, allowing supplemental data to be correlated across
        measures.
            :param usage: An indicator of the intended usage for the supplemental data element.
        Supplemental data indicates the data is additional information requested to
        augment the measure information. Risk adjustment factor indicates the data is
        additional information used to calculate risk adjustment factors when applying
        a risk model to the measure calculation.
            :param description: The human readable description of this supplemental data.
            :param criteria: The criteria for the supplemental data. This is typically the name of a valid
        expression defined within a referenced library, but it may also be a path to a
        specific data element. The criteria defines the data to be returned for this
        element.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            usage=usage,
            description=description,
            criteria=criteria,
        )
