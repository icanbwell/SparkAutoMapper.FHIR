from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # value (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanLimit(FhirBackboneElementBase):
    """
    InsurancePlan.Limit
        Details of a Health Insurance product/plan provided by an organization.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        value: Optional[Quantity] = None,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
    ) -> None:
        """
            Details of a Health Insurance product/plan provided by an organization.

            :param id_: id of resource
            :param extension: extensions
            :param value: The maximum amount of a service item a plan will pay for a covered benefit.
        For examples. wellness visits, or eyeglasses.
            :param code: The specific limit on the benefit.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            value=value,
            code=code,
        )
