from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # display (string)
    # target (ConceptMap.Target)
    from spark_auto_mapper_fhir.backbone_elements.concept_map_target import (
        ConceptMapTarget,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ConceptMapElement(FhirBackboneElementBase):
    """
    ConceptMap.Element
        A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: Optional[code] = None,
        display: Optional[FhirString] = None,
        target: Optional[FhirList[ConceptMapTarget]] = None,
    ) -> None:
        """
            A statement of relationships from one set of concepts to one or more other
        concepts - either concepts in code systems, or data element/data element
        concepts, or classes in class models.

            :param id_: id of resource
            :param extension: extensions
            :param code: Identity (code or path) or the element/item being mapped.
            :param display: The display for the code. The display is only provided to help editors when
        editing the concept map.
            :param target: A concept from the target value set that this concept maps to.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            display=display,
            target=target,
        )
