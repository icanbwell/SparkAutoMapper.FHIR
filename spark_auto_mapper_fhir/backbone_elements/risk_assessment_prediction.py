from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # outcome (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for outcome
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for outcome
    # qualitativeRisk (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for qualitativeRisk
    from spark_auto_mapper_fhir.value_sets.risk_probability import RiskProbabilityCode

    # End Import for CodeableConcept for qualitativeRisk
    # relativeRisk (decimal)
    from spark_auto_mapper_fhir.complex_types.decimal import decimal

    # rationale (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class RiskAssessmentPrediction(FhirBackboneElementBase):
    """
    RiskAssessment.Prediction
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        outcome: Optional[CodeableConcept[GenericTypeCode]] = None,
        qualitativeRisk: Optional[CodeableConcept[RiskProbabilityCode]] = None,
        relativeRisk: Optional[decimal] = None,
        rationale: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param outcome: One of the potential outcomes for the patient (e.g. remission, death,  a
        particular condition).
            :param qualitativeRisk: Indicates how likely the outcome is (in the specified timeframe), expressed as
        a qualitative value (e.g. low, medium, or high).
            :param relativeRisk: Indicates the risk for this particular subject (with their specific
        characteristics) divided by the risk of the population in general.  (Numbers
        greater than 1 = higher risk than the population, numbers less than 1 = lower
        risk.).
            :param rationale: Additional information explaining the basis for the prediction.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            outcome=outcome,
            qualitativeRisk=qualitativeRisk,
            relativeRisk=relativeRisk,
            rationale=rationale,
        )
