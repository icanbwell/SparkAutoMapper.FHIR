from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # who (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for who
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.primary_source_type import (
        Primary_source_typeCode,
    )

    # End Import for CodeableConcept for type_
    # communicationMethod (CodeableConcept)
    # End Import for References for communicationMethod
    # Import for CodeableConcept for communicationMethod
    from spark_auto_mapper_fhir.value_sets.verificationresult_communication_method import (
        Verificationresult_communication_methodCode,
    )

    # End Import for CodeableConcept for communicationMethod
    # validationStatus (CodeableConcept)
    # End Import for References for validationStatus
    # Import for CodeableConcept for validationStatus
    from spark_auto_mapper_fhir.value_sets.validation_status import (
        Validation_statusCode,
    )

    # End Import for CodeableConcept for validationStatus
    # validationDate (dateTime)
    # canPushUpdates (CodeableConcept)
    # End Import for References for canPushUpdates
    # Import for CodeableConcept for canPushUpdates
    from spark_auto_mapper_fhir.value_sets.can_push_updates import Can_push_updatesCode

    # End Import for CodeableConcept for canPushUpdates
    # pushTypeAvailable (CodeableConcept)
    # End Import for References for pushTypeAvailable
    # Import for CodeableConcept for pushTypeAvailable
    from spark_auto_mapper_fhir.value_sets.push_type_available import (
        Push_type_availableCode,
    )

    # End Import for CodeableConcept for pushTypeAvailable


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResultPrimarySource(FhirBackboneElementBase):
    """
    VerificationResult.PrimarySource
        Describes validation requirements, source(s), status and dates for one or more elements.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        who: Optional[
            Reference[Union[Organization, Practitioner, PractitionerRole]]
        ] = None,
        type_: Optional[FhirList[CodeableConcept[Primary_source_typeCode]]] = None,
        communicationMethod: Optional[
            FhirList[CodeableConcept[Verificationresult_communication_methodCode]]
        ] = None,
        validationStatus: Optional[CodeableConcept[Validation_statusCode]] = None,
        validationDate: Optional[FhirDateTime] = None,
        canPushUpdates: Optional[CodeableConcept[Can_push_updatesCode]] = None,
        pushTypeAvailable: Optional[
            FhirList[CodeableConcept[Push_type_availableCode]]
        ] = None,
    ) -> None:
        """
            Describes validation requirements, source(s), status and dates for one or more
        elements.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param who: Reference to the primary source.
            :param type_: Type of primary source (License Board; Primary Education; Continuing
        Education; Postal Service; Relationship owner; Registration Authority; legal
        source; issuing source; authoritative source).
            :param communicationMethod: Method for communicating with the primary source (manual; API; Push).
            :param validationStatus: Status of the validation of the target against the primary source (successful;
        failed; unknown).
            :param validationDate: When the target was validated against the primary source.
            :param canPushUpdates: Ability of the primary source to push updates/alerts (yes; no; undetermined).
            :param pushTypeAvailable: Type of alerts/updates the primary source can send (specific requested
        changes; any changes; as defined by source).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            who=who,
            type_=type_,
            communicationMethod=communicationMethod,
            validationStatus=validationStatus,
            validationDate=validationDate,
            canPushUpdates=canPushUpdates,
            pushTypeAvailable=pushTypeAvailable,
        )
