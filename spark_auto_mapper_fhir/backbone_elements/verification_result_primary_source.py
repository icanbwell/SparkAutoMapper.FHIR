from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference
    # Imports for References for who
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.date_time import dateTime
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResultPrimarySource(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        who: Optional[Reference[Union[Organization, Practitioner, PractitionerRole]]] = None,
        type: Optional[FhirList[CodeableConcept]] = None,
        communicationMethod: Optional[FhirList[CodeableConcept]] = None,
        validationStatus: Optional[CodeableConcept] = None,
        validationDate: Optional[dateTime] = None,
        canPushUpdates: Optional[CodeableConcept] = None,
        pushTypeAvailable: Optional[FhirList[CodeableConcept]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param who: Reference to the primary source.
        :param type: Type of primary source (License Board; Primary Education; Continuing
    Education; Postal Service; Relationship owner; Registration Authority; legal
    source; issuing source; authoritative source).
        :param communicationMethod: Method for communicating with the primary source (manual; API; Push).
        :param validationStatus: Status of the validation of the target against the primary source (successful;
    failed; unknown).
        :param validationDate: When the target was validated against the primary source.
        :param canPushUpdates: Ability of the primary source to push updates/alerts (yes; no; undetermined).
        :param pushTypeAvailable: Type of alerts/updates the primary source can send (specific requested
    changes; any changes; as defined by source).
        """
        super().__init__(
            resourceType="VerificationResultPrimarySource",
            id_=id_,
            meta=meta,
            extension=extension,
            who=who,
            type=type,
            communicationMethod=communicationMethod,
            validationStatus=validationStatus,
            validationDate=validationDate,
            canPushUpdates=canPushUpdates,
            pushTypeAvailable=pushTypeAvailable,
        )
