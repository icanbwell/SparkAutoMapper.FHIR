from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # who (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for who
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole

    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.primary_source_type import (
        Primary_source_typeCode,
    )

    # End Import for CodeableConcept for type_
    # communicationMethod (CodeableConcept)
    # End Import for References for communicationMethod
    # Import for CodeableConcept for communicationMethod
    from spark_auto_mapper_fhir.value_sets.verificationresult_communication_method import (
        Verificationresult_communication_methodCode,
    )

    # End Import for CodeableConcept for communicationMethod
    # validationStatus (CodeableConcept)
    # End Import for References for validationStatus
    # Import for CodeableConcept for validationStatus
    from spark_auto_mapper_fhir.value_sets.validation_status import (
        Validation_statusCode,
    )

    # End Import for CodeableConcept for validationStatus
    # validationDate (dateTime)
    # canPushUpdates (CodeableConcept)
    # End Import for References for canPushUpdates
    # Import for CodeableConcept for canPushUpdates
    from spark_auto_mapper_fhir.value_sets.can_push_updates import Can_push_updatesCode

    # End Import for CodeableConcept for canPushUpdates
    # pushTypeAvailable (CodeableConcept)
    # End Import for References for pushTypeAvailable
    # Import for CodeableConcept for pushTypeAvailable
    from spark_auto_mapper_fhir.value_sets.push_type_available import (
        Push_type_availableCode,
    )

    # End Import for CodeableConcept for pushTypeAvailable


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class VerificationResultPrimarySource(FhirBackboneElementBase):
    """
    VerificationResult.PrimarySource
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        who: Optional[
            Reference[Union[Organization, Practitioner, PractitionerRole]]
        ] = None,
        type_: Optional[FhirList[CodeableConcept[Primary_source_typeCode]]] = None,
        communicationMethod: Optional[
            FhirList[CodeableConcept[Verificationresult_communication_methodCode]]
        ] = None,
        validationStatus: Optional[CodeableConcept[Validation_statusCode]] = None,
        validationDate: Optional[FhirDateTime] = None,
        canPushUpdates: Optional[CodeableConcept[Can_push_updatesCode]] = None,
        pushTypeAvailable: Optional[
            FhirList[CodeableConcept[Push_type_availableCode]]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param who: Reference to the primary source.
            :param type_: Type of primary source (License Board; Primary Education; Continuing
        Education; Postal Service; Relationship owner; Registration Authority; legal
        source; issuing source; authoritative source).
            :param communicationMethod: Method for communicating with the primary source (manual; API; Push).
            :param validationStatus: Status of the validation of the target against the primary source (successful;
        failed; unknown).
            :param validationDate: When the target was validated against the primary source.
            :param canPushUpdates: Ability of the primary source to push updates/alerts (yes; no; undetermined).
            :param pushTypeAvailable: Type of alerts/updates the primary source can send (specific requested
        changes; any changes; as defined by source).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            who=who,
            type_=type_,
            communicationMethod=communicationMethod,
            validationStatus=validationStatus,
            validationDate=validationDate,
            canPushUpdates=canPushUpdates,
            pushTypeAvailable=pushTypeAvailable,
        )
