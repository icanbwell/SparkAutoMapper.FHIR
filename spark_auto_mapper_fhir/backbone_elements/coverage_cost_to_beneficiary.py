from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.coverage_copay_type_codes import (
        CoverageCopayTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # valueQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # valueMoney (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # exception (Coverage.Exception)
    from spark_auto_mapper_fhir.backbone_elements.coverage_exception import (
        CoverageException,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CoverageCostToBeneficiary(FhirBackboneElementBase):
    """
    Coverage.CostToBeneficiary
        Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[CodeableConcept[CoverageCopayTypeCodesCode]] = None,
        valueQuantity: Optional[Quantity] = None,
        valueMoney: Optional[Money] = None,
        exception: Optional[FhirList[CoverageException]] = None,
    ) -> None:
        """
            Financial instrument which may be used to reimburse or pay for health care
        products and services. Includes both insurance and self-payment.

            :param id_: id of resource
            :param extension: extensions
            :param type_: The category of patient centric costs associated with treatment.
            :param valueQuantity: None
            :param valueMoney: None
            :param exception: A suite of codes indicating exceptions or reductions to patient costs and
        their effective periods.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            valueQuantity=valueQuantity,
            valueMoney=valueMoney,
            exception=exception,
        )
