from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # description (string)
    # language (string)
    # expression (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ChargeItemDefinitionApplicability(FhirBackboneElementBase):
    """
    ChargeItemDefinition.Applicability
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        description: Optional[FhirString] = None,
        language: Optional[FhirString] = None,
        expression: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param description: A brief, natural language description of the condition that effectively
        communicates the intended semantics.
            :param language: The media type of the language for the expression, e.g. "text/cql" for
        Clinical Query Language expressions or "text/fhirpath" for FHIRPath
        expressions.
            :param expression: An expression that returns true or false, indicating whether the condition is
        satisfied. When using FHIRPath expressions, the %context environment variable
        must be replaced at runtime with the ChargeItem resource to which this
        definition is applied.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            description=description,
            language=language,
            expression=expression,
        )
