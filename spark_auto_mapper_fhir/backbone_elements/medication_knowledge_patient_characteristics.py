from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # value (string)
    # characteristicCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for characteristicCodeableConcept
    # Import for CodeableConcept for characteristicCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for characteristicCodeableConcept
    # characteristicQuantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgePatientCharacteristics(FhirBackboneElementBase):
    """
    MedicationKnowledge.PatientCharacteristics
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        value: Optional[FhirList[FhirString]] = None,
        characteristicCodeableConcept: Optional[
            CodeableConcept[GenericTypeCode]
        ] = None,
        characteristicQuantity: Optional[Quantity] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param value: The specific characteristic (e.g. height, weight, gender, etc.).
        :param characteristicCodeableConcept: None
        :param characteristicQuantity: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            value=value,
            characteristicCodeableConcept=characteristicCodeableConcept,
            characteristicQuantity=characteristicQuantity,
        )
