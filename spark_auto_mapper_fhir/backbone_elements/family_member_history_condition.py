from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.boolean import boolean
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class FamilyMemberHistoryCondition(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept,
        outcome: Optional[CodeableConcept] = None,
        contributedToDeath: Optional[boolean] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param code: The actual condition specified. Could be a coded condition (like MI or
    Diabetes) or a less specific string like 'cancer' depending on how much is
    known about the condition and the capabilities of the creating system.
        :param outcome: Indicates what happened following the condition.  If the condition resulted in
    death, deceased date is captured on the relation.
        :param contributedToDeath: This condition contributed to the cause of death of the related person. If
    contributedToDeath is not populated, then it is unknown.
        :param note: An area where general notes can be placed about this specific condition.
        """
        super().__init__(
            resourceType="FamilyMemberHistoryCondition",
            id_=id_,
            meta=meta,
            extension=extension,
            code=code,
            outcome=outcome,
            contributedToDeath=contributedToDeath,
            note=note,
        )
