from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.condition_or__problem_or__diagnosis_codes import (
        Condition_or_Problem_or_DiagnosisCodesCode,
    )

    # End Import for CodeableConcept for code
    # outcome (CodeableConcept)
    # End Import for References for outcome
    # Import for CodeableConcept for outcome
    from spark_auto_mapper_fhir.value_sets.condition_outcome_codes import (
        ConditionOutcomeCodesCode,
    )

    # End Import for CodeableConcept for outcome
    # contributedToDeath (boolean)
    # onsetAge (Age)
    from spark_auto_mapper_fhir.complex_types.age import Age

    # onsetRange (Range)
    from spark_auto_mapper_fhir.complex_types.range import Range

    # onsetPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # onsetString (string)
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class FamilyMemberHistoryCondition(FhirBackboneElementBase):
    """
    FamilyMemberHistory.Condition
        Significant health conditions for a person related to the patient relevant in the context of care for the patient.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        code: CodeableConcept[Condition_or_Problem_or_DiagnosisCodesCode],
        outcome: Optional[CodeableConcept[ConditionOutcomeCodesCode]] = None,
        contributedToDeath: Optional[FhirBoolean] = None,
        onsetAge: Optional[Age] = None,
        onsetRange: Optional[Range] = None,
        onsetPeriod: Optional[Period] = None,
        onsetString: Optional[FhirString] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            Significant health conditions for a person related to the patient relevant in
        the context of care for the patient.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param code: The actual condition specified. Could be a coded condition (like MI or
        Diabetes) or a less specific string like 'cancer' depending on how much is
        known about the condition and the capabilities of the creating system.
            :param outcome: Indicates what happened following the condition.  If the condition resulted in
        death, deceased date is captured on the relation.
            :param contributedToDeath: This condition contributed to the cause of death of the related person. If
        contributedToDeath is not populated, then it is unknown.
            :param onsetAge: None
            :param onsetRange: None
            :param onsetPeriod: None
            :param onsetString: None
            :param note: An area where general notes can be placed about this specific condition.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            code=code,
            outcome=outcome,
            contributedToDeath=contributedToDeath,
            onsetAge=onsetAge,
            onsetRange=onsetRange,
            onsetPeriod=onsetPeriod,
            onsetString=onsetString,
            note=note,
        )
