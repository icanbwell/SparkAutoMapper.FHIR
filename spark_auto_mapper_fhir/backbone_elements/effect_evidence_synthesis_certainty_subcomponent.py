from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.certainty_subcomponent_type import (
        CertaintySubcomponentTypeCode,
    )

    # End Import for CodeableConcept for type_
    # rating (CodeableConcept)
    # End Import for References for rating
    # Import for CodeableConcept for rating
    from spark_auto_mapper_fhir.value_sets.certainty_subcomponent_rating import (
        CertaintySubcomponentRatingCode,
    )

    # End Import for CodeableConcept for rating
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EffectEvidenceSynthesisCertaintySubcomponent(FhirBackboneElementBase):
    """
    EffectEvidenceSynthesis.CertaintySubcomponent
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[CodeableConcept[CertaintySubcomponentTypeCode]] = None,
        rating: Optional[
            FhirList[CodeableConcept[CertaintySubcomponentRatingCode]]
        ] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param type_: Type of subcomponent of certainty rating.
        :param rating: A rating of a subcomponent of rating certainty.
        :param note: A human-readable string to clarify or explain concepts about the resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            rating=rating,
            note=note,
        )
