from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # type_ (SubscriptionChannelType)
    from spark_auto_mapper_fhir.value_sets.subscription_channel_type import (
        SubscriptionChannelTypeCode,
    )

    # endpoint (url)
    from spark_auto_mapper_fhir.fhir_types.url import FhirUrl

    # payload (Mime Types)
    from spark_auto_mapper_fhir.value_sets.mime_types import MimeTypesCode

    # header (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubscriptionChannel(FhirBackboneElementBase):
    """
    Subscription.Channel
        The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        type_: SubscriptionChannelTypeCode,
        endpoint: Optional[FhirUrl] = None,
        payload: Optional[MimeTypesCode] = None,
        header: Optional[FhirList[FhirString]] = None,
    ) -> None:
        """
            The subscription resource is used to define a push-based subscription from a
        server to another system. Once a subscription is registered with the server,
        the server checks every resource that is created or updated, and if the
        resource matches the given criteria, it sends a message on the defined
        "channel" so that another system can take an appropriate action.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param type_: The type of channel to send notifications on.
            :param endpoint: The url that describes the actual end-point to send messages to.
            :param payload: The mime type to send the payload in - either application/fhir+xml, or
        application/fhir+json. If the payload is not present, then there is no payload
        in the notification, just a notification. The mime type "text/plain" may also
        be used for Email and SMS subscriptions.
            :param header: Additional headers / information to send as part of the notification.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            type_=type_,
            endpoint=endpoint,
            payload=payload,
            header=header,
        )
