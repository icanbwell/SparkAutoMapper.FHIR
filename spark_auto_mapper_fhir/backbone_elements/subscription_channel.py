from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.subscription_channel_type import SubscriptionChannelType
    from spark_auto_mapper_fhir.complex_types.url import url
    from spark_auto_mapper_fhir.complex_types.code import code
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubscriptionChannel(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: SubscriptionChannelType,
        endpoint: Optional[url] = None,
        payload: Optional[code] = None,
        header: Optional[FhirList[string]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param type_: The type of channel to send notifications on.
        :param endpoint: The url that describes the actual end-point to send messages to.
        :param payload: The mime type to send the payload in - either application/fhir+xml, or
    application/fhir+json. If the payload is not present, then there is no payload
    in the notification, just a notification. The mime type "text/plain" may also
    be used for Email and SMS subscriptions.
        :param header: Additional headers / information to send as part of the notification.
        """
        super().__init__(
            resourceType="SubscriptionChannel",
            id_=id_,
            meta=meta,
            extension=extension,
            type_=type_,
            endpoint=endpoint,
            payload=payload,
            header=header,
        )
