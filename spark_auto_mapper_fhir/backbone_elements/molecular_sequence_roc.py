from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # score (integer)
    # numTP (integer)
    # numFP (integer)
    # numFN (integer)
    # precision (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # sensitivity (decimal)
    # fMeasure (decimal)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequenceRoc(FhirBackboneElementBase):
    """
    MolecularSequence.Roc
        Raw data describing a biological sequence.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        score: Optional[FhirList[FhirInteger]] = None,
        numTP: Optional[FhirList[FhirInteger]] = None,
        numFP: Optional[FhirList[FhirInteger]] = None,
        numFN: Optional[FhirList[FhirInteger]] = None,
        precision: Optional[FhirList[FhirDecimal]] = None,
        sensitivity: Optional[FhirList[FhirDecimal]] = None,
        fMeasure: Optional[FhirList[FhirDecimal]] = None,
    ) -> None:
        """
            Raw data describing a biological sequence.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param score: Invidual data point representing the GQ (genotype quality) score threshold.
            :param numTP: The number of true positives if the GQ score threshold was set to "score"
        field value.
            :param numFP: The number of false positives if the GQ score threshold was set to "score"
        field value.
            :param numFN: The number of false negatives if the GQ score threshold was set to "score"
        field value.
            :param precision: Calculated precision if the GQ score threshold was set to "score" field value.
            :param sensitivity: Calculated sensitivity if the GQ score threshold was set to "score" field
        value.
            :param fMeasure: Calculated fScore if the GQ score threshold was set to "score" field value.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            score=score,
            numTP=numTP,
            numFP=numFP,
            numFN=numFN,
            precision=precision,
            sensitivity=sensitivity,
            fMeasure=fMeasure,
        )
