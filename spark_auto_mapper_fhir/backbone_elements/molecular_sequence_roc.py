from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.decimal import decimal
    from spark_auto_mapper_fhir.complex_types.decimal import decimal


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MolecularSequenceRoc(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        score: Optional[FhirList[integer]] = None,
        numTP: Optional[FhirList[integer]] = None,
        numFP: Optional[FhirList[integer]] = None,
        numFN: Optional[FhirList[integer]] = None,
        precision: Optional[FhirList[decimal]] = None,
        sensitivity: Optional[FhirList[decimal]] = None,
        fMeasure: Optional[FhirList[decimal]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param score: Invidual data point representing the GQ (genotype quality) score threshold.
            :param numTP: The number of true positives if the GQ score threshold was set to "score"
        field value.
            :param numFP: The number of false positives if the GQ score threshold was set to "score"
        field value.
            :param numFN: The number of false negatives if the GQ score threshold was set to "score"
        field value.
            :param precision: Calculated precision if the GQ score threshold was set to "score" field value.
            :param sensitivity: Calculated sensitivity if the GQ score threshold was set to "score" field
        value.
            :param fMeasure: Calculated fScore if the GQ score threshold was set to "score" field value.
        """
        super().__init__(
            resourceType="MolecularSequenceRoc",
            id_=id_,
            meta=meta,
            extension=extension,
            score=score,
            numTP=numTP,
            numFP=numFP,
            numFN=numFN,
            precision=precision,
            sensitivity=sensitivity,
            fMeasure=fMeasure,
        )
