from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for cap
    from spark_auto_mapper_fhir.value_sets.containercap import Containercap

    # End Import for CodeableConcept for cap
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity
    from spark_auto_mapper_fhir.backbone_elements.specimen_definition_additive import (
        SpecimenDefinitionAdditive,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SpecimenDefinitionContainer(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        material: Optional[CodeableConcept] = None,
        type: Optional[CodeableConcept] = None,
        cap: Optional[CodeableConcept[Containercap]] = None,
        description: Optional[FhirString] = None,
        capacity: Optional[Quantity] = None,
        additive: Optional[FhirList[SpecimenDefinitionAdditive]] = None,
        preparation: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param material: The type of material of the container.
            :param type: The type of container used to contain this kind of specimen.
            :param cap: Color of container cap.
            :param description: The textual description of the kind of container.
            :param capacity: The capacity (volume or other measure) of this kind of container.
            :param additive: Substance introduced in the kind of container to preserve, maintain or enhance
        the specimen. Examples: Formalin, Citrate, EDTA.
            :param preparation: Special processing that should be applied to the container for this kind of
        specimen.
        """
        super().__init__(
            resourceType="SpecimenDefinitionContainer",
            id_=id_,
            meta=meta,
            extension=extension,
            material=material,
            type=type,
            cap=cap,
            description=description,
            capacity=capacity,
            additive=additive,
            preparation=preparation,
        )
