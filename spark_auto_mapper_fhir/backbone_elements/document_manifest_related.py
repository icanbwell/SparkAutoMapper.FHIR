from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.resources.resource import Resource

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # identifier (Identifier)
    from spark_auto_mapper_fhir.complex_types.identifier import Identifier

    # ref (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for ref


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class DocumentManifestRelated(FhirBackboneElementBase):
    """
    DocumentManifest.Related
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        identifier: Optional[Identifier] = None,
        ref: Optional[Reference[Union[Resource]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param identifier: Related identifier to this DocumentManifest.  For example, Order numbers,
        accession numbers, XDW workflow numbers.
            :param ref: Related Resource to this DocumentManifest. For example, Order, ServiceRequest,
        Procedure, EligibilityRequest, etc.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            identifier=identifier,
            ref=ref,
        )
