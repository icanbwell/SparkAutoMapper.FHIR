from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # kingdom (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # phylum (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # class_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # order (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceSourceMaterialOrganismGeneral(FhirBackboneElementBase):
    """
    SubstanceSourceMaterial.OrganismGeneral
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        kingdom: Optional[CodeableConcept] = None,
        phylum: Optional[CodeableConcept] = None,
        class_: Optional[CodeableConcept] = None,
        order: Optional[CodeableConcept] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param kingdom: The kingdom of an organism shall be specified.
        :param phylum: The phylum of an organism shall be specified.
        :param class_: The class of an organism shall be specified.
        :param order: The order of an organism shall be specified,.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            kingdom=kingdom,
            phylum=phylum,
            class_=class_,
            order=order,
        )
