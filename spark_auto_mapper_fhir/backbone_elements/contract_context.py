from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reference
    from spark_auto_mapper_fhir.resources.resource import Resource
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.string import string


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ContractContext(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        reference: Optional[Reference[Union[Resource]]] = None,
        code: Optional[FhirList[CodeableConcept]] = None,
        text: Optional[string] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param reference: Asset context reference may include the creator, custodian, or owning Person
        or Organization (e.g., bank, repository),  location held, e.g., building,
        jurisdiction.
            :param code: Coded representation of the context generally or of the Referenced entity,
        such as the asset holder type or location.
            :param text: Context description.
        """
        super().__init__(
            resourceType="ContractContext",
            id_=id_,
            meta=meta,
            extension=extension,
            reference=reference,
            code=code,
            text=text,
        )
