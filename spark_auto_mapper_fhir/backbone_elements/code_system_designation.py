from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # language (CommonLanguages)
    from spark_auto_mapper_fhir.value_sets.common_languages import CommonLanguagesCode

    # use (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for use
    # Import for CodeableConcept for use
    from spark_auto_mapper_fhir.value_sets.designation_use import DesignationUseCode

    # End Import for CodeableConcept for use
    # value (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CodeSystemDesignation(FhirBackboneElementBase):
    """
    CodeSystem.Designation
        The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        language: Optional[CommonLanguagesCode] = None,
        use: Optional[Coding[DesignationUseCode]] = None,
        value: FhirString,
    ) -> None:
        """
            The CodeSystem resource is used to declare the existence of and describe a
        code system or code system supplement and its key properties, and optionally
        define a part or all of its content.

            :param id_: id of resource
            :param extension: extensions
            :param language: The language this designation is defined for.
            :param use: A code that details how this designation would be used.
            :param value: The text value for this designation.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            language=language,
            use=use,
            value=value,
        )
