from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.medication_knowledge_package_type_codes import (
        MedicationKnowledgePackageTypeCodesCode,
    )

    # End Import for CodeableConcept for type_
    # quantity (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgePackaging(FhirBackboneElementBase):
    """
    MedicationKnowledge.Packaging
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[
            CodeableConcept[MedicationKnowledgePackageTypeCodesCode]
        ] = None,
        quantity: Optional[Quantity] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: A code that defines the specific type of packaging that the medication can be
        found in (e.g. blister sleeve, tube, bottle).
            :param quantity: The number of product units the package would contain if fully loaded.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            quantity=quantity,
        )
