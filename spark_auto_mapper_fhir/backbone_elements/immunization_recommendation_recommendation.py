from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for forecastStatus
    from spark_auto_mapper_fhir.value_sets.immunizationrecommendationstatuscodes import (
        Immunizationrecommendationstatuscodes,
    )

    # End Import for CodeableConcept for forecastStatus
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.backbone_elements.immunization_recommendation_date_criterion import (
        ImmunizationRecommendationDateCriterion,
    )
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for supportingImmunization
    from spark_auto_mapper_fhir.resources.immunization import Immunization
    from spark_auto_mapper_fhir.resources.immunization_evaluation import (
        ImmunizationEvaluation,
    )
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for supportingPatientInformation
    from spark_auto_mapper_fhir.resources.resource import Resource


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationRecommendationRecommendation(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        vaccineCode: Optional[FhirList[CodeableConcept]] = None,
        targetDisease: Optional[CodeableConcept] = None,
        contraindicatedVaccineCode: Optional[FhirList[CodeableConcept]] = None,
        forecastStatus: CodeableConcept[Immunizationrecommendationstatuscodes],
        forecastReason: Optional[FhirList[CodeableConcept]] = None,
        dateCriterion: Optional[
            FhirList[ImmunizationRecommendationDateCriterion]
        ] = None,
        description: Optional[FhirString] = None,
        series: Optional[FhirString] = None,
        supportingImmunization: Optional[
            FhirList[Reference[Union[Immunization, ImmunizationEvaluation]]]
        ] = None,
        supportingPatientInformation: Optional[
            FhirList[Reference[Union[Resource]]]
        ] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param vaccineCode: Vaccine(s) or vaccine group that pertain to the recommendation.
            :param targetDisease: The targeted disease for the recommendation.
            :param contraindicatedVaccineCode: Vaccine(s) which should not be used to fulfill the recommendation.
            :param forecastStatus: Indicates the patient status with respect to the path to immunity for the
        target disease.
            :param forecastReason: The reason for the assigned forecast status.
            :param dateCriterion: Vaccine date recommendations.  For example, earliest date to administer,
        latest date to administer, etc.
            :param description: Contains the description about the protocol under which the vaccine was
        administered.
            :param series: One possible path to achieve presumed immunity against a disease - within the
        context of an authority.
            :param supportingImmunization: Immunization event history and/or evaluation that supports the status and
        recommendation.
            :param supportingPatientInformation: Patient Information that supports the status and recommendation.  This
        includes patient observations, adverse reactions and allergy/intolerance
        information.
        """
        super().__init__(
            resourceType="ImmunizationRecommendationRecommendation",
            id_=id_,
            meta=meta,
            extension=extension,
            vaccineCode=vaccineCode,
            targetDisease=targetDisease,
            contraindicatedVaccineCode=contraindicatedVaccineCode,
            forecastStatus=forecastStatus,
            forecastReason=forecastReason,
            dateCriterion=dateCriterion,
            description=description,
            series=series,
            supportingImmunization=supportingImmunization,
            supportingPatientInformation=supportingPatientInformation,
        )
