from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # longitude (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # latitude (decimal)
    # altitude (decimal)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class LocationPosition(FhirBackboneElementBase):
    """
    Location.Position
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        longitude: FhirDecimal,
        latitude: FhirDecimal,
        altitude: Optional[FhirDecimal] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param longitude: Longitude. The value domain and the interpretation are the same as for the
        text of the longitude element in KML (see notes below).
            :param latitude: Latitude. The value domain and the interpretation are the same as for the text
        of the latitude element in KML (see notes below).
            :param altitude: Altitude. The value domain and the interpretation are the same as for the text
        of the altitude element in KML (see notes below).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            longitude=longitude,
            latitude=latitude,
            altitude=altitude,
        )
