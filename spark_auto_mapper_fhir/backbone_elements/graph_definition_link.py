from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.integer import integer
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.complex_types.string import string
    from spark_auto_mapper_fhir.backbone_elements.graph_definition_target import GraphDefinitionTarget


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class GraphDefinitionLink(FhirBackboneElementBase):
    """
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        path: Optional[string] = None,
        sliceName: Optional[string] = None,
        min: Optional[integer] = None,
        max: Optional[string] = None,
        description: Optional[string] = None,
        target: Optional[FhirList[GraphDefinitionTarget]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param path: A FHIR expression that identifies one of FHIR References to other resources.
        :param sliceName: Which slice (if profiled).
        :param min: Minimum occurrences for this link.
        :param max: Maximum occurrences for this link.
        :param description: Information about why this link is of interest in this graph definition.
        :param target: Potential target for the link.
        """
        super().__init__(
            resourceType="GraphDefinitionLink",
            id_=id_,
            meta=meta,
            extension=extension,
            path=path,
            sliceName=sliceName,
            min=min,
            max=max,
            description=description,
            target=target,
        )
