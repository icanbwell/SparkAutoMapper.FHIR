from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanCost(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type: CodeableConcept,
        applicability: Optional[CodeableConcept] = None,
        qualifiers: Optional[FhirList[CodeableConcept]] = None,
        value: Optional[Quantity] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param meta: Meta
            :param extension: extensions
            :param type: Type of cost (copay; individual cap; family cap; coinsurance; deductible).
            :param applicability: Whether the cost applies to in-network or out-of-network providers (in-
        network; out-of-network; other).
            :param qualifiers: Additional information about the cost, such as information about funding
        sources (e.g. HSA, HRA, FSA, RRA).
            :param value: The actual cost value. (some of the costs may be represented as percentages
        rather than currency, e.g. 10% coinsurance).
        """
        super().__init__(
            resourceType="InsurancePlanCost",
            id_=id_,
            meta=meta,
            extension=extension,
            type=type,
            applicability=applicability,
            qualifiers=qualifiers,
            value=value,
        )
