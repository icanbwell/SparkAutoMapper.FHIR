from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # name (id)
    # extends (id)
    # typeMode (StructureMapGroupTypeMode)
    from spark_auto_mapper_fhir.value_sets.structure_map_group_type_mode import (
        StructureMapGroupTypeModeCode,
    )

    # documentation (string)
    # input (StructureMap.Input)
    from spark_auto_mapper_fhir.backbone_elements.structure_map_input import (
        StructureMapInput,
    )

    # rule (StructureMap.Rule)
    from spark_auto_mapper_fhir.backbone_elements.structure_map_rule import (
        StructureMapRule,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapGroup(FhirBackboneElementBase):
    """
    StructureMap.Group
        A Map of relationships between 2 structures that can be used to transform data.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        name: FhirId,
        extends: Optional[FhirId] = None,
        typeMode: StructureMapGroupTypeModeCode,
        documentation: Optional[FhirString] = None,
        input: FhirList[StructureMapInput],
        rule: FhirList[StructureMapRule],
    ) -> None:
        """
            A Map of relationships between 2 structures that can be used to transform
        data.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param name: A unique name for the group for the convenience of human readers.
            :param extends: Another group that this group adds rules to.
            :param typeMode: If this is the default rule set to apply for the source type or this
        combination of types.
            :param documentation: Additional supporting documentation that explains the purpose of the group and
        the types of mappings within it.
            :param input: A name assigned to an instance of data. The instance must be provided when the
        mapping is invoked.
            :param rule: Transform Rule from source to target.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            name=name,
            extends=extends,
            typeMode=typeMode,
            documentation=documentation,
            input=input,
            rule=rule,
        )
