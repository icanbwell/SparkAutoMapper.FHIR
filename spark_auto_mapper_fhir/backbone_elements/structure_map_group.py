from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # name (id)
    from spark_auto_mapper_fhir.complex_types.id import id

    # extends (id)
    # typeMode (StructureMapGroupTypeMode)
    from spark_auto_mapper_fhir.value_sets.structure_map_group_type_mode import (
        StructureMapGroupTypeModeCode,
    )

    # documentation (string)
    # input (StructureMap.Input)
    from spark_auto_mapper_fhir.backbone_elements.structure_map_input import (
        StructureMapInput,
    )

    # rule (StructureMap.Rule)
    from spark_auto_mapper_fhir.backbone_elements.structure_map_rule import (
        StructureMapRule,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class StructureMapGroup(FhirBackboneElementBase):
    """
    StructureMap.Group
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        name: id,
        extends: Optional[id] = None,
        typeMode: StructureMapGroupTypeModeCode,
        documentation: Optional[FhirString] = None,
        input: FhirList[StructureMapInput],
        rule: FhirList[StructureMapRule],
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param name: A unique name for the group for the convenience of human readers.
            :param extends: Another group that this group adds rules to.
            :param typeMode: If this is the default rule set to apply for the source type or this
        combination of types.
            :param documentation: Additional supporting documentation that explains the purpose of the group and
        the types of mappings within it.
            :param input: A name assigned to an instance of data. The instance must be provided when the
        mapping is invoked.
            :param rule: Transform Rule from source to target.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            name=name,
            extends=extends,
            typeMode=typeMode,
            documentation=documentation,
            input=input,
            rule=rule,
        )
