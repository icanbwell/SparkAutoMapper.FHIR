from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (string)
    # valueString (string)
    # valueBase64Binary (base64Binary)
    from spark_auto_mapper_fhir.complex_types.base64_binary import base64Binary


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AuditEventDetail(FhirBackboneElementBase):
    """
    AuditEvent.Detail
        A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: FhirString,
        valueString: Optional[FhirString] = None,
        valueBase64Binary: Optional[base64Binary] = None,
    ) -> None:
        """
            A record of an event made for purposes of maintaining a security log. Typical
        uses include detection of intrusion attempts and monitoring for inappropriate
        usage.

            :param id_: id of resource
            :param extension: extensions
            :param type_: The type of extra detail provided in the value.
            :param valueString: None
            :param valueBase64Binary: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            valueString=valueString,
            valueBase64Binary=valueBase64Binary,
        )
