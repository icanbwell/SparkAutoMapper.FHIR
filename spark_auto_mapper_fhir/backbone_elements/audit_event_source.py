from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # site (string)
    # observer (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for observer
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.device import Device
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # type_ (Coding)
    from spark_auto_mapper_fhir.complex_types.coding import Coding

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.audit_event_source_type import (
        AuditEventSourceTypeCode,
    )

    # End Import for CodeableConcept for type_


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AuditEventSource(FhirBackboneElementBase):
    """
    AuditEvent.Source
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        site: Optional[FhirString] = None,
        observer: Reference[
            Union[
                PractitionerRole,
                Practitioner,
                Organization,
                Device,
                Patient,
                RelatedPerson,
            ]
        ],
        type_: Optional[FhirList[Coding[AuditEventSourceTypeCode]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param site: Logical source location within the healthcare enterprise network.  For
        example, a hospital or other provider location within a multi-entity provider
        group.
            :param observer: Identifier of the source where the event was detected.
            :param type_: Code specifying the type of source where event originated.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            site=site,
            observer=observer,
            type_=type_,
        )
