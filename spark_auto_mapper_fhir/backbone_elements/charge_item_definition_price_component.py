from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (InvoicePriceComponentType)
    from spark_auto_mapper_fhir.value_sets.invoice_price_component_type import (
        InvoicePriceComponentTypeCode,
    )

    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for code
    # factor (decimal)
    from spark_auto_mapper_fhir.fhir_types.decimal import FhirDecimal

    # amount (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ChargeItemDefinitionPriceComponent(FhirBackboneElementBase):
    """
    ChargeItemDefinition.PriceComponent
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: InvoicePriceComponentTypeCode,
        code: Optional[CodeableConcept[GenericTypeCode]] = None,
        factor: Optional[FhirDecimal] = None,
        amount: Optional[Money] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: This code identifies the type of the component.
            :param code: A code that identifies the component. Codes may be used to differentiate
        between kinds of taxes, surcharges, discounts etc.
            :param factor: The factor that has been applied on the base price for calculating this
        component.
            :param amount: The amount calculated for this component.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            code=code,
            factor=factor,
            amount=amount,
        )
