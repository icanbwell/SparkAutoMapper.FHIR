from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # parameterName (string)
    # comment (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class OperationDefinitionOverload(FhirBackboneElementBase):
    """
    OperationDefinition.Overload
        A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        parameterName: Optional[FhirList[FhirString]] = None,
        comment: Optional[FhirString] = None,
    ) -> None:
        """
            A formal computable definition of an operation (on the RESTful interface) or a
        named query (using the search interaction).

            :param id_: id of resource
            :param extension: extensions
            :param parameterName: Name of parameter to include in overload.
            :param comment: Comments to go on overload.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            parameterName=parameterName,
            comment=comment,
        )
