from __future__ import annotations
from typing import Optional, Union, List, Any, TYPE_CHECKING

from pyspark.sql.types import StructType, DataType
from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.date import FhirDate
from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.integer import FhirInteger
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    # subDetailSequence (positiveInt)
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    # noteNumber (positiveInt)
    from spark_auto_mapper_fhir.complex_types.positive_int import positiveInt
    # adjudication (ClaimResponse.Adjudication)
    from spark_auto_mapper_fhir.backbone_elements.claim_response_adjudication import ClaimResponseAdjudication


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ClaimResponseSubDetail(FhirBackboneElementBase):
    """
    ClaimResponse.SubDetail
    """
    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        subDetailSequence: positiveInt ,
        noteNumber: Optional[FhirList[positiveInt ]] = None,
        adjudication: Optional[FhirList[ClaimResponseAdjudication ]] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param subDetailSequence: A number to uniquely reference the claim sub-detail entry.
        :param noteNumber: The numbers associated with notes below which apply to the adjudication of
    this item.
        :param adjudication: The adjudication results.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            subDetailSequence=subDetailSequence,
            noteNumber=noteNumber,
            adjudication=adjudication,
        )
