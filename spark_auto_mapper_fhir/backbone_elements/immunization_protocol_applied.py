from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # series (string)
    # authority (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for authority
    from spark_auto_mapper_fhir.resources.organization import Organization

    # targetDisease (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for targetDisease
    # Import for CodeableConcept for targetDisease
    from spark_auto_mapper_fhir.value_sets.immunization_target_disease_codes import (
        ImmunizationTargetDiseaseCodesCode,
    )

    # End Import for CodeableConcept for targetDisease
    # doseNumberPositiveInt (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # doseNumberString (string)
    # seriesDosesPositiveInt (positiveInt)
    # seriesDosesString (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImmunizationProtocolApplied(FhirBackboneElementBase):
    """
    Immunization.ProtocolApplied
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        series: Optional[FhirString] = None,
        authority: Optional[Reference[Union[Organization]]] = None,
        targetDisease: Optional[
            FhirList[CodeableConcept[ImmunizationTargetDiseaseCodesCode]]
        ] = None,
        doseNumberPositiveInt: Optional[FhirPositiveInt] = None,
        doseNumberString: Optional[FhirString] = None,
        seriesDosesPositiveInt: Optional[FhirPositiveInt] = None,
        seriesDosesString: Optional[FhirString] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param series: One possible path to achieve presumed immunity against a disease - within the
        context of an authority.
            :param authority: Indicates the authority who published the protocol (e.g. ACIP) that is being
        followed.
            :param targetDisease: The vaccine preventable disease the dose is being administered against.
            :param doseNumberPositiveInt: None
            :param doseNumberString: None
            :param seriesDosesPositiveInt: None
            :param seriesDosesString: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            series=series,
            authority=authority,
            targetDisease=targetDisease,
            doseNumberPositiveInt=doseNumberPositiveInt,
            doseNumberString=doseNumberString,
            seriesDosesPositiveInt=seriesDosesPositiveInt,
            seriesDosesString=seriesDosesString,
        )
