from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # areaUnderCurve (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # lethalDose50 (Quantity)
    # halfLifePeriod (Duration)
    from spark_auto_mapper_fhir.complex_types.duration import Duration


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class MedicationKnowledgeKinetics(FhirBackboneElementBase):
    """
    MedicationKnowledge.Kinetics
        Information about a medication that is used to support knowledge.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        areaUnderCurve: Optional[FhirList[Quantity]] = None,
        lethalDose50: Optional[FhirList[Quantity]] = None,
        halfLifePeriod: Optional[Duration] = None,
    ) -> None:
        """
            Information about a medication that is used to support knowledge.

            :param id_: id of resource
            :param extension: extensions
            :param areaUnderCurve: The drug concentration measured at certain discrete points in time.
            :param lethalDose50: The median lethal dose of a drug.
            :param halfLifePeriod: The time required for any specified property (e.g., the concentration of a
        substance in the body) to decrease by half.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            areaUnderCurve=areaUnderCurve,
            lethalDose50=lethalDose50,
            halfLifePeriod=halfLifePeriod,
        )
