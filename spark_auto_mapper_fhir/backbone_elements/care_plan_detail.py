from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # kind (CarePlanActivityKind)
    from spark_auto_mapper_fhir.value_sets.care_plan_activity_kind import (
        CarePlanActivityKindCode,
    )

    # instantiatesCanonical (canonical)
    from spark_auto_mapper_fhir.fhir_types.canonical import FhirCanonical

    # instantiatesUri (uri)
    # code (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for code
    # Import for CodeableConcept for code
    from spark_auto_mapper_fhir.value_sets.procedure_codes_snomedct_ import (
        ProcedureCodes_SNOMEDCT_Code,
    )

    # End Import for CodeableConcept for code
    # reasonCode (CodeableConcept)
    # End Import for References for reasonCode
    # Import for CodeableConcept for reasonCode
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindingsCode,
    )

    # End Import for CodeableConcept for reasonCode
    # reasonReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for reasonReference
    from spark_auto_mapper_fhir.resources.condition import Condition
    from spark_auto_mapper_fhir.resources.observation import Observation
    from spark_auto_mapper_fhir.resources.diagnostic_report import DiagnosticReport
    from spark_auto_mapper_fhir.resources.document_reference import DocumentReference

    # goal (Reference)
    # Imports for References for goal
    from spark_auto_mapper_fhir.resources.goal import Goal

    # status (CarePlanActivityStatus)
    from spark_auto_mapper_fhir.value_sets.care_plan_activity_status import (
        CarePlanActivityStatusCode,
    )

    # statusReason (CodeableConcept)
    # End Import for References for statusReason
    # Import for CodeableConcept for statusReason
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for statusReason
    # doNotPerform (boolean)
    # location (Reference)
    # Imports for References for location
    from spark_auto_mapper_fhir.resources.location import Location

    # performer (Reference)
    # Imports for References for performer
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.care_team import CareTeam
    from spark_auto_mapper_fhir.resources.healthcare_service import HealthcareService
    from spark_auto_mapper_fhir.resources.device import Device

    # dailyAmount (Quantity)
    from spark_auto_mapper_fhir.complex_types.quantity import Quantity

    # quantity (Quantity)
    # description (string)
    # scheduledTiming (Timing)
    from spark_auto_mapper_fhir.backbone_elements.timing import Timing

    # scheduledPeriod (Period)
    from spark_auto_mapper_fhir.complex_types.period import Period

    # scheduledString (string)
    # productCodeableConcept (CodeableConcept)
    # End Import for References for productCodeableConcept
    # Import for CodeableConcept for productCodeableConcept
    # End Import for CodeableConcept for productCodeableConcept
    # productReference (Reference)
    # Imports for References for productReference
    from spark_auto_mapper_fhir.resources.medication import Medication
    from spark_auto_mapper_fhir.resources.substance import Substance


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CarePlanDetail(FhirBackboneElementBase):
    """
    CarePlan.Detail
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        kind: Optional[CarePlanActivityKindCode] = None,
        instantiatesCanonical: Optional[FhirList[FhirCanonical]] = None,
        instantiatesUri: Optional[FhirList[FhirUri]] = None,
        code: Optional[CodeableConcept[ProcedureCodes_SNOMEDCT_Code]] = None,
        reasonCode: Optional[
            FhirList[CodeableConcept[SNOMEDCTClinicalFindingsCode]]
        ] = None,
        reasonReference: Optional[
            FhirList[
                Reference[
                    Union[Condition, Observation, DiagnosticReport, DocumentReference]
                ]
            ]
        ] = None,
        goal: Optional[FhirList[Reference[Union[Goal]]]] = None,
        status: CarePlanActivityStatusCode,
        statusReason: Optional[CodeableConcept[GenericTypeCode]] = None,
        doNotPerform: Optional[FhirBoolean] = None,
        location: Optional[Reference[Union[Location]]] = None,
        performer: Optional[
            FhirList[
                Reference[
                    Union[
                        Practitioner,
                        PractitionerRole,
                        Organization,
                        RelatedPerson,
                        Patient,
                        CareTeam,
                        HealthcareService,
                        Device,
                    ]
                ]
            ]
        ] = None,
        dailyAmount: Optional[Quantity] = None,
        quantity: Optional[Quantity] = None,
        description: Optional[FhirString] = None,
        scheduledTiming: Optional[Timing] = None,
        scheduledPeriod: Optional[Period] = None,
        scheduledString: Optional[FhirString] = None,
        productCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        productReference: Optional[Reference[Union[Medication, Substance]]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param kind: A description of the kind of resource the in-line definition of a care plan
        activity is representing.  The CarePlan.activity.detail is an in-line
        definition when a resource is not referenced using
        CarePlan.activity.reference.  For example, a MedicationRequest, a
        ServiceRequest, or a CommunicationRequest.
            :param instantiatesCanonical: The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
        definition that is adhered to in whole or in part by this CarePlan activity.
            :param instantiatesUri: The URL pointing to an externally maintained protocol, guideline,
        questionnaire or other definition that is adhered to in whole or in part by
        this CarePlan activity.
            :param code: Detailed description of the type of planned activity; e.g. what lab test, what
        procedure, what kind of encounter.
            :param reasonCode: Provides the rationale that drove the inclusion of this particular activity as
        part of the plan or the reason why the activity was prohibited.
            :param reasonReference: Indicates another resource, such as the health condition(s), whose existence
        justifies this request and drove the inclusion of this particular activity as
        part of the plan.
            :param goal: Internal reference that identifies the goals that this activity is intended to
        contribute towards meeting.
            :param status: Identifies what progress is being made for the specific activity.
            :param statusReason: Provides reason why the activity isn't yet started, is on hold, was cancelled,
        etc.
            :param doNotPerform: If true, indicates that the described activity is one that must NOT be engaged
        in when following the plan.  If false, or missing, indicates that the
        described activity is one that should be engaged in when following the plan.
            :param location: Identifies the facility where the activity will occur; e.g. home, hospital,
        specific clinic, etc.
            :param performer: Identifies who's expected to be involved in the activity.
            :param dailyAmount: Identifies the quantity expected to be consumed in a given day.
            :param quantity: Identifies the quantity expected to be supplied, administered or consumed by
        the subject.
            :param description: This provides a textual description of constraints on the intended activity
        occurrence, including relation to other activities.  It may also include
        objectives, pre-conditions and end-conditions.  Finally, it may convey
        specifics about the activity such as body site, method, route, etc.
            :param scheduledTiming: None
            :param scheduledPeriod: None
            :param scheduledString: None
            :param productCodeableConcept: None
            :param productReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            kind=kind,
            instantiatesCanonical=instantiatesCanonical,
            instantiatesUri=instantiatesUri,
            code=code,
            reasonCode=reasonCode,
            reasonReference=reasonReference,
            goal=goal,
            status=status,
            statusReason=statusReason,
            doNotPerform=doNotPerform,
            location=location,
            performer=performer,
            dailyAmount=dailyAmount,
            quantity=quantity,
            description=description,
            scheduledTiming=scheduledTiming,
            scheduledPeriod=scheduledPeriod,
            scheduledString=scheduledString,
            productCodeableConcept=productCodeableConcept,
            productReference=productReference,
        )
