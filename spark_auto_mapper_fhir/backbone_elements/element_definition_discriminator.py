from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (DiscriminatorType)
    from spark_auto_mapper_fhir.value_sets.discriminator_type import (
        DiscriminatorTypeCode,
    )

    # path (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ElementDefinitionDiscriminator(FhirBackboneElementBase):
    """
    ElementDefinition.Discriminator
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: DiscriminatorTypeCode,
        path: FhirString,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param type_: How the element value is interpreted when discrimination is evaluated.
            :param path: A FHIRPath expression, using [the simple subset of
        FHIRPath](fhirpath.html#simple), that is used to identify the element on which
        discrimination is based.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            path=path,
        )
