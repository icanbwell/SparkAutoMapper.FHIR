from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # other (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for other
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson

    # type_ (LinkType)
    from spark_auto_mapper_fhir.value_sets.link_type import LinkTypeCode


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class PatientLink(FhirBackboneElementBase):
    """
    Patient.Link
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        other: Reference[Union[Patient, RelatedPerson]],
        type_: LinkTypeCode,
    ) -> None:
        """

        :param id_: id of resource
        :param extension: extensions
        :param other: The other patient resource that the link refers to.
        :param type_: The type of link between this patient resource and another patient resource.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            other=other,
            type_=type_,
        )
