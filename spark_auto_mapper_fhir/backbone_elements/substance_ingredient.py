from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # quantity (Ratio)
    from spark_auto_mapper_fhir.complex_types.ratio import Ratio

    # substanceCodeableConcept (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for substanceCodeableConcept
    # Import for CodeableConcept for substanceCodeableConcept
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for substanceCodeableConcept
    # substanceReference (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for substanceReference
    from spark_auto_mapper_fhir.resources.substance import Substance


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class SubstanceIngredient(FhirBackboneElementBase):
    """
    Substance.Ingredient
        A homogeneous material with a definite composition.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        quantity: Optional[Ratio] = None,
        substanceCodeableConcept: Optional[CodeableConcept[GenericTypeCode]] = None,
        substanceReference: Optional[Reference[Union[Substance]]] = None,
    ) -> None:
        """
        A homogeneous material with a definite composition.

        :param id_: id of resource
        :param extension: extensions
        :param quantity: The amount of the ingredient in the substance - a concentration ratio.
        :param substanceCodeableConcept: None
        :param substanceReference: None
        """
        super().__init__(
            id_=id_,
            extension=extension,
            quantity=quantity,
            substanceCodeableConcept=substanceCodeableConcept,
            substanceReference=substanceReference,
        )
