from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # type_ (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for type_
    # Import for CodeableConcept for type_
    from spark_auto_mapper_fhir.value_sets.generic_type import GenericTypeCode

    # End Import for CodeableConcept for type_
    # groupSize (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt

    # cost (Money)
    from spark_auto_mapper_fhir.complex_types.money import Money

    # comment (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class InsurancePlanGeneralCost(FhirBackboneElementBase):
    """
    InsurancePlan.GeneralCost
        Details of a Health Insurance product/plan provided by an organization.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        type_: Optional[CodeableConcept[GenericTypeCode]] = None,
        groupSize: Optional[FhirPositiveInt] = None,
        cost: Optional[Money] = None,
        comment: Optional[FhirString] = None,
    ) -> None:
        """
        Details of a Health Insurance product/plan provided by an organization.

        :param id_: id of resource
        :param extension: extensions
        :param type_: Type of cost.
        :param groupSize: Number of participants enrolled in the plan.
        :param cost: Value of the cost.
        :param comment: Additional information about the general costs associated with this plan.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            type_=type_,
            groupSize=groupSize,
            cost=cost,
            comment=comment,
        )
