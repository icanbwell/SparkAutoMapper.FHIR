from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.boolean import FhirBoolean
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId
from spark_auto_mapper_fhir.fhir_types.uri import FhirUri

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # system (uri)
    # abstract (boolean)
    # inactive (boolean)
    # version (string)
    # code (code)
    from spark_auto_mapper_fhir.complex_types.code import code

    # display (string)
    # designation (ValueSet.Designation)
    from spark_auto_mapper_fhir.backbone_elements.value_set_designation import (
        ValueSetDesignation,
    )


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ValueSetContains(FhirBackboneElementBase):
    """
    ValueSet.Contains
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        system: Optional[FhirUri] = None,
        abstract: Optional[FhirBoolean] = None,
        inactive: Optional[FhirBoolean] = None,
        version: Optional[FhirString] = None,
        code: Optional[code] = None,
        display: Optional[FhirString] = None,
        designation: Optional[FhirList[ValueSetDesignation]] = None,
        contains: Optional[FhirList[ValueSetContains]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param system: An absolute URI which is the code system in which the code for this item in
        the expansion is defined.
            :param abstract: If true, this entry is included in the expansion for navigational purposes,
        and the user cannot select the code directly as a proper value.
            :param inactive: If the concept is inactive in the code system that defines it. Inactive codes
        are those that are no longer to be used, but are maintained by the code system
        for understanding legacy data. It might not be known or specified whether an
        concept is inactive (and it may depend on the context of use).
            :param version: The version of the code system from this code was taken. Note that a well-
        maintained code system does not need the version reported, because the meaning
        of codes is consistent across versions. However this cannot consistently be
        assured, and when the meaning is not guaranteed to be consistent, the version
        SHOULD be exchanged.
            :param code: The code for this item in the expansion hierarchy. If this code is missing the
        entry in the hierarchy is a place holder (abstract) and does not represent a
        valid code in the value set.
            :param display: The recommended display for this item in the expansion.
            :param designation: Additional representations for this item - other languages, aliases,
        specialized purposes, used for particular purposes, etc. These are relevant
        when the conditions of the expansion do not fix to a single correct
        representation.
            :param contains: Other codes and entries contained under this entry in the hierarchy.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            system=system,
            abstract=abstract,
            inactive=inactive,
            version=version,
            code=code,
            display=display,
            designation=designation,
            contains=contains,
        )
