from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # id_ (string)
    # extension (Extension)
    # modifierExtension (Extension)
    # substance (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for substance
    # Import for CodeableConcept for substance
    from spark_auto_mapper_fhir.value_sets.substance_code import SubstanceCodeCode

    # End Import for CodeableConcept for substance
    # manifestation (CodeableConcept)
    # End Import for References for manifestation
    # Import for CodeableConcept for manifestation
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindingsCode,
    )

    # End Import for CodeableConcept for manifestation
    # description (string)
    # onset (dateTime)
    # severity (AllergyIntoleranceSeverity)
    from spark_auto_mapper_fhir.value_sets.allergy_intolerance_severity import (
        AllergyIntoleranceSeverityCode,
    )

    # exposureRoute (CodeableConcept)
    # End Import for References for exposureRoute
    # Import for CodeableConcept for exposureRoute
    from spark_auto_mapper_fhir.value_sets.snomedct_route_codes import (
        SNOMEDCTRouteCodesCode,
    )

    # End Import for CodeableConcept for exposureRoute
    # note (Annotation)
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AllergyIntoleranceReaction(FhirBackboneElementBase):
    """
    AllergyIntolerance.Reaction
        Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirString] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        modifierExtension: Optional[FhirList[ExtensionBase]] = None,
        substance: Optional[CodeableConcept[SubstanceCodeCode]] = None,
        manifestation: FhirList[CodeableConcept[SNOMEDCTClinicalFindingsCode]],
        description: Optional[FhirString] = None,
        onset: Optional[FhirDateTime] = None,
        severity: Optional[AllergyIntoleranceSeverityCode] = None,
        exposureRoute: Optional[CodeableConcept[SNOMEDCTRouteCodesCode]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """
            Risk of harmful or undesirable, physiological response which is unique to an
        individual and associated with exposure to a substance.

            :param id_: None
            :param extension: May be used to represent additional information that is not part of the basic
        definition of the element. To make the use of extensions safe and manageable,
        there is a strict set of governance  applied to the definition and use of
        extensions. Though any implementer can define an extension, there is a set of
        requirements that SHALL be met as part of the definition of the extension.
            :param modifierExtension: May be used to represent additional information that is not part of the basic
        definition of the element and that modifies the understanding of the element
        in which it is contained and/or the understanding of the containing element's
        descendants. Usually modifier elements provide negation or qualification. To
        make the use of extensions safe and manageable, there is a strict set of
        governance applied to the definition and use of extensions. Though any
        implementer can define an extension, there is a set of requirements that SHALL
        be met as part of the definition of the extension. Applications processing a
        resource are required to check for modifier extensions.

        Modifier extensions SHALL NOT change the meaning of any elements on Resource
        or DomainResource (including cannot change the meaning of modifierExtension
        itself).
            :param substance: Identification of the specific substance (or pharmaceutical product)
        considered to be responsible for the Adverse Reaction event. Note: the
        substance for a specific reaction may be different from the substance
        identified as the cause of the risk, but it must be consistent with it. For
        instance, it may be a more specific substance (e.g. a brand medication) or a
        composite product that includes the identified substance. It must be
        clinically safe to only process the 'code' and ignore the
        'reaction.substance'.  If a receiving system is unable to confirm that
        AllergyIntolerance.reaction.substance falls within the semantic scope of
        AllergyIntolerance.code, then the receiving system should ignore
        AllergyIntolerance.reaction.substance.
            :param manifestation: Clinical symptoms and/or signs that are observed or associated with the
        adverse reaction event.
            :param description: Text description about the reaction as a whole, including details of the
        manifestation if required.
            :param onset: Record of the date and/or time of the onset of the Reaction.
            :param severity: Clinical assessment of the severity of the reaction event as a whole,
        potentially considering multiple different manifestations.
            :param exposureRoute: Identification of the route by which the subject was exposed to the substance.
            :param note: Additional text about the adverse reaction event not captured in other fields.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            modifierExtension=modifierExtension,
            substance=substance,
            manifestation=manifestation,
            description=description,
            onset=onset,
            severity=severity,
            exposureRoute=exposureRoute,
            note=note,
        )
