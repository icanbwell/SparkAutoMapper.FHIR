from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.date_time import FhirDateTime
from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for substance
    from spark_auto_mapper_fhir.value_sets.substance_code import SubstanceCode

    # End Import for CodeableConcept for substance
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for manifestation
    from spark_auto_mapper_fhir.value_sets.snomedct_clinical_findings import (
        SNOMEDCTClinicalFindings,
    )

    # End Import for CodeableConcept for manifestation
    from spark_auto_mapper_fhir.complex_types.allergy_intolerance_severity import (
        AllergyIntoleranceSeverity,
    )
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # Import for CodeableConcept for exposureRoute
    from spark_auto_mapper_fhir.value_sets.snomedct_route_codes import (
        SNOMEDCTRouteCodes,
    )

    # End Import for CodeableConcept for exposureRoute
    from spark_auto_mapper_fhir.complex_types.annotation import Annotation


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class AllergyIntoleranceReaction(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        extension: Optional[FhirList[ExtensionBase]] = None,
        substance: Optional[CodeableConcept[SubstanceCode]] = None,
        manifestation: FhirList[CodeableConcept[SNOMEDCTClinicalFindings]],
        description: Optional[FhirString] = None,
        onset: Optional[FhirDateTime] = None,
        severity: Optional[AllergyIntoleranceSeverity] = None,
        exposureRoute: Optional[CodeableConcept[SNOMEDCTRouteCodes]] = None,
        note: Optional[FhirList[Annotation]] = None,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param substance: Identification of the specific substance (or pharmaceutical product)
        considered to be responsible for the Adverse Reaction event. Note: the
        substance for a specific reaction may be different from the substance
        identified as the cause of the risk, but it must be consistent with it. For
        instance, it may be a more specific substance (e.g. a brand medication) or a
        composite product that includes the identified substance. It must be
        clinically safe to only process the 'code' and ignore the
        'reaction.substance'.  If a receiving system is unable to confirm that
        AllergyIntolerance.reaction.substance falls within the semantic scope of
        AllergyIntolerance.code, then the receiving system should ignore
        AllergyIntolerance.reaction.substance.
            :param manifestation: Clinical symptoms and/or signs that are observed or associated with the
        adverse reaction event.
            :param description: Text description about the reaction as a whole, including details of the
        manifestation if required.
            :param onset: Record of the date and/or time of the onset of the Reaction.
            :param severity: Clinical assessment of the severity of the reaction event as a whole,
        potentially considering multiple different manifestations.
            :param exposureRoute: Identification of the route by which the subject was exposed to the substance.
            :param note: Additional text about the adverse reaction event not captured in other fields.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            substance=substance,
            manifestation=manifestation,
            description=description,
            onset=onset,
            severity=severity,
            exposureRoute=exposureRoute,
            note=note,
        )
