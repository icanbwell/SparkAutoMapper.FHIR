from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # condition (Reference)
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for condition
    from spark_auto_mapper_fhir.resources.condition import Condition

    # role (CodeableConcept)
    from spark_auto_mapper_fhir.complex_types.codeable_concept import CodeableConcept

    # End Import for References for role
    # Import for CodeableConcept for role
    from spark_auto_mapper_fhir.value_sets.diagnosis_role import DiagnosisRoleCode

    # End Import for CodeableConcept for role
    # rank (positiveInt)
    from spark_auto_mapper_fhir.fhir_types.positive_int import FhirPositiveInt


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class EpisodeOfCareDiagnosis(FhirBackboneElementBase):
    """
    EpisodeOfCare.Diagnosis
        An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        condition: Reference[Union[Condition]],
        role: Optional[CodeableConcept[DiagnosisRoleCode]] = None,
        rank: Optional[FhirPositiveInt] = None,
    ) -> None:
        """
            An association between a patient and an organization / healthcare provider(s)
        during which time encounters may occur. The managing organization assumes a
        level of responsibility for the patient during this time.

            :param id_: id of resource
            :param extension: extensions
            :param condition: A list of conditions/problems/diagnoses that this episode of care is intended
        to be providing care for.
            :param role: Role that this diagnosis has within the episode of care (e.g. admission,
        billing, discharge â€¦).
            :param rank: Ranking of the diagnosis (for each role type).
        """
        super().__init__(
            id_=id_,
            extension=extension,
            condition=condition,
            role=role,
            rank=rank,
        )
