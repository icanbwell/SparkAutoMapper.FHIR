from __future__ import annotations
from typing import Optional, TYPE_CHECKING

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.fhir_types.string import FhirString
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    pass
    # code (GuideParameterCode)
    from spark_auto_mapper_fhir.value_sets.guide_parameter_code import (
        GuideParameterCodeCode,
    )

    # value (string)


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class ImplementationGuideParameter(FhirBackboneElementBase):
    """
    ImplementationGuide.Parameter
    """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: Optional[FhirId] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        code: GuideParameterCodeCode,
        value: FhirString,
    ) -> None:
        """

            :param id_: id of resource
            :param extension: extensions
            :param code: apply | path-resource | path-pages | path-tx-cache | expansion-parameter |
        rule-broken-links | generate-xml | generate-json | generate-turtle | html-
        template.
            :param value: Value for named type.
        """
        super().__init__(
            id_=id_,
            extension=extension,
            code=code,
            value=value,
        )
