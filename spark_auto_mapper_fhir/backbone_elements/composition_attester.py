from __future__ import annotations
from typing import Optional, TYPE_CHECKING, Union

from spark_auto_mapper_fhir.fhir_types.list import FhirList
from spark_auto_mapper_fhir.complex_types.meta import Meta
from spark_auto_mapper_fhir.extensions.extension_base import ExtensionBase
from spark_auto_mapper_fhir.fhir_types.id import FhirId

from spark_auto_mapper_fhir.base_types.fhir_backbone_element_base import (
    FhirBackboneElementBase,
)

if TYPE_CHECKING:
    from spark_auto_mapper_fhir.complex_types.composition_attestation_mode import (
        CompositionAttestationMode,
    )
    from spark_auto_mapper_fhir.complex_types.date_time import dateTime
    from spark_auto_mapper_fhir.complex_types.reference import Reference

    # Imports for References for party
    from spark_auto_mapper_fhir.resources.patient import Patient
    from spark_auto_mapper_fhir.resources.related_person import RelatedPerson
    from spark_auto_mapper_fhir.resources.practitioner import Practitioner
    from spark_auto_mapper_fhir.resources.practitioner_role import PractitionerRole
    from spark_auto_mapper_fhir.resources.organization import Organization


# This file is auto-generated by generate_classes so do not edit manually
# noinspection PyPep8Naming
class CompositionAttester(FhirBackboneElementBase):
    """ """

    # noinspection PyPep8Naming
    def __init__(
        self,
        *,
        id_: FhirId,
        meta: Optional[Meta] = None,
        extension: Optional[FhirList[ExtensionBase]] = None,
        mode: CompositionAttestationMode,
        time: Optional[dateTime] = None,
        party: Optional[
            Reference[
                Union[
                    Patient, RelatedPerson, Practitioner, PractitionerRole, Organization
                ]
            ]
        ] = None,
    ) -> None:
        """

        :param id_: id of resource
        :param meta: Meta
        :param extension: extensions
        :param mode: The type of attestation the authenticator offers.
        :param time: When the composition was attested by the party.
        :param party: Who attested the composition in the specified way.
        """
        super().__init__(
            resourceType="CompositionAttester",
            id_=id_,
            meta=meta,
            extension=extension,
            mode=mode,
            time=time,
            party=party,
        )
