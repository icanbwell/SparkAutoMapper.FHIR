:py:mod:`spark_auto_mapper_fhir.resources.test_report`
======================================================

.. py:module:: spark_auto_mapper_fhir.resources.test_report


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.test_report.TestReport




.. py:class:: TestReport(*, id_ = None, meta = None, implicitRules = None, language = None, text = None, contained = None, extension = None, modifierExtension = None, identifier = None, name = None, status, testScript, result, score = None, tester = None, issued = None, participant = None, setup = None, test = None, teardown = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   TestReport
   testreport.xsd
       A summary of information based on the results of executing a TestScript.
       If the element is present, it must have either a @value, an @id, or extensions

       A summary of information based on the results of executing a TestScript.
       If the element is present, it must have either a @value, an @id, or extensions

       :param id_: The logical id of the resource, as used in the URL for the resource. Once
   assigned, this value never changes.
       :param meta: The metadata about the resource. This is content that is maintained by the
   infrastructure. Changes to the content might not always be associated with
   version changes to the resource.
       :param implicitRules: A reference to a set of rules that were followed when the resource was
   constructed, and which must be understood when processing the content. Often,
   this is a reference to an implementation guide that defines the special rules
   along with other profiles etc.
       :param language: The base language in which the resource is written.
       :param text: A human-readable narrative that contains a summary of the resource and can be
   used to represent the content of the resource to a human. The narrative need
   not encode all the structured data, but is required to contain sufficient
   detail to make it "clinically safe" for a human to just read the narrative.
   Resource definitions may define what content should be represented in the
   narrative to ensure clinical safety.
       :param contained: These resources do not have an independent existence apart from the resource
   that contains them - they cannot be identified independently, and nor can they
   have their own independent transaction scope.
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the resource. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the resource and that modifies the understanding of the element
   that contains it and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer is allowed to define an extension, there is a set of requirements
   that SHALL be met as part of the definition of the extension. Applications
   processing a resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param identifier: Identifier for the TestScript assigned for external purposes outside the
   context of FHIR.
       :param name: A free text natural language name identifying the executed TestScript.
       :param status: The current state of this test report.
       :param testScript: Ideally this is an absolute URL that is used to identify the version-specific
   TestScript that was executed, matching the `TestScript.url`.
       :param result: The overall result from the execution of the TestScript.
       :param score: The final score (percentage of tests passed) resulting from the execution of
   the TestScript.
       :param tester: Name of the tester producing this report (Organization or individual).
       :param issued: When the TestScript was executed and this TestReport was generated.
       :param participant: A participant in the test execution, either the execution engine, a client, or
   a server.
       :param setup: The results of the series of required setup operations before the tests were
   executed.
       :param test: A test executed from the test script.
       :param teardown: The results of the series of operations required to clean up after all the
   tests were executed (successfully or otherwise).

   .. py:method:: get_schema(self, include_extension)



