:mod:`spark_auto_mapper_fhir.resources.test_script`
===================================================

.. py:module:: spark_auto_mapper_fhir.resources.test_script


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.test_script.TestScript



.. class:: TestScript(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, meta: Optional[spark_auto_mapper_fhir.complex_types.meta.Meta] = None, implicitRules: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, language: Optional[spark_auto_mapper_fhir.value_sets.common_languages.CommonLanguagesCode] = None, text: Optional[spark_auto_mapper_fhir.complex_types.narrative.Narrative] = None, contained: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.resource_container.ResourceContainer]] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, url: spark_auto_mapper_fhir.fhir_types.uri.FhirUri, identifier: Optional[spark_auto_mapper_fhir.complex_types.identifier.Identifier] = None, version: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, name: spark_auto_mapper_fhir.fhir_types.string.FhirString, title: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, status: spark_auto_mapper_fhir.value_sets.publication_status.PublicationStatusCode, experimental: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None, date: Optional[spark_auto_mapper_fhir.fhir_types.date_time.FhirDateTime] = None, publisher: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, contact: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.contact_detail.ContactDetail]] = None, description: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, useContext: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.usage_context.UsageContext]] = None, jurisdiction: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.jurisdiction_value_set.JurisdictionValueSetCode]]] = None, purpose: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, copyright: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, origin: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.test_script_origin.TestScriptOrigin]] = None, destination: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.test_script_destination.TestScriptDestination]] = None, metadata: Optional[spark_auto_mapper_fhir.backbone_elements.test_script_metadata.TestScriptMetadata] = None, fixture: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.test_script_fixture.TestScriptFixture]] = None, profile: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.resource.Resource]]] = None, variable: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.test_script_variable.TestScriptVariable]] = None, setup: Optional[spark_auto_mapper_fhir.backbone_elements.test_script_setup.TestScriptSetup] = None, test: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.test_script_test.TestScriptTest]] = None, teardown: Optional[spark_auto_mapper_fhir.backbone_elements.test_script_teardown.TestScriptTeardown] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   TestScript
   testscript.xsd
       A structured set of tests against a FHIR server or client implementation to
   determine compliance against the FHIR specification.
       If the element is present, it must have either a @value, an @id, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



