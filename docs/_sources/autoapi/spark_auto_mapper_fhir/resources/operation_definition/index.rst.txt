:mod:`spark_auto_mapper_fhir.resources.operation_definition`
============================================================

.. py:module:: spark_auto_mapper_fhir.resources.operation_definition


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.operation_definition.OperationDefinition



.. class:: OperationDefinition(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, meta: Optional[spark_auto_mapper_fhir.complex_types.meta.Meta] = None, implicitRules: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, language: Optional[spark_auto_mapper_fhir.value_sets.common_languages.CommonLanguagesCode] = None, text: Optional[spark_auto_mapper_fhir.complex_types.narrative.Narrative] = None, contained: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.resource_container.ResourceContainer]] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, url: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, version: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, name: spark_auto_mapper_fhir.fhir_types.string.FhirString, title: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, status: spark_auto_mapper_fhir.value_sets.publication_status.PublicationStatusCode, kind: spark_auto_mapper_fhir.value_sets.operation_kind.OperationKindCode, experimental: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None, date: Optional[spark_auto_mapper_fhir.fhir_types.date_time.FhirDateTime] = None, publisher: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, contact: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.contact_detail.ContactDetail]] = None, description: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, useContext: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.usage_context.UsageContext]] = None, jurisdiction: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.jurisdiction_value_set.JurisdictionValueSetCode]]] = None, purpose: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, affectsState: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None, code: spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode, comment: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, base: Optional[spark_auto_mapper_fhir.fhir_types.canonical.FhirCanonical] = None, resource: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.value_sets.resource_type.ResourceTypeCode]] = None, system: spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean, type_: spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean, instance: spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean, inputProfile: Optional[spark_auto_mapper_fhir.fhir_types.canonical.FhirCanonical] = None, outputProfile: Optional[spark_auto_mapper_fhir.fhir_types.canonical.FhirCanonical] = None, parameter: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.operation_definition_parameter.OperationDefinitionParameter]] = None, overload: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.operation_definition_overload.OperationDefinitionOverload]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   OperationDefinition
   operationdefinition.xsd
       A formal computable definition of an operation (on the RESTful interface) or a
   named query (using the search interaction).
       If the element is present, it must have either a @value, an @id, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



