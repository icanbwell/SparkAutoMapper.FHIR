:mod:`spark_auto_mapper_fhir.resources.terminology_capabilities`
================================================================

.. py:module:: spark_auto_mapper_fhir.resources.terminology_capabilities


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.terminology_capabilities.TerminologyCapabilities



.. class:: TerminologyCapabilities(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, meta: Optional[spark_auto_mapper_fhir.complex_types.meta.Meta] = None, implicitRules: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, language: Optional[spark_auto_mapper_fhir.value_sets.common_languages.CommonLanguagesCode] = None, text: Optional[spark_auto_mapper_fhir.complex_types.narrative.Narrative] = None, contained: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.resource_container.ResourceContainer]] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, url: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, version: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, name: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, title: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, status: spark_auto_mapper_fhir.value_sets.publication_status.PublicationStatusCode, experimental: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None, date: spark_auto_mapper_fhir.fhir_types.date_time.FhirDateTime, publisher: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, contact: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.contact_detail.ContactDetail]] = None, description: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, useContext: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.usage_context.UsageContext]] = None, jurisdiction: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.jurisdiction_value_set.JurisdictionValueSetCode]]] = None, purpose: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, copyright: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, kind: spark_auto_mapper_fhir.value_sets.capability_statement_kind.CapabilityStatementKindCode, software: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_software.TerminologyCapabilitiesSoftware] = None, implementation: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_implementation.TerminologyCapabilitiesImplementation] = None, lockedDate: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None, codeSystem: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_code_system.TerminologyCapabilitiesCodeSystem]] = None, expansion: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_expansion.TerminologyCapabilitiesExpansion] = None, codeSearch: Optional[spark_auto_mapper_fhir.value_sets.code_search_support.CodeSearchSupportCode] = None, validateCode: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_validate_code.TerminologyCapabilitiesValidateCode] = None, translation: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_translation.TerminologyCapabilitiesTranslation] = None, closure: Optional[spark_auto_mapper_fhir.backbone_elements.terminology_capabilities_closure.TerminologyCapabilitiesClosure] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   TerminologyCapabilities
   terminologycapabilities.xsd
       A TerminologyCapabilities resource documents a set of capabilities (behaviors)
   of a FHIR Terminology Server that may be used as a statement of actual server
   functionality or a statement of required or desired server implementation.
       If the element is present, it must have either a @value, an @id, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



