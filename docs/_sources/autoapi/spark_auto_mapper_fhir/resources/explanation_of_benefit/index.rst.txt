:mod:`spark_auto_mapper_fhir.resources.explanation_of_benefit`
==============================================================

.. py:module:: spark_auto_mapper_fhir.resources.explanation_of_benefit


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.explanation_of_benefit.ExplanationOfBenefit



.. class:: ExplanationOfBenefit(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, meta: Optional[spark_auto_mapper_fhir.complex_types.meta.Meta] = None, implicitRules: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, language: Optional[spark_auto_mapper_fhir.value_sets.common_languages.CommonLanguagesCode] = None, text: Optional[spark_auto_mapper_fhir.complex_types.narrative.Narrative] = None, contained: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.resource_container.ResourceContainer]] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, identifier: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.identifier.Identifier]] = None, status: spark_auto_mapper_fhir.value_sets.explanation_of_benefit_status.ExplanationOfBenefitStatusCode, type_: spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.claim_type_codes.ClaimTypeCodesCode], subType: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.example_claim_sub_type_codes.ExampleClaimSubTypeCodesCode]] = None, use: spark_auto_mapper_fhir.value_sets.use.UseCode, patient: spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.patient.Patient], billablePeriod: Optional[spark_auto_mapper_fhir.complex_types.period.Period] = None, created: spark_auto_mapper_fhir.fhir_types.date_time.FhirDateTime, enterer: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[Union[(spark_auto_mapper_fhir.resources.practitioner.Practitioner, spark_auto_mapper_fhir.resources.practitioner_role.PractitionerRole)]]] = None, insurer: spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.organization.Organization], provider: spark_auto_mapper_fhir.complex_types.reference.Reference[Union[(spark_auto_mapper_fhir.resources.practitioner.Practitioner, spark_auto_mapper_fhir.resources.practitioner_role.PractitionerRole, spark_auto_mapper_fhir.resources.organization.Organization)]], priority: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.process_priority_codes.ProcessPriorityCodesCode]] = None, fundsReserveRequested: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.funds_reservation_codes.FundsReservationCodesCode]] = None, fundsReserve: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.funds_reservation_codes.FundsReservationCodesCode]] = None, related: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_related.ExplanationOfBenefitRelated]] = None, prescription: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[Union[(spark_auto_mapper_fhir.resources.medication_request.MedicationRequest, spark_auto_mapper_fhir.resources.vision_prescription.VisionPrescription)]]] = None, originalPrescription: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.medication_request.MedicationRequest]] = None, payee: Optional[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_payee.ExplanationOfBenefitPayee] = None, referral: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.service_request.ServiceRequest]] = None, facility: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.location.Location]] = None, claim: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.claim.Claim]] = None, claimResponse: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.claim_response.ClaimResponse]] = None, outcome: spark_auto_mapper_fhir.value_sets.claim_processing_codes.ClaimProcessingCodesCode, disposition: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, preAuthRef: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.fhir_types.string.FhirString]] = None, preAuthRefPeriod: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.period.Period]] = None, careTeam: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_care_team.ExplanationOfBenefitCareTeam]] = None, supportingInfo: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_supporting_info.ExplanationOfBenefitSupportingInfo]] = None, diagnosis: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_diagnosis.ExplanationOfBenefitDiagnosis]] = None, procedure: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_procedure.ExplanationOfBenefitProcedure]] = None, precedence: Optional[spark_auto_mapper_fhir.fhir_types.positive_int.FhirPositiveInt] = None, insurance: spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_insurance.ExplanationOfBenefitInsurance], accident: Optional[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_accident.ExplanationOfBenefitAccident] = None, item: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_item.ExplanationOfBenefitItem]] = None, addItem: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_add_item.ExplanationOfBenefitAddItem]] = None, adjudication: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_adjudication.ExplanationOfBenefitAdjudication]] = None, total: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_total.ExplanationOfBenefitTotal]] = None, payment: Optional[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_payment.ExplanationOfBenefitPayment] = None, formCode: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.form_codes.FormCodesCode]] = None, form: Optional[spark_auto_mapper_fhir.complex_types.attachment.Attachment] = None, processNote: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_process_note.ExplanationOfBenefitProcessNote]] = None, benefitPeriod: Optional[spark_auto_mapper_fhir.complex_types.period.Period] = None, benefitBalance: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_benefit_balance.ExplanationOfBenefitBenefitBalance]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   ExplanationOfBenefit
   explanationofbenefit.xsd
       This resource provides: the claim details; adjudication details from the
   processing of a Claim; and optionally account balance information, for
   informing the subscriber of the benefits provided.
       If the element is present, it must have either a @value, an @id, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



