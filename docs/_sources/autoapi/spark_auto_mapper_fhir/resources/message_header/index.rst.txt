:py:mod:`spark_auto_mapper_fhir.resources.message_header`
=========================================================

.. py:module:: spark_auto_mapper_fhir.resources.message_header


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.resources.message_header.MessageHeader




.. py:class:: MessageHeader(*, id_ = None, meta = None, implicitRules = None, language = None, text = None, contained = None, extension = None, modifierExtension = None, eventCoding = None, eventUri = None, destination = None, sender = None, enterer = None, author = None, source, responsible = None, reason = None, response = None, focus = None, definition = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_resource_base.FhirResourceBase`

   MessageHeader
   messageheader.xsd
       The header for a message exchange that is either requesting or responding to
   an action.  The reference(s) that are the subject of the action as well as
   other information related to the action are typically transmitted in a bundle
   in which the MessageHeader resource instance is the first resource in the
   bundle.
       If the element is present, it must have either a @value, an @id, or extensions

       The header for a message exchange that is either requesting or responding to
   an action.  The reference(s) that are the subject of the action as well as
   other information related to the action are typically transmitted in a bundle
   in which the MessageHeader resource instance is the first resource in the
   bundle.
       If the element is present, it must have either a @value, an @id, or extensions

       :param id_: The logical id of the resource, as used in the URL for the resource. Once
   assigned, this value never changes.
       :param meta: The metadata about the resource. This is content that is maintained by the
   infrastructure. Changes to the content might not always be associated with
   version changes to the resource.
       :param implicitRules: A reference to a set of rules that were followed when the resource was
   constructed, and which must be understood when processing the content. Often,
   this is a reference to an implementation guide that defines the special rules
   along with other profiles etc.
       :param language: The base language in which the resource is written.
       :param text: A human-readable narrative that contains a summary of the resource and can be
   used to represent the content of the resource to a human. The narrative need
   not encode all the structured data, but is required to contain sufficient
   detail to make it "clinically safe" for a human to just read the narrative.
   Resource definitions may define what content should be represented in the
   narrative to ensure clinical safety.
       :param contained: These resources do not have an independent existence apart from the resource
   that contains them - they cannot be identified independently, and nor can they
   have their own independent transaction scope.
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the resource. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the resource and that modifies the understanding of the element
   that contains it and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer is allowed to define an extension, there is a set of requirements
   that SHALL be met as part of the definition of the extension. Applications
   processing a resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param eventCoding: None
       :param eventUri: None
       :param destination: The destination application which the message is intended for.
       :param sender: Identifies the sending system to allow the use of a trust relationship.
       :param enterer: The person or device that performed the data entry leading to this message.
   When there is more than one candidate, pick the most proximal to the message.
   Can provide other enterers in extensions.
       :param author: The logical author of the message - the person or device that decided the
   described event should happen. When there is more than one candidate, pick the
   most proximal to the MessageHeader. Can provide other authors in extensions.
       :param source: The source application from which this message originated.
       :param responsible: The person or organization that accepts overall responsibility for the
   contents of the message. The implication is that the message event happened
   under the policies of the responsible party.
       :param reason: Coded indication of the cause for the event - indicates  a reason for the
   occurrence of the event that is a focus of this message.
       :param response: Information about the message that this message is a response to.  Only
   present if this message is a response.
       :param focus: The actual data of the message - a reference to the root/focus class of the
   event.
       :param definition: Permanent link to the MessageDefinition for this message.

   .. py:method:: get_schema(self, include_extension)



