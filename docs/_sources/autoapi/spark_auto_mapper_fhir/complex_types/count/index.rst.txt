:py:mod:`spark_auto_mapper_fhir.complex_types.count`
====================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.count


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.count.Count




.. py:class:: Count(*, value = None, comparator = None, unit = None, system = None, code = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   Count
   fhir-base.xsd
       A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       A measured amount (or an amount that can potentially be measured). Note that
   measured amounts include amounts that are not precisely quantified, including
   amounts involving arbitrary units and floating currencies.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param value: The value of the measured amount. The value includes an implicit precision in
   the presentation of the value.
       :param comparator: How the value should be understood and represented - whether the actual value
   is greater or less than the stated value due to measurement issues; e.g. if
   the comparator is "<" , then the real value is < stated value.
       :param unit: A human-readable form of the unit.
       :param system: The identification of the system that provides the coded form of the unit.
       :param code: A computer processable form of the unit in some unit representation system.

   .. py:method:: get_schema(self, include_extension)



