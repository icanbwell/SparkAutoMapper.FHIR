:mod:`spark_auto_mapper_fhir.complex_types.related_artifact`
============================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.related_artifact


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.related_artifact.RelatedArtifact



.. class:: RelatedArtifact(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, type_: spark_auto_mapper_fhir.value_sets.related_artifact_type.RelatedArtifactTypeCode, label: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, display: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, citation: Optional[spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown] = None, url: Optional[spark_auto_mapper_fhir.fhir_types.url.FhirUrl] = None, document: Optional[spark_auto_mapper_fhir.complex_types.attachment.Attachment] = None, resource: Optional[spark_auto_mapper_fhir.fhir_types.canonical.FhirCanonical] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   RelatedArtifact
   fhir-base.xsd
       Related artifacts such as additional documentation, justification, or bibliographic references.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



