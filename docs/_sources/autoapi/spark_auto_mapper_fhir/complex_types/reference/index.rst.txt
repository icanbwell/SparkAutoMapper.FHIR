:mod:`spark_auto_mapper_fhir.complex_types.reference`
=====================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.reference


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.reference.Reference



.. data:: _T
   

   

.. class:: Reference(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, reference: Optional[spark_auto_mapper_fhir.fhir_types.fhir_reference.FhirReference] = None, type_: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, identifier: Optional[spark_auto_mapper_fhir.complex_types.identifier.Identifier] = None, display: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`, :class:`Generic[_T]`

   Reference
   fhir-base.xsd
       A reference from one resource to another.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



