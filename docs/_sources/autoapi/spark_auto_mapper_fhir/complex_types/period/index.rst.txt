:py:mod:`spark_auto_mapper_fhir.complex_types.period`
=====================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.period


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.period.Period




.. py:class:: Period(*, id_ = None, extension = None, start = None, end = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   Period
   fhir-base.xsd
       A time period defined by a start and end date and optionally time.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       A time period defined by a start and end date and optionally time.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param start: The start of the period. The boundary is inclusive.
       :param end: The end of the period. If the end of the period is missing, it means no end
   was known or planned at the time the instance was created. The start may be in
   the past, and the end date in the future, which means that period is
   expected/planned to end at that time.

   .. py:method:: get_schema(self, include_extension)



