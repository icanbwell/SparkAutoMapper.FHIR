:py:mod:`spark_auto_mapper_fhir.complex_types.data_requirement`
===============================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.data_requirement


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.data_requirement.DataRequirement




.. py:class:: DataRequirement(*, id_ = None, extension = None, type_, profile = None, subjectCodeableConcept = None, subjectReference = None, mustSupport = None, codeFilter = None, dateFilter = None, limit = None, sort = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   DataRequirement
   fhir-base.xsd
       Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Describes a required data item for evaluation in terms of the type of data,
   and optional code or date-based filters of the data.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param type_: The type of the required data, specified as the type name of a resource. For
   profiles, this value is set to the type of the base resource of the profile.
       :param profile: The profile of the required data, specified as the uri of the profile
   definition.
       :param subjectCodeableConcept: None
       :param subjectReference: None
       :param mustSupport: Indicates that specific elements of the type are referenced by the knowledge
   module and must be supported by the consumer in order to obtain an effective
   evaluation. This does not mean that a value is required for this element, only
   that the consuming system must understand the element and be able to provide
   values for it if they are available.

   The value of mustSupport SHALL be a FHIRPath resolveable on the type of the
   DataRequirement. The path SHALL consist only of identifiers, constant
   indexers, and .resolve() (see the [Simple FHIRPath
   Profile](fhirpath.html#simple) for full details).
       :param codeFilter: Code filters specify additional constraints on the data, specifying the value
   set of interest for a particular element of the data. Each code filter defines
   an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
       :param dateFilter: Date filters specify additional constraints on the data in terms of the
   applicable date range for specific elements. Each date filter specifies an
   additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
       :param limit: Specifies a maximum number of results that are required (uses the _count
   search parameter).
       :param sort: Specifies the order of the results to be returned.

   .. py:method:: get_schema(self, include_extension)



