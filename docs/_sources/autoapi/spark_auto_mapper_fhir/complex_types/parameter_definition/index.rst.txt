:py:mod:`spark_auto_mapper_fhir.complex_types.parameter_definition`
===================================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.parameter_definition


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.parameter_definition.ParameterDefinition




.. py:class:: ParameterDefinition(*, id_ = None, extension = None, name = None, use, min = None, max = None, documentation = None, type_, profile = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   ParameterDefinition
   fhir-base.xsd
       The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       The parameters to the module. This collection specifies both the input and
   output parameters. Input parameters are provided by the caller as part of the
   $evaluate operation. Output parameters are included in the GuidanceResponse.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param name: The name of the parameter used to allow access to the value of the parameter
   in evaluation contexts.
       :param use: Whether the parameter is input or output for the module.
       :param min: The minimum number of times this parameter SHALL appear in the request or
   response.
       :param max: The maximum number of times this element is permitted to appear in the request
   or response.
       :param documentation: A brief discussion of what the parameter is for and how it is used by the
   module.
       :param type_: The type of the parameter.
       :param profile: If specified, this indicates a profile that the input data must conform to, or
   that the output data will conform to.

   .. py:method:: get_schema(self, include_extension)



