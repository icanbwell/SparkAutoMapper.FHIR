:mod:`spark_auto_mapper_fhir.complex_types.coding`
==================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.coding


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.coding.Coding



.. data:: _T
   

   

.. class:: Coding(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, system: Optional[spark_auto_mapper_fhir.fhir_types.uri.FhirUri] = None, version: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, code: Optional[_T] = None, display: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, userSelected: Optional[spark_auto_mapper_fhir.fhir_types.boolean.FhirBoolean] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`, :class:`Generic[_T]`

   Coding
   fhir-base.xsd
       A reference to a code defined by a terminology system.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



