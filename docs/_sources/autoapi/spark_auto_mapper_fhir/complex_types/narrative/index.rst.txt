:py:mod:`spark_auto_mapper_fhir.complex_types.narrative`
========================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.narrative


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.narrative.Narrative




.. py:class:: Narrative(*, id_ = None, extension = None, status)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   Narrative
   fhir-base.xsd
       A human-readable summary of the resource conveying the essential clinical and business information for the resource.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       A human-readable summary of the resource conveying the essential clinical and
   business information for the resource.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param status: The status of the narrative - whether it's entirely generated (from just the
   defined data or the extensions too), or whether a human authored it and it may
   contain additional data.

   .. py:method:: get_schema(self, include_extension)



