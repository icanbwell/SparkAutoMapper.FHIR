:py:mod:`spark_auto_mapper_fhir.complex_types.usage_context`
============================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.usage_context


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.usage_context.UsageContext




.. py:class:: UsageContext(*, id_ = None, extension = None, code, valueCodeableConcept = None, valueQuantity = None, valueRange = None, valueReference = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   UsageContext
   fhir-base.xsd
       Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Specifies clinical/business/etc. metadata that can be used to retrieve, index
   and/or categorize an artifact. This metadata can either be specific to the
   applicable population (e.g., age category, DRG) or the specific context of
   care (e.g., venue, care setting, provider of care).
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param code: A code that identifies the type of context being specified by this usage
   context.
       :param valueCodeableConcept: None
       :param valueQuantity: None
       :param valueRange: None
       :param valueReference: None

   .. py:method:: get_schema(self, include_extension)



