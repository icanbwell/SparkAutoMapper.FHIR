:mod:`spark_auto_mapper_fhir.complex_types.sampled_data`
========================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.sampled_data


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.sampled_data.SampledData



.. class:: SampledData(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, origin: spark_auto_mapper_fhir.complex_types.quantity.Quantity, period: spark_auto_mapper_fhir.fhir_types.decimal.FhirDecimal, factor: Optional[spark_auto_mapper_fhir.fhir_types.decimal.FhirDecimal] = None, lowerLimit: Optional[spark_auto_mapper_fhir.fhir_types.decimal.FhirDecimal] = None, upperLimit: Optional[spark_auto_mapper_fhir.fhir_types.decimal.FhirDecimal] = None, dimensions: spark_auto_mapper_fhir.fhir_types.positive_int.FhirPositiveInt, data: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   SampledData
   fhir-base.xsd
       A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



