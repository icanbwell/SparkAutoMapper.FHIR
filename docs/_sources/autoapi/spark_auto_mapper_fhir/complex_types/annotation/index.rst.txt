:mod:`spark_auto_mapper_fhir.complex_types.annotation`
======================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.annotation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.annotation.Annotation



.. class:: Annotation(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, authorReference: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[Union[(spark_auto_mapper_fhir.resources.practitioner.Practitioner, spark_auto_mapper_fhir.resources.patient.Patient, spark_auto_mapper_fhir.resources.related_person.RelatedPerson, spark_auto_mapper_fhir.resources.organization.Organization)]]] = None, authorString: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, time: Optional[spark_auto_mapper_fhir.fhir_types.date_time.FhirDateTime] = None, text: spark_auto_mapper_fhir.fhir_types.markdown.FhirMarkdown)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   Annotation
   fhir-base.xsd
       A  text note which also  contains information about who made the statement and when.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

   .. method:: get_schema(self, include_extension: bool) -> Optional[Union[(pyspark.sql.types.StructType, pyspark.sql.types.DataType)]]



