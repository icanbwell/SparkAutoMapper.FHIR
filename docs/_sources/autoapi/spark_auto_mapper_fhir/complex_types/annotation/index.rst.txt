:py:mod:`spark_auto_mapper_fhir.complex_types.annotation`
=========================================================

.. py:module:: spark_auto_mapper_fhir.complex_types.annotation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.complex_types.annotation.Annotation




.. py:class:: Annotation(*, id_ = None, extension = None, authorReference = None, authorString = None, time = None, text)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_complex_type_base.FhirComplexTypeBase`

   Annotation
   fhir-base.xsd
       A  text note which also  contains information about who made the statement and when.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       A  text note which also  contains information about who made the statement and
   when.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param authorReference: None
       :param authorString: None
       :param time: Indicates when this particular annotation was made.
       :param text: The text of the annotation in markdown format.

   .. py:method:: get_schema(self, include_extension)



