:py:mod:`spark_auto_mapper_fhir.backbone_elements.code_system_concept`
======================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.code_system_concept


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.code_system_concept.CodeSystemConcept




.. py:class:: CodeSystemConcept(*, id_ = None, extension = None, modifierExtension = None, code, display = None, definition = None, designation = None, property = None, concept = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   CodeSystem.Concept
       The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.

       The CodeSystem resource is used to declare the existence of and describe a
   code system or code system supplement and its key properties, and optionally
   define a part or all of its content.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param code: A code - a text symbol - that uniquely identifies the concept within the code
   system.
       :param display: A human readable string that is the recommended default way to present this
   concept to a user.
       :param definition: The formal definition of the concept. The code system resource does not make
   formal definitions required, because of the prevalence of legacy systems.
   However, they are highly recommended, as without them there is no formal
   meaning associated with the concept.
       :param designation: Additional representations for the concept - other languages, aliases,
   specialized purposes, used for particular purposes, etc.
       :param property: A property value for this concept.
       :param concept: Defines children of a concept to produce a hierarchy of concepts. The nature
   of the relationships is variable (is-a/contains/categorizes) - see
   hierarchyMeaning.


