:py:mod:`spark_auto_mapper_fhir.backbone_elements.value_set_compose`
====================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.value_set_compose


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.value_set_compose.ValueSetCompose




.. py:class:: ValueSetCompose(*, id_ = None, extension = None, modifierExtension = None, lockedDate = None, inactive = None, include, exclude = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ValueSet.Compose
       A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).

       A ValueSet resource instance specifies a set of codes drawn from one or more
   code systems, intended for use in a particular context. Value sets link
   between [[[CodeSystem]]] definitions and their use in [coded
   elements](terminologies.html).

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param lockedDate: The Locked Date is  the effective date that is used to determine the version
   of all referenced Code Systems and Value Set Definitions included in the
   compose that are not already tied to a specific version.
       :param inactive: Whether inactive codes - codes that are not approved for current use - are in
   the value set. If inactive = true, inactive codes are to be included in the
   expansion, if inactive = false, the inactive codes will not be included in the
   expansion. If absent, the behavior is determined by the implementation, or by
   the applicable $expand parameters (but generally, inactive codes would be
   expected to be included).
       :param include: Include one or more codes from a code system or other value set(s).
       :param exclude: Exclude one or more codes from the value set based on code system filters
   and/or other value sets.


