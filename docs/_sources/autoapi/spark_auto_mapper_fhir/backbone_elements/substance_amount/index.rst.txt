:py:mod:`spark_auto_mapper_fhir.backbone_elements.substance_amount`
===================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.substance_amount


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.substance_amount.SubstanceAmount




.. py:class:: SubstanceAmount(*, id_ = None, extension = None, modifierExtension = None, amountQuantity = None, amountRange = None, amountString = None, amountType = None, amountText = None, referenceRange = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   SubstanceAmount
       Chemical substances are a single substance type whose primary defining element is the molecular structure. Chemical substances shall be defined on the basis of their complete covalent molecular structure; the presence of a salt (counter-ion) and/or solvates (water, alcohols) is also captured. Purity, grade, physical form or particle size are not taken into account in the definition of a chemical substance or in the assignment of a Substance ID.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Chemical substances are a single substance type whose primary defining element
   is the molecular structure. Chemical substances shall be defined on the basis
   of their complete covalent molecular structure; the presence of a salt
   (counter-ion) and/or solvates (water, alcohols) is also captured. Purity,
   grade, physical form or particle size are not taken into account in the
   definition of a chemical substance or in the assignment of a Substance ID.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param amountQuantity: None
       :param amountRange: None
       :param amountString: None
       :param amountType: Most elements that require a quantitative value will also have a field called
   amount type. Amount type should always be specified because the actual value
   of the amount is often dependent on it. EXAMPLE: In capturing the actual
   relative amounts of substances or molecular fragments it is essential to
   indicate whether the amount refers to a mole ratio or weight ratio. For any
   given element an effort should be made to use same the amount type for all
   related definitional elements.
       :param amountText: A textual comment on a numeric value.
       :param referenceRange: Reference range of possible or expected values.


