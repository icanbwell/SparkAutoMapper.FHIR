:py:mod:`spark_auto_mapper_fhir.backbone_elements.message_header_source`
========================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.message_header_source


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.message_header_source.MessageHeaderSource




.. py:class:: MessageHeaderSource(*, id_ = None, extension = None, modifierExtension = None, name = None, software = None, version = None, contact = None, endpoint)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   MessageHeader.Source
       The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.

       The header for a message exchange that is either requesting or responding to
   an action.  The reference(s) that are the subject of the action as well as
   other information related to the action are typically transmitted in a bundle
   in which the MessageHeader resource instance is the first resource in the
   bundle.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param name: Human-readable name for the source system.
       :param software: May include configuration or other information useful in debugging.
       :param version: Can convey versions of multiple systems in situations where a message passes
   through multiple hands.
       :param contact: An e-mail, phone, website or other contact point to use to resolve issues with
   message communications.
       :param endpoint: Identifies the routing target to send acknowledgements to.


