:py:mod:`spark_auto_mapper_fhir.backbone_elements.test_script_assert`
=====================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.test_script_assert


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.test_script_assert.TestScriptAssert




.. py:class:: TestScriptAssert(*, id_ = None, extension = None, modifierExtension = None, label = None, description = None, direction = None, compareToSourceId = None, compareToSourceExpression = None, compareToSourcePath = None, contentType = None, expression = None, headerField = None, minimumId = None, navigationLinks = None, operator = None, path = None, requestMethod = None, requestURL = None, resource = None, response = None, responseCode = None, sourceId = None, validateProfileId = None, value = None, warningOnly)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   TestScript.Assert
       A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.

       A structured set of tests against a FHIR server or client implementation to
   determine compliance against the FHIR specification.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param label: The label would be used for tracking/logging purposes by test engines.
       :param description: The description would be used by test engines for tracking and reporting
   purposes.
       :param direction: The direction to use for the assertion.
       :param compareToSourceId: Id of the source fixture used as the contents to be evaluated by either the
   "source/expression" or "sourceId/path" definition.
       :param compareToSourceExpression: The FHIRPath expression to evaluate against the source fixture. When
   compareToSourceId is defined, either compareToSourceExpression or
   compareToSourcePath must be defined, but not both.
       :param compareToSourcePath: XPath or JSONPath expression to evaluate against the source fixture. When
   compareToSourceId is defined, either compareToSourceExpression or
   compareToSourcePath must be defined, but not both.
       :param contentType: The mime-type contents to compare against the request or response message
   'Content-Type' header.
       :param expression: The FHIRPath expression to be evaluated against the request or response
   message contents - HTTP headers and payload.
       :param headerField: The HTTP header field name e.g. 'Location'.
       :param minimumId: The ID of a fixture.  Asserts that the response contains at a minimum the
   fixture specified by minimumId.
       :param navigationLinks: Whether or not the test execution performs validation on the bundle navigation
   links.
       :param operator: The operator type defines the conditional behavior of the assert. If not
   defined, the default is equals.
       :param path: The XPath or JSONPath expression to be evaluated against the fixture
   representing the response received from server.
       :param requestMethod: The request method or HTTP operation code to compare against that used by the
   client system under test.
       :param requestURL: The value to use in a comparison against the request URL path string.
       :param resource: The type of the resource.  See http://build.fhir.org/resourcelist.html.
       :param response: okay | created | noContent | notModified | bad | forbidden | notFound |
   methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
       :param responseCode: The value of the HTTP response code to be tested.
       :param sourceId: Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
       :param validateProfileId: The ID of the Profile to validate against.
       :param value: The value to compare to.
       :param warningOnly: Whether or not the test execution will produce a warning only on error for
   this assert.


