:py:mod:`spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_diagnosis`
===================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_diagnosis


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.explanation_of_benefit_diagnosis.ExplanationOfBenefitDiagnosis




.. py:class:: ExplanationOfBenefitDiagnosis(*, id_ = None, extension = None, modifierExtension = None, sequence, diagnosisCodeableConcept = None, diagnosisReference = None, type_ = None, onAdmission = None, packageCode = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ExplanationOfBenefit.Diagnosis
       This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.

       This resource provides: the claim details; adjudication details from the
   processing of a Claim; and optionally account balance information, for
   informing the subscriber of the benefits provided.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param sequence: A number to uniquely identify diagnosis entries.
       :param diagnosisCodeableConcept: None
       :param diagnosisReference: None
       :param type_: When the condition was observed or the relative ranking.
       :param onAdmission: Indication of whether the diagnosis was present on admission to a facility.
       :param packageCode: A package billing code or bundle code used to group products and services to a
   particular health condition (such as heart attack) which is based on a
   predetermined grouping code system.


