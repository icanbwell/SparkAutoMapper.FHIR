:py:mod:`spark_auto_mapper_fhir.backbone_elements.timing`
=========================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.timing


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.timing.Timing




.. py:class:: Timing(*, id_ = None, extension = None, modifierExtension = None, event = None, repeat = None, code = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Timing
       Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Specifies an event that may occur multiple times. Timing schedules are used to
   record when things are planned, expected or requested to occur. The most
   common usage is in dosage instructions for medications. They are also used
   when planning care of various kinds, and may be used for reporting the
   schedule to which past regular activities were carried out.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param event: Identifies specific times when the event occurs.
       :param repeat: A set of rules that describe when the event is scheduled.
       :param code: A code for the timing schedule (or just text in code.text). Some codes such as
   BID are ubiquitous, but many institutions define their own additional codes.
   If a code is provided, the code is understood to be a complete statement of
   whatever is specified in the structured timing data, and either the code or
   the data may be used to interpret the Timing, with the exception that
   .repeat.bounds still applies over the code (and is not contained in the code).


