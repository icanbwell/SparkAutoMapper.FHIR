:py:mod:`spark_auto_mapper_fhir.backbone_elements.consent_provision`
====================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.consent_provision


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.consent_provision.ConsentProvision




.. py:class:: ConsentProvision(*, id_ = None, extension = None, modifierExtension = None, type_ = None, period = None, actor = None, action = None, securityLabel = None, purpose = None, class_ = None, code = None, dataPeriod = None, data = None, provision = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Consent.Provision
       A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.

       A record of a healthcare consumer’s  choices, which permits or denies
   identified recipient(s) or recipient role(s) to perform one or more actions
   within a given policy context, for specific purposes and periods of time.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param type_: Action  to take - permit or deny - when the rule conditions are met.  Not
   permitted in root rule, required in all nested rules.
       :param period: The timeframe in this rule is valid.
       :param actor: Who or what is controlled by this rule. Use group to identify a set of actors
   by some property they share (e.g. 'admitting officers').
       :param action: Actions controlled by this Rule.
       :param securityLabel: A security label, comprised of 0..* security label fields (Privacy tags),
   which define which resources are controlled by this exception.
       :param purpose: The context of the activities a user is taking - why the user is accessing the
   data - that are controlled by this rule.
       :param class_: The class of information covered by this rule. The type can be a FHIR resource
   type, a profile on a type, or a CDA document, or some other type that
   indicates what sort of information the consent relates to.
       :param code: If this code is found in an instance, then the rule applies.
       :param dataPeriod: Clinical or Operational Relevant period of time that bounds the data
   controlled by this rule.
       :param data: The resources controlled by this rule if specific resources are referenced.
       :param provision: Rules which provide exceptions to the base rule or subrules.


