:py:mod:`spark_auto_mapper_fhir.backbone_elements.charge_item_definition_price_component`
=========================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.charge_item_definition_price_component


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.charge_item_definition_price_component.ChargeItemDefinitionPriceComponent




.. py:class:: ChargeItemDefinitionPriceComponent(*, id_ = None, extension = None, modifierExtension = None, type_, code = None, factor = None, amount = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ChargeItemDefinition.PriceComponent
       The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.

       The ChargeItemDefinition resource provides the properties that apply to the
   (billing) codes necessary to calculate costs and prices. The properties may
   differ largely depending on type and realm, therefore this resource gives only
   a rough structure and requires profiling for each type of billing code system.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param type_: This code identifies the type of the component.
       :param code: A code that identifies the component. Codes may be used to differentiate
   between kinds of taxes, surcharges, discounts etc.
       :param factor: The factor that has been applied on the base price for calculating this
   component.
       :param amount: The amount calculated for this component.


