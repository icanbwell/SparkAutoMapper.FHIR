:py:mod:`spark_auto_mapper_fhir.backbone_elements.questionnaire_item`
=====================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.questionnaire_item


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.questionnaire_item.QuestionnaireItem




.. py:class:: QuestionnaireItem(*, id_ = None, extension = None, modifierExtension = None, linkId, definition = None, code = None, prefix = None, text = None, type_, enableWhen = None, enableBehavior = None, required = None, repeats = None, readOnly = None, maxLength = None, answerValueSet = None, answerOption = None, initial = None, item = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Questionnaire.Item
       A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.

       A structured set of questions intended to guide the collection of answers from
   end-users. Questionnaires provide detailed control over order, presentation,
   phraseology and grouping to allow coherent, consistent data collection.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param linkId: An identifier that is unique within the Questionnaire allowing linkage to the
   equivalent item in a QuestionnaireResponse resource.
       :param definition: This element is a URI that refers to an [[[ElementDefinition]]] that provides
   information about this item, including information that might otherwise be
   included in the instance of the Questionnaire resource. A detailed description
   of the construction of the URI is shown in Comments, below. If this element is
   present then the following element values MAY be derived from the Element
   Definition if the corresponding elements of this Questionnaire resource
   instance have no value:

   * code (ElementDefinition.code)
   * type (ElementDefinition.type)
   * required (ElementDefinition.min)
   * repeats (ElementDefinition.max)
   * maxLength (ElementDefinition.maxLength)
   * answerValueSet (ElementDefinition.binding)
   * options (ElementDefinition.binding).
       :param code: A terminology code that corresponds to this group or question (e.g. a code
   from LOINC, which defines many questions and answers).
       :param prefix: A short label for a particular group, question or set of display text within
   the questionnaire used for reference by the individual completing the
   questionnaire.
       :param text: The name of a section, the text of a question or text content for a display
   item.
       :param type_: The type of questionnaire item this is - whether text for display, a grouping
   of other items or a particular type of data to be captured (string, integer,
   coded choice, etc.).
       :param enableWhen: A constraint indicating that this item should only be enabled (displayed/allow
   answers to be captured) when the specified condition is true.
       :param enableBehavior: Controls how multiple enableWhen values are interpreted -  whether all or any
   must be true.
       :param required: An indication, if true, that the item must be present in a "completed"
   QuestionnaireResponse.  If false, the item may be skipped when answering the
   questionnaire.
       :param repeats: An indication, if true, that the item may occur multiple times in the
   response, collecting multiple answers for questions or multiple sets of
   answers for groups.
       :param readOnly: An indication, when true, that the value cannot be changed by a human
   respondent to the Questionnaire.
       :param maxLength: The maximum number of characters that are permitted in the answer to be
   considered a "valid" QuestionnaireResponse.
       :param answerValueSet: A reference to a value set containing a list of codes representing permitted
   answers for a "choice" or "open-choice" question.
       :param answerOption: One of the permitted answers for a "choice" or "open-choice" question.
       :param initial: One or more values that should be pre-populated in the answer when initially
   rendering the questionnaire for user input.
       :param item: Text, questions and other groups to be nested beneath a question or group.


