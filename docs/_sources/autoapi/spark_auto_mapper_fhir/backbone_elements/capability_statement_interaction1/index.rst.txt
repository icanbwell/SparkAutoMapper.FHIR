:py:mod:`spark_auto_mapper_fhir.backbone_elements.capability_statement_interaction1`
====================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.capability_statement_interaction1


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.capability_statement_interaction1.CapabilityStatementInteraction1




.. py:class:: CapabilityStatementInteraction1(*, id_ = None, extension = None, modifierExtension = None, code, documentation = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   CapabilityStatement.Interaction1
       A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.

       A Capability Statement documents a set of capabilities (behaviors) of a FHIR
   Server for a particular version of FHIR that may be used as a statement of
   actual server functionality or a statement of required or desired server
   implementation.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param code: A coded identifier of the operation, supported by the system.
       :param documentation: Guidance specific to the implementation of this operation, such as limitations
   on the kind of transactions allowed, or information about system wide search
   is implemented.


