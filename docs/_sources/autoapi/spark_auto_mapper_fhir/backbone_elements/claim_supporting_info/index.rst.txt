:py:mod:`spark_auto_mapper_fhir.backbone_elements.claim_supporting_info`
========================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.claim_supporting_info


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.claim_supporting_info.ClaimSupportingInfo




.. py:class:: ClaimSupportingInfo(*, id_ = None, extension = None, modifierExtension = None, sequence, category, code = None, timingDate = None, timingPeriod = None, valueBoolean = None, valueString = None, valueQuantity = None, valueAttachment = None, valueReference = None, reason = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Claim.SupportingInfo
       A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.

       A provider issued list of professional services and products which have been
   provided, or are to be provided, to a patient which is sent to an insurer for
   reimbursement.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param sequence: A number to uniquely identify supporting information entries.
       :param category: The general class of the information supplied: information; exception;
   accident, employment; onset, etc.
       :param code: System and code pertaining to the specific information regarding special
   conditions relating to the setting, treatment or patient  for which care is
   sought.
       :param timingDate: None
       :param timingPeriod: None
       :param valueBoolean: None
       :param valueString: None
       :param valueQuantity: None
       :param valueAttachment: None
       :param valueReference: None
       :param reason: Provides the reason in the situation where a reason code is required in
   addition to the content.


