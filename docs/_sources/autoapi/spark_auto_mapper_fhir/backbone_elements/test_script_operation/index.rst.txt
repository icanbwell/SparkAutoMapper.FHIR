:py:mod:`spark_auto_mapper_fhir.backbone_elements.test_script_operation`
========================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.test_script_operation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.test_script_operation.TestScriptOperation




.. py:class:: TestScriptOperation(*, id_ = None, extension = None, modifierExtension = None, type_ = None, resource = None, label = None, description = None, accept = None, contentType = None, destination = None, encodeRequestUrl, method = None, origin = None, params = None, requestHeader = None, requestId = None, responseId = None, sourceId = None, targetId = None, url = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   TestScript.Operation
       A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.

       A structured set of tests against a FHIR server or client implementation to
   determine compliance against the FHIR specification.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param type_: Server interaction or operation type.
       :param resource: The type of the resource.  See http://build.fhir.org/resourcelist.html.
       :param label: The label would be used for tracking/logging purposes by test engines.
       :param description: The description would be used by test engines for tracking and reporting
   purposes.
       :param accept: The mime-type to use for RESTful operation in the 'Accept' header.
       :param contentType: The mime-type to use for RESTful operation in the 'Content-Type' header.
       :param destination: The server where the request message is destined for.  Must be one of the
   server numbers listed in TestScript.destination section.
       :param encodeRequestUrl: Whether or not to implicitly send the request url in encoded format. The
   default is true to match the standard RESTful client behavior. Set to false
   when communicating with a server that does not support encoded url paths.
       :param method: The HTTP method the test engine MUST use for this operation regardless of any
   other operation details.
       :param origin: The server where the request message originates from.  Must be one of the
   server numbers listed in TestScript.origin section.
       :param params: Path plus parameters after [type].  Used to set parts of the request URL
   explicitly.
       :param requestHeader: Header elements would be used to set HTTP headers.
       :param requestId: The fixture id (maybe new) to map to the request.
       :param responseId: The fixture id (maybe new) to map to the response.
       :param sourceId: The id of the fixture used as the body of a PUT or POST request.
       :param targetId: Id of fixture used for extracting the [id],  [type], and [vid] for GET
   requests.
       :param url: Complete request URL.


