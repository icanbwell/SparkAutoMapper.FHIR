:mod:`spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_jurisdictional_authorization`
============================================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_jurisdictional_authorization


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.medicinal_product_authorization_jurisdictional_authorization.MedicinalProductAuthorizationJurisdictionalAuthorization



.. class:: MedicinalProductAuthorizationJurisdictionalAuthorization(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, identifier: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.identifier.Identifier]] = None, country: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode]] = None, jurisdiction: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode]]] = None, legalStatusOfSupply: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode]] = None, validityPeriod: Optional[spark_auto_mapper_fhir.complex_types.period.Period] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   MedicinalProductAuthorization.JurisdictionalAuthorization
   The regulatory authorization of a medicinal product.


