:py:mod:`spark_auto_mapper_fhir.backbone_elements.plan_definition_dynamic_value`
================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.plan_definition_dynamic_value


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.plan_definition_dynamic_value.PlanDefinitionDynamicValue




.. py:class:: PlanDefinitionDynamicValue(*, id_ = None, extension = None, modifierExtension = None, path = None, expression = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   PlanDefinition.DynamicValue
       This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical artifacts such as clinical decision support rules, order sets and protocols.

       This resource allows for the definition of various types of plans as a
   sharable, consumable, and executable artifact. The resource is general enough
   to support the description of a broad range of clinical artifacts such as
   clinical decision support rules, order sets and protocols.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param path: The path to the element to be customized. This is the path on the resource
   that will hold the result of the calculation defined by the expression. The
   specified path SHALL be a FHIRPath resolveable on the specified target type of
   the ActivityDefinition, and SHALL consist only of identifiers, constant
   indexers, and a restricted subset of functions. The path is allowed to contain
   qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse
   multiple-cardinality sub-elements (see the [Simple FHIRPath
   Profile](fhirpath.html#simple) for full details).
       :param expression: An expression specifying the value of the customized element.


