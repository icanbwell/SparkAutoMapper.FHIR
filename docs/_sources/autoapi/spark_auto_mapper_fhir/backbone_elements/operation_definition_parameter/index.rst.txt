:py:mod:`spark_auto_mapper_fhir.backbone_elements.operation_definition_parameter`
=================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.operation_definition_parameter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.operation_definition_parameter.OperationDefinitionParameter




.. py:class:: OperationDefinitionParameter(*, id_ = None, extension = None, modifierExtension = None, name, use, min, max, documentation = None, type_ = None, targetProfile = None, searchType = None, binding = None, referencedFrom = None, part = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   OperationDefinition.Parameter
       A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).

       A formal computable definition of an operation (on the RESTful interface) or a
   named query (using the search interaction).

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param name: The name of used to identify the parameter.
       :param use: Whether this is an input or an output parameter.
       :param min: The minimum number of times this parameter SHALL appear in the request or
   response.
       :param max: The maximum number of times this element is permitted to appear in the request
   or response.
       :param documentation: Describes the meaning or use of this parameter.
       :param type_: The type for this parameter.
       :param targetProfile: Used when the type is "Reference" or "canonical", and identifies a profile
   structure or implementation Guide that applies to the target of the reference
   this parameter refers to. If any profiles are specified, then the content must
   conform to at least one of them. The URL can be a local reference - to a
   contained StructureDefinition, or a reference to another StructureDefinition
   or Implementation Guide by a canonical URL. When an implementation guide is
   specified, the target resource SHALL conform to at least one profile defined
   in the implementation guide.
       :param searchType: How the parameter is understood as a search parameter. This is only used if
   the parameter type is 'string'.
       :param binding: Binds to a value set if this parameter is coded (code, Coding,
   CodeableConcept).
       :param referencedFrom: Identifies other resource parameters within the operation invocation that are
   expected to resolve to this resource.
       :param part: The parts of a nested Parameter.


