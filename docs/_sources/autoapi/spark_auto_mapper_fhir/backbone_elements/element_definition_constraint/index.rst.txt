:py:mod:`spark_auto_mapper_fhir.backbone_elements.element_definition_constraint`
================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.element_definition_constraint


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.element_definition_constraint.ElementDefinitionConstraint




.. py:class:: ElementDefinitionConstraint(*, id_ = None, extension = None, modifierExtension = None, key, requirements = None, severity, human, expression = None, xpath = None, source = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ElementDefinition.Constraint
       Captures constraints on each element within the resource, profile, or extension.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Captures constraints on each element within the resource, profile, or
   extension.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param key: Allows identification of which elements have their cardinalities impacted by
   the constraint.  Will not be referenced for constraints that do not affect
   cardinality.
       :param requirements: Description of why this constraint is necessary or appropriate.
       :param severity: Identifies the impact constraint violation has on the conformance of the
   instance.
       :param human: Text that can be used to describe the constraint in messages identifying that
   the constraint has been violated.
       :param expression: A [FHIRPath](fhirpath.html) expression of constraint that can be executed to
   see if this constraint is met.
       :param xpath: An XPath expression of constraint that can be executed to see if this
   constraint is met.
       :param source: A reference to the original source of the constraint, for traceability
   purposes.


