:py:mod:`spark_auto_mapper_fhir.backbone_elements.detected_issue_mitigation`
============================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.detected_issue_mitigation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.detected_issue_mitigation.DetectedIssueMitigation




.. py:class:: DetectedIssueMitigation(*, id_ = None, extension = None, modifierExtension = None, action, date = None, author = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   DetectedIssue.Mitigation
       Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.

       Indicates an actual or potential clinical issue with or between one or more
   active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
   Ineffective treatment frequency, Procedure-condition conflict, etc.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param action: Describes the action that was taken or the observation that was made that
   reduces/eliminates the risk associated with the identified issue.
       :param date: Indicates when the mitigating action was documented.
       :param author: Identifies the practitioner who determined the mitigation and takes
   responsibility for the mitigation step occurring.


