:mod:`spark_auto_mapper_fhir.backbone_elements.contract_legal`
==============================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.contract_legal


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.contract_legal.ContractLegal



.. class:: ContractLegal(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, contentAttachment: Optional[spark_auto_mapper_fhir.complex_types.attachment.Attachment] = None, contentReference: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[Union[(spark_auto_mapper_fhir.resources.composition.Composition, spark_auto_mapper_fhir.resources.document_reference.DocumentReference, spark_auto_mapper_fhir.resources.questionnaire_response.QuestionnaireResponse)]]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Contract.Legal
   Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.


