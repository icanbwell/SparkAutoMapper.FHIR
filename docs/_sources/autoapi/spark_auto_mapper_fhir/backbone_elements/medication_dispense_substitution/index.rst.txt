:py:mod:`spark_auto_mapper_fhir.backbone_elements.medication_dispense_substitution`
===================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.medication_dispense_substitution


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.medication_dispense_substitution.MedicationDispenseSubstitution




.. py:class:: MedicationDispenseSubstitution(*, id_ = None, extension = None, modifierExtension = None, wasSubstituted, type_ = None, reason = None, responsibleParty = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   MedicationDispense.Substitution
       Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.

       Indicates that a medication product is to be or has been dispensed for a named
   person/patient.  This includes a description of the medication product
   (supply) provided and the instructions for administering the medication.  The
   medication dispense is the result of a pharmacy system responding to a
   medication order.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param wasSubstituted: True if the dispenser dispensed a different drug or product from what was
   prescribed.
       :param type_: A code signifying whether a different drug was dispensed from what was
   prescribed.
       :param reason: Indicates the reason for the substitution (or lack of substitution) from what
   was prescribed.
       :param responsibleParty: The person or organization that has primary responsibility for the
   substitution.


