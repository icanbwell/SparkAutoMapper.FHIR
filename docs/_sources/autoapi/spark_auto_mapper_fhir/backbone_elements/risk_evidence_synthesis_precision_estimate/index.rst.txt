:py:mod:`spark_auto_mapper_fhir.backbone_elements.risk_evidence_synthesis_precision_estimate`
=============================================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.risk_evidence_synthesis_precision_estimate


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.risk_evidence_synthesis_precision_estimate.RiskEvidenceSynthesisPrecisionEstimate




.. py:class:: RiskEvidenceSynthesisPrecisionEstimate(*, id_ = None, extension = None, modifierExtension = None, type_ = None, level = None, from_ = None, to = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   RiskEvidenceSynthesis.PrecisionEstimate
       The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a population plus exposure state where the risk estimate is derived from a combination of research studies.

       The RiskEvidenceSynthesis resource describes the likelihood of an outcome in a
   population plus exposure state where the risk estimate is derived from a
   combination of research studies.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param type_: Examples include confidence interval and interquartile range.
       :param level: Use 95 for a 95% confidence interval.
       :param from_: Lower bound of confidence interval.
       :param to: Upper bound of confidence interval.


