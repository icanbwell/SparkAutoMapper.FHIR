:py:mod:`spark_auto_mapper_fhir.backbone_elements.element_definition_base`
==========================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.element_definition_base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.element_definition_base.ElementDefinitionBase




.. py:class:: ElementDefinitionBase(*, id_ = None, extension = None, modifierExtension = None, path, min, max)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ElementDefinition.Base
       Captures constraints on each element within the resource, profile, or extension.
       If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions

       Captures constraints on each element within the resource, profile, or
   extension.
       If the element is present, it must have a value for at least one of the
   defined elements, an @id referenced from the Narrative, or extensions

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param path: The Path that identifies the base element - this matches the
   ElementDefinition.path for that element. Across FHIR, there is only one base
   definition of any element - that is, an element definition on a
   [[[StructureDefinition]]] without a StructureDefinition.base.
       :param min: Minimum cardinality of the base element identified by the path.
       :param max: Maximum cardinality of the base element identified by the path.


