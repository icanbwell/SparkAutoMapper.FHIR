:mod:`spark_auto_mapper_fhir.backbone_elements.specimen_container`
==================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.specimen_container


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.specimen_container.SpecimenContainer



.. class:: SpecimenContainer(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, identifier: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.identifier.Identifier]] = None, description: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, type_: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.specimen_container_type.SpecimenContainerTypeCode]] = None, capacity: Optional[spark_auto_mapper_fhir.complex_types.quantity.Quantity] = None, specimenQuantity: Optional[spark_auto_mapper_fhir.complex_types.quantity.Quantity] = None, additiveCodeableConcept: Optional[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.v2_0371.V2_0371]] = None, additiveReference: Optional[spark_auto_mapper_fhir.complex_types.reference.Reference[spark_auto_mapper_fhir.resources.substance.Substance]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Specimen.Container
   A sample to be used for analysis.


