:py:mod:`spark_auto_mapper_fhir.backbone_elements.contract_content_definition`
==============================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.contract_content_definition


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.contract_content_definition.ContractContentDefinition




.. py:class:: ContractContentDefinition(*, id_ = None, extension = None, modifierExtension = None, type_, subType = None, publisher = None, publicationDate = None, publicationStatus, copyright = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Contract.ContentDefinition
       Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.

       Legally enforceable, formally recorded unilateral or bilateral directive i.e.,
   a policy or agreement.

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param type_: Precusory content structure and use, i.e., a boilerplate, template,
   application for a contract such as an insurance policy or benefits under a
   program, e.g., workers compensation.
       :param subType: Detailed Precusory content type.
       :param publisher: The  individual or organization that published the Contract precursor content.
       :param publicationDate: The date (and optionally time) when the contract was published. The date must
   change when the business version changes and it must change if the status code
   changes. In addition, it should change when the substantive content of the
   contract changes.
       :param publicationStatus: amended | appended | cancelled | disputed | entered-in-error | executable |
   executed | negotiable | offered | policy | rejected | renewed | revoked |
   resolved | terminated.
       :param copyright: A copyright statement relating to Contract precursor content. Copyright
   statements are generally legal restrictions on the use and publishing of the
   Contract precursor content.


