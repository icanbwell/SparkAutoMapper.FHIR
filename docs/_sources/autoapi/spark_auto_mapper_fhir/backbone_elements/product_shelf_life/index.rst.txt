:mod:`spark_auto_mapper_fhir.backbone_elements.product_shelf_life`
==================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.product_shelf_life


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.product_shelf_life.ProductShelfLife



.. class:: ProductShelfLife(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, identifier: Optional[spark_auto_mapper_fhir.complex_types.identifier.Identifier] = None, type_: spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode], period: spark_auto_mapper_fhir.complex_types.quantity.Quantity, specialPrecautionsForStorage: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.complex_types.codeable_concept.CodeableConcept[spark_auto_mapper_fhir.value_sets.generic_type.GenericTypeCode]]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   ProductShelfLife
   The shelf-life and storage information for a medicinal product item or container can be described using this class.
   If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions


