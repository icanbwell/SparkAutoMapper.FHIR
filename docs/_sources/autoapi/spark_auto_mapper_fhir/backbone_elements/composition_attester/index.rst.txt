:py:mod:`spark_auto_mapper_fhir.backbone_elements.composition_attester`
=======================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.composition_attester


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.composition_attester.CompositionAttester




.. py:class:: CompositionAttester(*, id_ = None, extension = None, modifierExtension = None, mode, time = None, party = None)

   Bases: :py:obj:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   Composition.Attester
       A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).

       A set of healthcare-related information that is assembled together into a
   single logical package that provides a single coherent statement of meaning,
   establishes its own context and that has clinical attestation with regard to
   who is making the statement. A Composition defines the structure and narrative
   content necessary for a document. However, a Composition alone does not
   constitute a document. Rather, the Composition must be the first entry in a
   Bundle where Bundle.type=document, and any other resources referenced from
   Composition must be included as subsequent entries in the Bundle (for example
   Patient, Practitioner, Encounter, etc.).

       :param id_: None
       :param extension: May be used to represent additional information that is not part of the basic
   definition of the element. To make the use of extensions safe and manageable,
   there is a strict set of governance  applied to the definition and use of
   extensions. Though any implementer can define an extension, there is a set of
   requirements that SHALL be met as part of the definition of the extension.
       :param modifierExtension: May be used to represent additional information that is not part of the basic
   definition of the element and that modifies the understanding of the element
   in which it is contained and/or the understanding of the containing element's
   descendants. Usually modifier elements provide negation or qualification. To
   make the use of extensions safe and manageable, there is a strict set of
   governance applied to the definition and use of extensions. Though any
   implementer can define an extension, there is a set of requirements that SHALL
   be met as part of the definition of the extension. Applications processing a
   resource are required to check for modifier extensions.

   Modifier extensions SHALL NOT change the meaning of any elements on Resource
   or DomainResource (including cannot change the meaning of modifierExtension
   itself).
       :param mode: The type of attestation the authenticator offers.
       :param time: When the composition was attested by the party.
       :param party: Who attested the composition in the specified way.


