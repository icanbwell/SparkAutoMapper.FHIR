:mod:`spark_auto_mapper_fhir.backbone_elements.structure_map_target`
====================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.structure_map_target


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.structure_map_target.StructureMapTarget



.. class:: StructureMapTarget(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, context: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, contextType: Optional[spark_auto_mapper_fhir.value_sets.structure_map_context_type.StructureMapContextTypeCode] = None, element: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, variable: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, listMode: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.value_sets.structure_map_target_list_mode.StructureMapTargetListModeCode]] = None, listRuleId: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, transform: Optional[spark_auto_mapper_fhir.value_sets.structure_map_transform.StructureMapTransformCode] = None, parameter: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.structure_map_parameter.StructureMapParameter]] = None)


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   StructureMap.Target
   A Map of relationships between 2 structures that can be used to transform data.


