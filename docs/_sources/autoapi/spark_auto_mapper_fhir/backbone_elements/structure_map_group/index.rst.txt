:mod:`spark_auto_mapper_fhir.backbone_elements.structure_map_group`
===================================================================

.. py:module:: spark_auto_mapper_fhir.backbone_elements.structure_map_group


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   spark_auto_mapper_fhir.backbone_elements.structure_map_group.StructureMapGroup



.. class:: StructureMapGroup(*, id_: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, extension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, modifierExtension: Optional[spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.extensions.extension_base.ExtensionBase]] = None, name: spark_auto_mapper_fhir.fhir_types.id.FhirId, extends: Optional[spark_auto_mapper_fhir.fhir_types.id.FhirId] = None, typeMode: spark_auto_mapper_fhir.value_sets.structure_map_group_type_mode.StructureMapGroupTypeModeCode, documentation: Optional[spark_auto_mapper_fhir.fhir_types.string.FhirString] = None, input: spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.structure_map_input.StructureMapInput], rule: spark_auto_mapper_fhir.fhir_types.list.FhirList[spark_auto_mapper_fhir.backbone_elements.structure_map_rule.StructureMapRule])


   Bases: :class:`spark_auto_mapper_fhir.base_types.fhir_backbone_element_base.FhirBackboneElementBase`

   StructureMap.Group
   A Map of relationships between 2 structures that can be used to transform data.


